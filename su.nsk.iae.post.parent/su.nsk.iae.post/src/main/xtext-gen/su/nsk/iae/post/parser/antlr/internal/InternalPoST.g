/*
 * generated by Xtext 2.25.0
 */
grammar InternalPoST;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package su.nsk.iae.post.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package su.nsk.iae.post.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import su.nsk.iae.post.services.PoSTGrammarAccess;

}

@parser::members {

 	private PoSTGrammarAccess grammarAccess;

    public InternalPoSTParser(TokenStream input, PoSTGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected PoSTGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getModelAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 0);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getModelAccess().getConfConfigurationParserRuleCall_0_0());
								}
								lv_conf_1_0=ruleConfiguration
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getModelRule());
									}
									set(
										$current,
										"conf",
										lv_conf_1_0,
										"su.nsk.iae.post.PoST.Configuration");
									afterParserOrEnumRuleCall();
								}
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 1);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getModelAccess().getGlobVarsGlobalVarDeclarationParserRuleCall_1_0());
								}
								lv_globVars_2_0=ruleGlobalVarDeclaration
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getModelRule());
									}
									add(
										$current,
										"globVars",
										lv_globVars_2_0,
										"su.nsk.iae.post.PoST.GlobalVarDeclaration");
									afterParserOrEnumRuleCall();
								}
							)
							))+
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 2);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getModelAccess().getProgramsProgramParserRuleCall_2_0());
								}
								lv_programs_3_0=ruleProgram
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getModelRule());
									}
									add(
										$current,
										"programs",
										lv_programs_3_0,
										"su.nsk.iae.post.PoST.Program");
									afterParserOrEnumRuleCall();
								}
							)
							))+
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 3)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 3);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getModelAccess().getFbsFunctionBlockParserRuleCall_3_0());
								}
								lv_fbs_4_0=ruleFunctionBlock
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getModelRule());
									}
									add(
										$current,
										"fbs",
										lv_fbs_4_0,
										"su.nsk.iae.post.PoST.FunctionBlock");
									afterParserOrEnumRuleCall();
								}
							)
							))+
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getModelAccess().getUnorderedGroup(), 4)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getModelAccess().getUnorderedGroup(), 4);
				}
							({true}?=>((
								{
									newCompositeNode(grammarAccess.getModelAccess().getFunsFunctionParserRuleCall_4_0());
								}
								lv_funs_5_0=ruleFunction
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getModelRule());
									}
									add(
										$current,
										"funs",
										lv_funs_5_0,
										"su.nsk.iae.post.PoST.Function");
									afterParserOrEnumRuleCall();
								}
							)
							))+
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModelAccess().getUnorderedGroup());
				}
			)
		)
				)*
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getModelAccess().getUnorderedGroup());
			}
	)
;

// Entry rule entryRuleConfiguration
entryRuleConfiguration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConfigurationRule()); }
	iv_ruleConfiguration=ruleConfiguration
	{ $current=$iv_ruleConfiguration.current; }
	EOF;

// Rule Configuration
ruleConfiguration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CONFIGURATION'
		{
			newLeafNode(otherlv_0, grammarAccess.getConfigurationAccess().getCONFIGURATIONKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getConfigurationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConfigurationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"su.nsk.iae.post.PoST.ID");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConfigurationAccess().getConfGlobVarsGlobalVarDeclarationParserRuleCall_2_0_0());
					}
					lv_confGlobVars_2_0=ruleGlobalVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConfigurationRule());
						}
						add(
							$current,
							"confGlobVars",
							lv_confGlobVars_2_0,
							"su.nsk.iae.post.PoST.GlobalVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getConfigurationAccess().getResourcesResourceParserRuleCall_2_1_0());
					}
					lv_resources_3_0=ruleResource
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConfigurationRule());
						}
						add(
							$current,
							"resources",
							lv_resources_3_0,
							"su.nsk.iae.post.PoST.Resource");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4='END_CONFIGURATION'
		{
			newLeafNode(otherlv_4, grammarAccess.getConfigurationAccess().getEND_CONFIGURATIONKeyword_3());
		}
	)
;

// Entry rule entryRuleResource
entryRuleResource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResourceRule()); }
	iv_ruleResource=ruleResource
	{ $current=$iv_ruleResource.current; }
	EOF;

// Rule Resource
ruleResource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='RESOURCE'
		{
			newLeafNode(otherlv_0, grammarAccess.getResourceAccess().getRESOURCEKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getResourceAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getResourceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"su.nsk.iae.post.PoST.ID");
				}
			)
		)
		otherlv_2='ON'
		{
			newLeafNode(otherlv_2, grammarAccess.getResourceAccess().getONKeyword_2());
		}
		(
			(
				lv_type_3_0=RULE_ID
				{
					newLeafNode(lv_type_3_0, grammarAccess.getResourceAccess().getTypeIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getResourceRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_3_0,
						"su.nsk.iae.post.PoST.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getResourceAccess().getResGlobVarsGlobalVarDeclarationParserRuleCall_4_0());
				}
				lv_resGlobVars_4_0=ruleGlobalVarDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResourceRule());
					}
					add(
						$current,
						"resGlobVars",
						lv_resGlobVars_4_0,
						"su.nsk.iae.post.PoST.GlobalVarDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getResourceAccess().getResStatementSingleResourceParserRuleCall_5_0());
				}
				lv_resStatement_5_0=ruleSingleResource
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getResourceRule());
					}
					set(
						$current,
						"resStatement",
						lv_resStatement_5_0,
						"su.nsk.iae.post.PoST.SingleResource");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='END_RESOURCE'
		{
			newLeafNode(otherlv_6, grammarAccess.getResourceAccess().getEND_RESOURCEKeyword_6());
		}
	)
;

// Entry rule entryRuleSingleResource
entryRuleSingleResource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleResourceRule()); }
	iv_ruleSingleResource=ruleSingleResource
	{ $current=$iv_ruleSingleResource.current; }
	EOF;

// Rule SingleResource
ruleSingleResource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSingleResourceAccess().getSingleResourceAction_0(),
					$current);
			}
		)
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSingleResourceAccess().getTasksTaskParserRuleCall_1_0_0_0());
						}
						lv_tasks_1_0=ruleTask
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSingleResourceRule());
							}
							add(
								$current,
								"tasks",
								lv_tasks_1_0,
								"su.nsk.iae.post.PoST.Task");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_2=';'
				{
					newLeafNode(otherlv_2, grammarAccess.getSingleResourceAccess().getSemicolonKeyword_1_0_1());
				}
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSingleResourceAccess().getProgramConfsProgramConfigurationParserRuleCall_1_1_0_0());
						}
						lv_programConfs_3_0=ruleProgramConfiguration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSingleResourceRule());
							}
							add(
								$current,
								"programConfs",
								lv_programConfs_3_0,
								"su.nsk.iae.post.PoST.ProgramConfiguration");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_4=';'
				{
					newLeafNode(otherlv_4, grammarAccess.getSingleResourceAccess().getSemicolonKeyword_1_1_1());
				}
			)
		)*
	)
;

// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	iv_ruleTask=ruleTask
	{ $current=$iv_ruleTask.current; }
	EOF;

// Rule Task
ruleTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TASK'
		{
			newLeafNode(otherlv_0, grammarAccess.getTaskAccess().getTASKKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTaskAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"su.nsk.iae.post.PoST.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getTaskAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getInitTaskInitializationParserRuleCall_3_0());
				}
				lv_init_3_0=ruleTaskInitialization
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					set(
						$current,
						"init",
						lv_init_3_0,
						"su.nsk.iae.post.PoST.TaskInitialization");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getTaskAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleTaskInitialization
entryRuleTaskInitialization returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskInitializationRule()); }
	iv_ruleTaskInitialization=ruleTaskInitialization
	{ $current=$iv_ruleTaskInitialization.current; }
	EOF;

// Rule TaskInitialization
ruleTaskInitialization returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_SINGLE_DECLARATION_0=RULE_SINGLE_DECLARATION
			{
				newLeafNode(this_SINGLE_DECLARATION_0, grammarAccess.getTaskInitializationAccess().getSINGLE_DECLARATIONTerminalRuleCall_0_0());
			}
			otherlv_1=':='
			{
				newLeafNode(otherlv_1, grammarAccess.getTaskInitializationAccess().getColonEqualsSignKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTaskInitializationAccess().getSingleConstantParserRuleCall_0_2_0());
					}
					lv_single_2_0=ruleConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTaskInitializationRule());
						}
						set(
							$current,
							"single",
							lv_single_2_0,
							"su.nsk.iae.post.PoST.Constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				this_INTERVAL_DECLARATION_3=RULE_INTERVAL_DECLARATION
				{
					newLeafNode(this_INTERVAL_DECLARATION_3, grammarAccess.getTaskInitializationAccess().getINTERVAL_DECLARATIONTerminalRuleCall_1_0_0());
				}
				otherlv_4=':='
				{
					newLeafNode(otherlv_4, grammarAccess.getTaskInitializationAccess().getColonEqualsSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTaskInitializationAccess().getIntervalConstantParserRuleCall_1_0_2_0());
						}
						lv_interval_5_0=ruleConstant
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTaskInitializationRule());
							}
							set(
								$current,
								"interval",
								lv_interval_5_0,
								"su.nsk.iae.post.PoST.Constant");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_6=','
			{
				newLeafNode(otherlv_6, grammarAccess.getTaskInitializationAccess().getCommaKeyword_1_1());
			}
			this_PRIORITY_DECLARATION_7=RULE_PRIORITY_DECLARATION
			{
				newLeafNode(this_PRIORITY_DECLARATION_7, grammarAccess.getTaskInitializationAccess().getPRIORITY_DECLARATIONTerminalRuleCall_1_2());
			}
			otherlv_8=':='
			{
				newLeafNode(otherlv_8, grammarAccess.getTaskInitializationAccess().getColonEqualsSignKeyword_1_3());
			}
			(
				(
					lv_priority_9_0=RULE_INTEGER
					{
						newLeafNode(lv_priority_9_0, grammarAccess.getTaskInitializationAccess().getPriorityINTEGERTerminalRuleCall_1_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTaskInitializationRule());
						}
						setWithLastConsumed(
							$current,
							"priority",
							lv_priority_9_0,
							"su.nsk.iae.post.PoST.INTEGER");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleProgramConfiguration
entryRuleProgramConfiguration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramConfigurationRule()); }
	iv_ruleProgramConfiguration=ruleProgramConfiguration
	{ $current=$iv_ruleProgramConfiguration.current; }
	EOF;

// Rule ProgramConfiguration
ruleProgramConfiguration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PROGRAM'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgramConfigurationAccess().getPROGRAMKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProgramConfigurationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgramConfigurationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"su.nsk.iae.post.PoST.ID");
				}
			)
		)
		(
			otherlv_2='WITH'
			{
				newLeafNode(otherlv_2, grammarAccess.getProgramConfigurationAccess().getWITHKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProgramConfigurationRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getProgramConfigurationAccess().getTaskTaskCrossReference_2_1_0());
					}
				)
			)
		)?
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getProgramConfigurationAccess().getColonKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgramConfigurationRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getProgramConfigurationAccess().getProgramProgramCrossReference_4_0());
				}
			)
		)
		(
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getProgramConfigurationAccess().getLeftParenthesisKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramConfigurationAccess().getArgsProgramConfElementsParserRuleCall_5_1_0());
					}
					lv_args_7_0=ruleProgramConfElements
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramConfigurationRule());
						}
						set(
							$current,
							"args",
							lv_args_7_0,
							"su.nsk.iae.post.PoST.ProgramConfElements");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getProgramConfigurationAccess().getRightParenthesisKeyword_5_2());
			}
		)?
	)
;

// Entry rule entryRuleProgramConfElements
entryRuleProgramConfElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramConfElementsRule()); }
	iv_ruleProgramConfElements=ruleProgramConfElements
	{ $current=$iv_ruleProgramConfElements.current; }
	EOF;

// Rule ProgramConfElements
ruleProgramConfElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramConfElementsAccess().getElementsProgramConfElementParserRuleCall_0_0());
				}
				lv_elements_0_0=ruleProgramConfElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramConfElementsRule());
					}
					add(
						$current,
						"elements",
						lv_elements_0_0,
						"su.nsk.iae.post.PoST.ProgramConfElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getProgramConfElementsAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramConfElementsAccess().getElementsProgramConfElementParserRuleCall_1_1_0());
					}
					lv_elements_2_0=ruleProgramConfElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramConfElementsRule());
						}
						add(
							$current,
							"elements",
							lv_elements_2_0,
							"su.nsk.iae.post.PoST.ProgramConfElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleProgramConfElement
entryRuleProgramConfElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramConfElementRule()); }
	iv_ruleProgramConfElement=ruleProgramConfElement
	{ $current=$iv_ruleProgramConfElement.current; }
	EOF;

// Rule ProgramConfElement
ruleProgramConfElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProgramConfElementAccess().getAttachVariableConfElementParserRuleCall_0());
		}
		this_AttachVariableConfElement_0=ruleAttachVariableConfElement
		{
			$current = $this_AttachVariableConfElement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProgramConfElementAccess().getTemplateProcessConfElementParserRuleCall_1());
		}
		this_TemplateProcessConfElement_1=ruleTemplateProcessConfElement
		{
			$current = $this_TemplateProcessConfElement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAttachVariableConfElement
entryRuleAttachVariableConfElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttachVariableConfElementRule()); }
	iv_ruleAttachVariableConfElement=ruleAttachVariableConfElement
	{ $current=$iv_ruleAttachVariableConfElement.current; }
	EOF;

// Rule AttachVariableConfElement
ruleAttachVariableConfElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttachVariableConfElementRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAttachVariableConfElementAccess().getProgramVarSymbolicVariableCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAttachVariableConfElementAccess().getAssigAssignmentTypeEnumRuleCall_1_0());
				}
				lv_assig_1_0=ruleAssignmentType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttachVariableConfElementRule());
					}
					set(
						$current,
						"assig",
						lv_assig_1_0,
						"su.nsk.iae.post.PoST.AssignmentType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttachVariableConfElementRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getAttachVariableConfElementAccess().getAttVarSymbolicVariableCrossReference_2_0_0());
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAttachVariableConfElementAccess().getConstConstantParserRuleCall_2_1_0());
					}
					lv_const_3_0=ruleConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttachVariableConfElementRule());
						}
						set(
							$current,
							"const",
							lv_const_3_0,
							"su.nsk.iae.post.PoST.Constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTemplateProcessConfElement
entryRuleTemplateProcessConfElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTemplateProcessConfElementRule()); }
	iv_ruleTemplateProcessConfElement=ruleTemplateProcessConfElement
	{ $current=$iv_ruleTemplateProcessConfElement.current; }
	EOF;

// Rule TemplateProcessConfElement
ruleTemplateProcessConfElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PROCESS'
		{
			newLeafNode(otherlv_0, grammarAccess.getTemplateProcessConfElementAccess().getPROCESSKeyword_0());
		}
		(
			(
				lv_active_1_0='ACTIVE'
				{
					newLeafNode(lv_active_1_0, grammarAccess.getTemplateProcessConfElementAccess().getActiveACTIVEKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTemplateProcessConfElementRule());
					}
					setWithLastConsumed($current, "active", lv_active_1_0 != null, "ACTIVE");
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getTemplateProcessConfElementAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTemplateProcessConfElementRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"su.nsk.iae.post.PoST.ID");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getTemplateProcessConfElementAccess().getColonKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTemplateProcessConfElementRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getTemplateProcessConfElementAccess().getProcessProcessCrossReference_4_0());
				}
			)
		)
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getTemplateProcessConfElementAccess().getLeftParenthesisKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTemplateProcessConfElementAccess().getArgsTemplateProcessElementsParserRuleCall_5_1_0());
					}
					lv_args_6_0=ruleTemplateProcessElements
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTemplateProcessConfElementRule());
						}
						set(
							$current,
							"args",
							lv_args_6_0,
							"su.nsk.iae.post.PoST.TemplateProcessElements");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getTemplateProcessConfElementAccess().getRightParenthesisKeyword_5_2());
			}
		)?
	)
;

// Entry rule entryRuleTemplateProcessElements
entryRuleTemplateProcessElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTemplateProcessElementsRule()); }
	iv_ruleTemplateProcessElements=ruleTemplateProcessElements
	{ $current=$iv_ruleTemplateProcessElements.current; }
	EOF;

// Rule TemplateProcessElements
ruleTemplateProcessElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTemplateProcessElementsAccess().getElementsTemplateProcessAttachVariableConfElementParserRuleCall_0_0());
				}
				lv_elements_0_0=ruleTemplateProcessAttachVariableConfElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTemplateProcessElementsRule());
					}
					add(
						$current,
						"elements",
						lv_elements_0_0,
						"su.nsk.iae.post.PoST.TemplateProcessAttachVariableConfElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getTemplateProcessElementsAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTemplateProcessElementsAccess().getElementsTemplateProcessAttachVariableConfElementParserRuleCall_1_1_0());
					}
					lv_elements_2_0=ruleTemplateProcessAttachVariableConfElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTemplateProcessElementsRule());
						}
						add(
							$current,
							"elements",
							lv_elements_2_0,
							"su.nsk.iae.post.PoST.TemplateProcessAttachVariableConfElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTemplateProcessAttachVariableConfElement
entryRuleTemplateProcessAttachVariableConfElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTemplateProcessAttachVariableConfElementRule()); }
	iv_ruleTemplateProcessAttachVariableConfElement=ruleTemplateProcessAttachVariableConfElement
	{ $current=$iv_ruleTemplateProcessAttachVariableConfElement.current; }
	EOF;

// Rule TemplateProcessAttachVariableConfElement
ruleTemplateProcessAttachVariableConfElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTemplateProcessAttachVariableConfElementRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getTemplateProcessAttachVariableConfElementAccess().getProgramVarVariableCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTemplateProcessAttachVariableConfElementAccess().getAssigAssignmentTypeEnumRuleCall_1_0());
				}
				lv_assig_1_0=ruleAssignmentType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTemplateProcessAttachVariableConfElementRule());
					}
					set(
						$current,
						"assig",
						lv_assig_1_0,
						"su.nsk.iae.post.PoST.AssignmentType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTemplateProcessAttachVariableConfElementRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getTemplateProcessAttachVariableConfElementAccess().getAttVarVariableCrossReference_2_0_0());
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getTemplateProcessAttachVariableConfElementAccess().getConstConstantParserRuleCall_2_1_0());
					}
					lv_const_3_0=ruleConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTemplateProcessAttachVariableConfElementRule());
						}
						set(
							$current,
							"const",
							lv_const_3_0,
							"su.nsk.iae.post.PoST.Constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PROGRAM'
		{
			newLeafNode(otherlv_0, grammarAccess.getProgramAccess().getPROGRAMKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProgramAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProgramRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"su.nsk.iae.post.PoST.ID");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getProgInVarsInputVarDeclarationParserRuleCall_2_0_0());
					}
					lv_progInVars_2_0=ruleInputVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"progInVars",
							lv_progInVars_2_0,
							"su.nsk.iae.post.PoST.InputVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getProgOutVarsOutputVarDeclarationParserRuleCall_2_1_0());
					}
					lv_progOutVars_3_0=ruleOutputVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"progOutVars",
							lv_progOutVars_3_0,
							"su.nsk.iae.post.PoST.OutputVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getProgInOutVarsInputOutputVarDeclarationParserRuleCall_2_2_0());
					}
					lv_progInOutVars_4_0=ruleInputOutputVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"progInOutVars",
							lv_progInOutVars_4_0,
							"su.nsk.iae.post.PoST.InputOutputVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getProgVarsVarDeclarationParserRuleCall_2_3_0());
					}
					lv_progVars_5_0=ruleVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"progVars",
							lv_progVars_5_0,
							"su.nsk.iae.post.PoST.VarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getProgTempVarsTempVarDeclarationParserRuleCall_2_4_0());
					}
					lv_progTempVars_6_0=ruleTempVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"progTempVars",
							lv_progTempVars_6_0,
							"su.nsk.iae.post.PoST.TempVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProgramAccess().getProgExternVarsExternalVarDeclarationParserRuleCall_2_5_0());
					}
					lv_progExternVars_7_0=ruleExternalVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProgramRule());
						}
						add(
							$current,
							"progExternVars",
							lv_progExternVars_7_0,
							"su.nsk.iae.post.PoST.ExternalVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getProcessesProcessParserRuleCall_3_0());
				}
				lv_processes_8_0=ruleProcess
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"processes",
						lv_processes_8_0,
						"su.nsk.iae.post.PoST.Process");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='END_PROGRAM'
		{
			newLeafNode(otherlv_9, grammarAccess.getProgramAccess().getEND_PROGRAMKeyword_4());
		}
	)
;

// Entry rule entryRuleFunctionBlock
entryRuleFunctionBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionBlockRule()); }
	iv_ruleFunctionBlock=ruleFunctionBlock
	{ $current=$iv_ruleFunctionBlock.current; }
	EOF;

// Rule FunctionBlock
ruleFunctionBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FUNCTION_BLOCK'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionBlockAccess().getFUNCTION_BLOCKKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunctionBlockAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionBlockRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"su.nsk.iae.post.PoST.ID");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionBlockAccess().getFbInVarsInputVarDeclarationParserRuleCall_2_0_0());
					}
					lv_fbInVars_2_0=ruleInputVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionBlockRule());
						}
						add(
							$current,
							"fbInVars",
							lv_fbInVars_2_0,
							"su.nsk.iae.post.PoST.InputVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionBlockAccess().getFbOutVarsOutputVarDeclarationParserRuleCall_2_1_0());
					}
					lv_fbOutVars_3_0=ruleOutputVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionBlockRule());
						}
						add(
							$current,
							"fbOutVars",
							lv_fbOutVars_3_0,
							"su.nsk.iae.post.PoST.OutputVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionBlockAccess().getFbInOutVarsInputOutputVarDeclarationParserRuleCall_2_2_0());
					}
					lv_fbInOutVars_4_0=ruleInputOutputVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionBlockRule());
						}
						add(
							$current,
							"fbInOutVars",
							lv_fbInOutVars_4_0,
							"su.nsk.iae.post.PoST.InputOutputVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionBlockAccess().getFbVarsVarDeclarationParserRuleCall_2_3_0());
					}
					lv_fbVars_5_0=ruleVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionBlockRule());
						}
						add(
							$current,
							"fbVars",
							lv_fbVars_5_0,
							"su.nsk.iae.post.PoST.VarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionBlockAccess().getFbTempVarsTempVarDeclarationParserRuleCall_2_4_0());
					}
					lv_fbTempVars_6_0=ruleTempVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionBlockRule());
						}
						add(
							$current,
							"fbTempVars",
							lv_fbTempVars_6_0,
							"su.nsk.iae.post.PoST.TempVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionBlockAccess().getFbExternVarsExternalVarDeclarationParserRuleCall_2_5_0());
					}
					lv_fbExternVars_7_0=ruleExternalVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionBlockRule());
						}
						add(
							$current,
							"fbExternVars",
							lv_fbExternVars_7_0,
							"su.nsk.iae.post.PoST.ExternalVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionBlockAccess().getProcessesProcessParserRuleCall_3_0());
				}
				lv_processes_8_0=ruleProcess
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionBlockRule());
					}
					add(
						$current,
						"processes",
						lv_processes_8_0,
						"su.nsk.iae.post.PoST.Process");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='END_FUNCTION_BLOCK'
		{
			newLeafNode(otherlv_9, grammarAccess.getFunctionBlockAccess().getEND_FUNCTION_BLOCKKeyword_4());
		}
	)
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FUNCTION'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFUNCTIONKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"su.nsk.iae.post.PoST.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getTypeDataTypeNameParserRuleCall_3_0());
				}
				lv_type_3_0=ruleDataTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"su.nsk.iae.post.PoST.DataTypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getFunInVarsInputVarDeclarationParserRuleCall_4_0_0());
					}
					lv_funInVars_4_0=ruleInputVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"funInVars",
							lv_funInVars_4_0,
							"su.nsk.iae.post.PoST.InputVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getFunOutVarsOutputVarDeclarationParserRuleCall_4_1_0());
					}
					lv_funOutVars_5_0=ruleOutputVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"funOutVars",
							lv_funOutVars_5_0,
							"su.nsk.iae.post.PoST.OutputVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getFunInOutVarsInputOutputVarDeclarationParserRuleCall_4_2_0());
					}
					lv_funInOutVars_6_0=ruleInputOutputVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"funInOutVars",
							lv_funInOutVars_6_0,
							"su.nsk.iae.post.PoST.InputOutputVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionAccess().getFunVarsVarDeclarationParserRuleCall_4_3_0());
					}
					lv_funVars_7_0=ruleVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionRule());
						}
						add(
							$current,
							"funVars",
							lv_funVars_7_0,
							"su.nsk.iae.post.PoST.VarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getStatementStatementListParserRuleCall_5_0());
				}
				lv_statement_8_0=ruleStatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"statement",
						lv_statement_8_0,
						"su.nsk.iae.post.PoST.StatementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='END_FUNCTION'
		{
			newLeafNode(otherlv_9, grammarAccess.getFunctionAccess().getEND_FUNCTIONKeyword_6());
		}
	)
;

// Entry rule entryRuleProcess
entryRuleProcess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessRule()); }
	iv_ruleProcess=ruleProcess
	{ $current=$iv_ruleProcess.current; }
	EOF;

// Rule Process
ruleProcess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PROCESS'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcessAccess().getPROCESSKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProcessAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcessRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"su.nsk.iae.post.PoST.ID");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProcessAccess().getProcInVarsInputVarDeclarationParserRuleCall_2_0_0());
					}
					lv_procInVars_2_0=ruleInputVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcessRule());
						}
						add(
							$current,
							"procInVars",
							lv_procInVars_2_0,
							"su.nsk.iae.post.PoST.InputVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProcessAccess().getProcOutVarsOutputVarDeclarationParserRuleCall_2_1_0());
					}
					lv_procOutVars_3_0=ruleOutputVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcessRule());
						}
						add(
							$current,
							"procOutVars",
							lv_procOutVars_3_0,
							"su.nsk.iae.post.PoST.OutputVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProcessAccess().getProcInOutVarsInputOutputVarDeclarationParserRuleCall_2_2_0());
					}
					lv_procInOutVars_4_0=ruleInputOutputVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcessRule());
						}
						add(
							$current,
							"procInOutVars",
							lv_procInOutVars_4_0,
							"su.nsk.iae.post.PoST.InputOutputVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProcessAccess().getProcProcessVarsProcessVarDeclarationParserRuleCall_2_3_0());
					}
					lv_procProcessVars_5_0=ruleProcessVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcessRule());
						}
						add(
							$current,
							"procProcessVars",
							lv_procProcessVars_5_0,
							"su.nsk.iae.post.PoST.ProcessVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProcessAccess().getProcVarsVarDeclarationParserRuleCall_2_4_0());
					}
					lv_procVars_6_0=ruleVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcessRule());
						}
						add(
							$current,
							"procVars",
							lv_procVars_6_0,
							"su.nsk.iae.post.PoST.VarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProcessAccess().getProcTempVarsTempVarDeclarationParserRuleCall_2_5_0());
					}
					lv_procTempVars_7_0=ruleTempVarDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcessRule());
						}
						add(
							$current,
							"procTempVars",
							lv_procTempVars_7_0,
							"su.nsk.iae.post.PoST.TempVarDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessAccess().getStatesStateParserRuleCall_3_0());
				}
				lv_states_8_0=ruleState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessRule());
					}
					add(
						$current,
						"states",
						lv_states_8_0,
						"su.nsk.iae.post.PoST.State");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='END_PROCESS'
		{
			newLeafNode(otherlv_9, grammarAccess.getProcessAccess().getEND_PROCESSKeyword_4());
		}
	)
;

// Entry rule entryRuleState
entryRuleState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='STATE'
		{
			newLeafNode(otherlv_0, grammarAccess.getStateAccess().getSTATEKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"su.nsk.iae.post.PoST.ID");
				}
			)
		)
		(
			(
				lv_looped_2_0='LOOPED'
				{
					newLeafNode(lv_looped_2_0, grammarAccess.getStateAccess().getLoopedLOOPEDKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStateRule());
					}
					setWithLastConsumed($current, "looped", lv_looped_2_0 != null, "LOOPED");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getStatementStatementListParserRuleCall_3_0());
				}
				lv_statement_3_0=ruleStatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					set(
						$current,
						"statement",
						lv_statement_3_0,
						"su.nsk.iae.post.PoST.StatementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getTimeoutTimeoutStatementParserRuleCall_4_0());
				}
				lv_timeout_4_0=ruleTimeoutStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					set(
						$current,
						"timeout",
						lv_timeout_4_0,
						"su.nsk.iae.post.PoST.TimeoutStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5='END_STATE'
		{
			newLeafNode(otherlv_5, grammarAccess.getStateAccess().getEND_STATEKeyword_5());
		}
	)
;

// Entry rule entryRuleSetStateStatement
entryRuleSetStateStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSetStateStatementRule()); }
	iv_ruleSetStateStatement=ruleSetStateStatement
	{ $current=$iv_ruleSetStateStatement.current; }
	EOF;

// Rule SetStateStatement
ruleSetStateStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSetStateStatementAccess().getSetStateStatementAction_0(),
					$current);
			}
		)
		otherlv_1='SET'
		{
			newLeafNode(otherlv_1, grammarAccess.getSetStateStatementAccess().getSETKeyword_1());
		}
		(
			(
				otherlv_2='STATE'
				{
					newLeafNode(otherlv_2, grammarAccess.getSetStateStatementAccess().getSTATEKeyword_2_0_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSetStateStatementRule());
							}
						}
						otherlv_3=RULE_ID
						{
							newLeafNode(otherlv_3, grammarAccess.getSetStateStatementAccess().getStateStateCrossReference_2_0_1_0());
						}
					)
				)
			)
			    |
			(
				(
					lv_next_4_0='NEXT'
					{
						newLeafNode(lv_next_4_0, grammarAccess.getSetStateStatementAccess().getNextNEXTKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSetStateStatementRule());
						}
						setWithLastConsumed($current, "next", lv_next_4_0 != null, "NEXT");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleProcessStatements
entryRuleProcessStatements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessStatementsRule()); }
	iv_ruleProcessStatements=ruleProcessStatements
	{ $current=$iv_ruleProcessStatements.current; }
	EOF;

// Rule ProcessStatements
ruleProcessStatements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getProcessStatementsAccess().getStartProcessStatementParserRuleCall_0());
		}
		this_StartProcessStatement_0=ruleStartProcessStatement
		{
			$current = $this_StartProcessStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProcessStatementsAccess().getStopProcessStatementParserRuleCall_1());
		}
		this_StopProcessStatement_1=ruleStopProcessStatement
		{
			$current = $this_StopProcessStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getProcessStatementsAccess().getErrorProcessStatementParserRuleCall_2());
		}
		this_ErrorProcessStatement_2=ruleErrorProcessStatement
		{
			$current = $this_ErrorProcessStatement_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleProcessStatusExpression
entryRuleProcessStatusExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessStatusExpressionRule()); }
	iv_ruleProcessStatusExpression=ruleProcessStatusExpression
	{ $current=$iv_ruleProcessStatusExpression.current; }
	EOF;

// Rule ProcessStatusExpression
ruleProcessStatusExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='PROCESS'
		{
			newLeafNode(otherlv_0, grammarAccess.getProcessStatusExpressionAccess().getPROCESSKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcessStatusExpressionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getProcessStatusExpressionAccess().getProcessVariableCrossReference_1_0());
				}
			)
		)
		otherlv_2='IN'
		{
			newLeafNode(otherlv_2, grammarAccess.getProcessStatusExpressionAccess().getINKeyword_2());
		}
		otherlv_3='STATE'
		{
			newLeafNode(otherlv_3, grammarAccess.getProcessStatusExpressionAccess().getSTATEKeyword_3());
		}
		(
			(
				(
					lv_active_4_0='ACTIVE'
					{
						newLeafNode(lv_active_4_0, grammarAccess.getProcessStatusExpressionAccess().getActiveACTIVEKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProcessStatusExpressionRule());
						}
						setWithLastConsumed($current, "active", lv_active_4_0 != null, "ACTIVE");
					}
				)
			)
			    |
			(
				(
					lv_inactive_5_0='INACTIVE'
					{
						newLeafNode(lv_inactive_5_0, grammarAccess.getProcessStatusExpressionAccess().getInactiveINACTIVEKeyword_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProcessStatusExpressionRule());
						}
						setWithLastConsumed($current, "inactive", lv_inactive_5_0 != null, "INACTIVE");
					}
				)
			)
			    |
			(
				(
					lv_stop_6_0='STOP'
					{
						newLeafNode(lv_stop_6_0, grammarAccess.getProcessStatusExpressionAccess().getStopSTOPKeyword_4_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProcessStatusExpressionRule());
						}
						setWithLastConsumed($current, "stop", lv_stop_6_0 != null, "STOP");
					}
				)
			)
			    |
			(
				(
					lv_error_7_0='ERROR'
					{
						newLeafNode(lv_error_7_0, grammarAccess.getProcessStatusExpressionAccess().getErrorERRORKeyword_4_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProcessStatusExpressionRule());
						}
						setWithLastConsumed($current, "error", lv_error_7_0 != null, "ERROR");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleStartProcessStatement
entryRuleStartProcessStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartProcessStatementRule()); }
	iv_ruleStartProcessStatement=ruleStartProcessStatement
	{ $current=$iv_ruleStartProcessStatement.current; }
	EOF;

// Rule StartProcessStatement
ruleStartProcessStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStartProcessStatementAccess().getStartProcessStatementAction_0_0(),
						$current);
				}
			)
			(
				otherlv_1='START'
				{
					newLeafNode(otherlv_1, grammarAccess.getStartProcessStatementAccess().getSTARTKeyword_0_1_0());
				}
				otherlv_2='PROCESS'
				{
					newLeafNode(otherlv_2, grammarAccess.getStartProcessStatementAccess().getPROCESSKeyword_0_1_1());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getStartProcessStatementRule());
							}
						}
						otherlv_3=RULE_ID
						{
							newLeafNode(otherlv_3, grammarAccess.getStartProcessStatementAccess().getProcessVariableCrossReference_0_1_2_0());
						}
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getStartProcessStatementAccess().getStartProcessStatementAction_1_0(),
						$current);
				}
			)
			otherlv_5='RESTART'
			{
				newLeafNode(otherlv_5, grammarAccess.getStartProcessStatementAccess().getRESTARTKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleStopProcessStatement
entryRuleStopProcessStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStopProcessStatementRule()); }
	iv_ruleStopProcessStatement=ruleStopProcessStatement
	{ $current=$iv_ruleStopProcessStatement.current; }
	EOF;

// Rule StopProcessStatement
ruleStopProcessStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStopProcessStatementAccess().getStopProcessStatementAction_0(),
					$current);
			}
		)
		otherlv_1='STOP'
		{
			newLeafNode(otherlv_1, grammarAccess.getStopProcessStatementAccess().getSTOPKeyword_1());
		}
		(
			otherlv_2='PROCESS'
			{
				newLeafNode(otherlv_2, grammarAccess.getStopProcessStatementAccess().getPROCESSKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getStopProcessStatementRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getStopProcessStatementAccess().getProcessVariableCrossReference_2_1_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleErrorProcessStatement
entryRuleErrorProcessStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getErrorProcessStatementRule()); }
	iv_ruleErrorProcessStatement=ruleErrorProcessStatement
	{ $current=$iv_ruleErrorProcessStatement.current; }
	EOF;

// Rule ErrorProcessStatement
ruleErrorProcessStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getErrorProcessStatementAccess().getErrorProcessStatementAction_0(),
					$current);
			}
		)
		otherlv_1='ERROR'
		{
			newLeafNode(otherlv_1, grammarAccess.getErrorProcessStatementAccess().getERRORKeyword_1());
		}
		(
			otherlv_2='PROCESS'
			{
				newLeafNode(otherlv_2, grammarAccess.getErrorProcessStatementAccess().getPROCESSKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getErrorProcessStatementRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getErrorProcessStatementAccess().getProcessVariableCrossReference_2_1_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleTimeoutStatement
entryRuleTimeoutStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeoutStatementRule()); }
	iv_ruleTimeoutStatement=ruleTimeoutStatement
	{ $current=$iv_ruleTimeoutStatement.current; }
	EOF;

// Rule TimeoutStatement
ruleTimeoutStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TIMEOUT'
		{
			newLeafNode(otherlv_0, grammarAccess.getTimeoutStatementAccess().getTIMEOUTKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTimeoutStatementAccess().getConstConstantParserRuleCall_1_0_0());
					}
					lv_const_1_0=ruleConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTimeoutStatementRule());
						}
						set(
							$current,
							"const",
							lv_const_1_0,
							"su.nsk.iae.post.PoST.Constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTimeoutStatementRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getTimeoutStatementAccess().getVariableSymbolicVariableCrossReference_1_1_0());
					}
				)
			)
		)
		otherlv_3='THEN'
		{
			newLeafNode(otherlv_3, grammarAccess.getTimeoutStatementAccess().getTHENKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeoutStatementAccess().getStatementStatementListParserRuleCall_3_0());
				}
				lv_statement_4_0=ruleStatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeoutStatementRule());
					}
					set(
						$current,
						"statement",
						lv_statement_4_0,
						"su.nsk.iae.post.PoST.StatementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='END_TIMEOUT'
		{
			newLeafNode(otherlv_5, grammarAccess.getTimeoutStatementAccess().getEND_TIMEOUTKeyword_4());
		}
	)
;

// Entry rule entryRuleResetTimerStatement
entryRuleResetTimerStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResetTimerStatementRule()); }
	iv_ruleResetTimerStatement=ruleResetTimerStatement
	{ $current=$iv_ruleResetTimerStatement.current; }
	EOF;

// Rule ResetTimerStatement
ruleResetTimerStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getResetTimerStatementAccess().getResetTimerStatementAction_0(),
					$current);
			}
		)
		otherlv_1='RESET'
		{
			newLeafNode(otherlv_1, grammarAccess.getResetTimerStatementAccess().getRESETKeyword_1());
		}
		otherlv_2='TIMER'
		{
			newLeafNode(otherlv_2, grammarAccess.getResetTimerStatementAccess().getTIMERKeyword_2());
		}
	)
;

// Entry rule entryRuleFBInvocation
entryRuleFBInvocation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFBInvocationRule()); }
	iv_ruleFBInvocation=ruleFBInvocation
	{ $current=$iv_ruleFBInvocation.current; }
	EOF;

// Rule FBInvocation
ruleFBInvocation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFBInvocationRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getFBInvocationAccess().getFbSymbolicVariableCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFBInvocationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFBInvocationAccess().getArgsParamAssignmentElementsParserRuleCall_2_0());
				}
				lv_args_2_0=ruleParamAssignmentElements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFBInvocationRule());
					}
					set(
						$current,
						"args",
						lv_args_2_0,
						"su.nsk.iae.post.PoST.ParamAssignmentElements");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFBInvocationAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getFunctionCallAccess().getFunctionFunctionCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionCallAccess().getArgsParamAssignmentElementsParserRuleCall_2_0());
				}
				lv_args_2_0=ruleParamAssignmentElements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
					}
					set(
						$current,
						"args",
						lv_args_2_0,
						"su.nsk.iae.post.PoST.ParamAssignmentElements");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleParamAssignmentElements
entryRuleParamAssignmentElements returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamAssignmentElementsRule()); }
	iv_ruleParamAssignmentElements=ruleParamAssignmentElements
	{ $current=$iv_ruleParamAssignmentElements.current; }
	EOF;

// Rule ParamAssignmentElements
ruleParamAssignmentElements returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParamAssignmentElementsAccess().getElementsParamAssignmentParserRuleCall_0_0());
				}
				lv_elements_0_0=ruleParamAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParamAssignmentElementsRule());
					}
					add(
						$current,
						"elements",
						lv_elements_0_0,
						"su.nsk.iae.post.PoST.ParamAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getParamAssignmentElementsAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParamAssignmentElementsAccess().getElementsParamAssignmentParserRuleCall_1_1_0());
					}
					lv_elements_2_0=ruleParamAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParamAssignmentElementsRule());
						}
						add(
							$current,
							"elements",
							lv_elements_2_0,
							"su.nsk.iae.post.PoST.ParamAssignment");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleParamAssignment
entryRuleParamAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamAssignmentRule()); }
	iv_ruleParamAssignment=ruleParamAssignment
	{ $current=$iv_ruleParamAssignment.current; }
	EOF;

// Rule ParamAssignment
ruleParamAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParamAssignmentRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getParamAssignmentAccess().getVariableSymbolicVariableCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParamAssignmentAccess().getAssigAssignmentTypeEnumRuleCall_1_0());
				}
				lv_assig_1_0=ruleAssignmentType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParamAssignmentRule());
					}
					set(
						$current,
						"assig",
						lv_assig_1_0,
						"su.nsk.iae.post.PoST.AssignmentType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParamAssignmentAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParamAssignmentRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"su.nsk.iae.post.PoST.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getXorExpressionParserRuleCall_0());
		}
		this_XorExpression_0=ruleXorExpression
		{
			$current = $this_XorExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0(),
						$current);
				}
			)
			this_OR_OPERATOR_2=RULE_OR_OPERATOR
			{
				newLeafNode(this_OR_OPERATOR_2, grammarAccess.getExpressionAccess().getOR_OPERATORTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getRightXorExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleXorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.post.PoST.XorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXorExpression
entryRuleXorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXorExpressionRule()); }
	iv_ruleXorExpression=ruleXorExpression
	{ $current=$iv_ruleXorExpression.current; }
	EOF;

// Rule XorExpression
ruleXorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0(),
						$current);
				}
			)
			this_XOR_OPERATOR_2=RULE_XOR_OPERATOR
			{
				newLeafNode(this_XOR_OPERATOR_2, grammarAccess.getXorExpressionAccess().getXOR_OPERATORTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXorExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.post.PoST.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getCompExpressionParserRuleCall_0());
		}
		this_CompExpression_0=ruleCompExpression
		{
			$current = $this_CompExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
						$current);
				}
			)
			this_AND_OPERATOR_2=RULE_AND_OPERATOR
			{
				newLeafNode(this_AND_OPERATOR_2, grammarAccess.getAndExpressionAccess().getAND_OPERATORTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightCompExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleCompExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.post.PoST.CompExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCompExpression
entryRuleCompExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompExpressionRule()); }
	iv_ruleCompExpression=ruleCompExpression
	{ $current=$iv_ruleCompExpression.current; }
	EOF;

// Rule CompExpression
ruleCompExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompExpressionAccess().getEquExpressionParserRuleCall_0());
		}
		this_EquExpression_0=ruleEquExpression
		{
			$current = $this_EquExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getCompExpressionAccess().getCompExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompExpressionAccess().getCompOpCompOperatorEnumRuleCall_1_1_0());
					}
					lv_compOp_2_0=ruleCompOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompExpressionRule());
						}
						set(
							$current,
							"compOp",
							lv_compOp_2_0,
							"su.nsk.iae.post.PoST.CompOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompExpressionAccess().getRightEquExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleEquExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.post.PoST.EquExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEquExpression
entryRuleEquExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEquExpressionRule()); }
	iv_ruleEquExpression=ruleEquExpression
	{ $current=$iv_ruleEquExpression.current; }
	EOF;

// Rule EquExpression
ruleEquExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEquExpressionAccess().getAddExpressionParserRuleCall_0());
		}
		this_AddExpression_0=ruleAddExpression
		{
			$current = $this_AddExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEquExpressionAccess().getEquExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEquExpressionAccess().getEquOpEquOperatorEnumRuleCall_1_1_0());
					}
					lv_equOp_2_0=ruleEquOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEquExpressionRule());
						}
						set(
							$current,
							"equOp",
							lv_equOp_2_0,
							"su.nsk.iae.post.PoST.EquOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEquExpressionAccess().getRightAddExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAddExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEquExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.post.PoST.AddExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAddExpression
entryRuleAddExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddExpressionRule()); }
	iv_ruleAddExpression=ruleAddExpression
	{ $current=$iv_ruleAddExpression.current; }
	EOF;

// Rule AddExpression
ruleAddExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAddExpressionAccess().getMulExpressionParserRuleCall_0());
		}
		this_MulExpression_0=ruleMulExpression
		{
			$current = $this_MulExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAddExpressionAccess().getAddExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAddExpressionAccess().getAddOpAddOperatorEnumRuleCall_1_1_0());
					}
					lv_addOp_2_0=ruleAddOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddExpressionRule());
						}
						set(
							$current,
							"addOp",
							lv_addOp_2_0,
							"su.nsk.iae.post.PoST.AddOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAddExpressionAccess().getRightMulExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMulExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.post.PoST.MulExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMulExpression
entryRuleMulExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulExpressionRule()); }
	iv_ruleMulExpression=ruleMulExpression
	{ $current=$iv_ruleMulExpression.current; }
	EOF;

// Rule MulExpression
ruleMulExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMulExpressionAccess().getPowerExpressionParserRuleCall_0());
		}
		this_PowerExpression_0=rulePowerExpression
		{
			$current = $this_PowerExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMulExpressionAccess().getMulExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulExpressionAccess().getMulOpMulOperatorEnumRuleCall_1_1_0());
					}
					lv_mulOp_2_0=ruleMulOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulExpressionRule());
						}
						set(
							$current,
							"mulOp",
							lv_mulOp_2_0,
							"su.nsk.iae.post.PoST.MulOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulExpressionAccess().getRightPowerExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePowerExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.post.PoST.PowerExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePowerExpression
entryRulePowerExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPowerExpressionRule()); }
	iv_rulePowerExpression=rulePowerExpression
	{ $current=$iv_rulePowerExpression.current; }
	EOF;

// Rule PowerExpression
rulePowerExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPowerExpressionAccess().getUnaryExpressionParserRuleCall_0());
		}
		this_UnaryExpression_0=ruleUnaryExpression
		{
			$current = $this_UnaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPowerExpressionAccess().getPowerExpressionLeftAction_1_0(),
						$current);
				}
			)
			this_POWER_OPERATOR_2=RULE_POWER_OPERATOR
			{
				newLeafNode(this_POWER_OPERATOR_2, grammarAccess.getPowerExpressionAccess().getPOWER_OPERATORTerminalRuleCall_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPowerExpressionAccess().getRightUnaryExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleUnaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPowerExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"su.nsk.iae.post.PoST.UnaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	iv_ruleUnaryExpression=ruleUnaryExpression
	{ $current=$iv_ruleUnaryExpression.current; }
	EOF;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_0());
		}
		this_PrimaryExpression_0=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getUnOpUnaryOperatorEnumRuleCall_1_0_0());
					}
					lv_unOp_1_0=ruleUnaryOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
						}
						set(
							$current,
							"unOp",
							lv_unOp_1_0,
							"su.nsk.iae.post.PoST.UnaryOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_1_0());
					}
					lv_right_2_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_2_0,
							"su.nsk.iae.post.PoST.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConstConstantParserRuleCall_0_0());
				}
				lv_const_0_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
					}
					set(
						$current,
						"const",
						lv_const_0_0,
						"su.nsk.iae.post.PoST.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimaryExpressionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getPrimaryExpressionAccess().getVariableSymbolicVariableCrossReference_1_0());
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getArrayArrayVariableParserRuleCall_2_0());
				}
				lv_array_2_0=ruleArrayVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
					}
					set(
						$current,
						"array",
						lv_array_2_0,
						"su.nsk.iae.post.PoST.ArrayVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getProcStatusProcessStatusExpressionParserRuleCall_3_0());
				}
				lv_procStatus_3_0=ruleProcessStatusExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
					}
					set(
						$current,
						"procStatus",
						lv_procStatus_3_0,
						"su.nsk.iae.post.PoST.ProcessStatusExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunCallFunctionCallParserRuleCall_4_0());
				}
				lv_funCall_4_0=ruleFunctionCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
					}
					set(
						$current,
						"funCall",
						lv_funCall_4_0,
						"su.nsk.iae.post.PoST.FunctionCall");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_5='('
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getNestExprExpressionParserRuleCall_5_1_0());
					}
					lv_nestExpr_6_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
						}
						set(
							$current,
							"nestExpr",
							lv_nestExpr_6_0,
							"su.nsk.iae.post.PoST.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_5_2());
			}
		)
	)
;

// Entry rule entryRuleStatementList
entryRuleStatementList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementListRule()); }
	iv_ruleStatementList=ruleStatementList
	{ $current=$iv_ruleStatementList.current; }
	EOF;

// Rule StatementList
ruleStatementList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStatementListAccess().getStatementListAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementListAccess().getStatementsStatementParserRuleCall_1_0());
				}
				lv_statements_1_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementListRule());
					}
					add(
						$current,
						"statements",
						lv_statements_1_0,
						"su.nsk.iae.post.PoST.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getAssignmentStatementParserRuleCall_0_0());
			}
			this_AssignmentStatement_0=ruleAssignmentStatement
			{
				$current = $this_AssignmentStatement_0.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getSemicolonKeyword_0_1());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSelectionStatementParserRuleCall_1());
		}
		this_SelectionStatement_2=ruleSelectionStatement
		{
			$current = $this_SelectionStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIterationStatementParserRuleCall_2());
		}
		this_IterationStatement_3=ruleIterationStatement
		{
			$current = $this_IterationStatement_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getFBInvocationParserRuleCall_3_0());
			}
			this_FBInvocation_4=ruleFBInvocation
			{
				$current = $this_FBInvocation_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=';'
			{
				newLeafNode(otherlv_5, grammarAccess.getStatementAccess().getSemicolonKeyword_3_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getSubprogramControlStatementParserRuleCall_4_0());
			}
			this_SubprogramControlStatement_6=ruleSubprogramControlStatement
			{
				$current = $this_SubprogramControlStatement_6.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_7=';'
			{
				newLeafNode(otherlv_7, grammarAccess.getStatementAccess().getSemicolonKeyword_4_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getExitStatementParserRuleCall_5_0());
			}
			this_ExitStatement_8=ruleExitStatement
			{
				$current = $this_ExitStatement_8.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getStatementAccess().getSemicolonKeyword_5_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getProcessStatementsParserRuleCall_6_0());
			}
			this_ProcessStatements_10=ruleProcessStatements
			{
				$current = $this_ProcessStatements_10.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_11=';'
			{
				newLeafNode(otherlv_11, grammarAccess.getStatementAccess().getSemicolonKeyword_6_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getSetStateStatementParserRuleCall_7_0());
			}
			this_SetStateStatement_12=ruleSetStateStatement
			{
				$current = $this_SetStateStatement_12.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_13=';'
			{
				newLeafNode(otherlv_13, grammarAccess.getStatementAccess().getSemicolonKeyword_7_1());
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getResetTimerStatementParserRuleCall_8_0());
			}
			this_ResetTimerStatement_14=ruleResetTimerStatement
			{
				$current = $this_ResetTimerStatement_14.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_15=';'
			{
				newLeafNode(otherlv_15, grammarAccess.getStatementAccess().getSemicolonKeyword_8_1());
			}
		)
	)
;

// Entry rule entryRuleAssignmentStatement
entryRuleAssignmentStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentStatementRule()); }
	iv_ruleAssignmentStatement=ruleAssignmentStatement
	{ $current=$iv_ruleAssignmentStatement.current; }
	EOF;

// Rule AssignmentStatement
ruleAssignmentStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAssignmentStatementRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getAssignmentStatementAccess().getVariableSymbolicVariableCrossReference_0_0_0());
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentStatementAccess().getArrayArrayVariableParserRuleCall_0_1_0());
					}
					lv_array_1_0=ruleArrayVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentStatementRule());
						}
						set(
							$current,
							"array",
							lv_array_1_0,
							"su.nsk.iae.post.PoST.ArrayVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_2=':='
		{
			newLeafNode(otherlv_2, grammarAccess.getAssignmentStatementAccess().getColonEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentStatementAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentStatementRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"su.nsk.iae.post.PoST.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSelectionStatement
entryRuleSelectionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectionStatementRule()); }
	iv_ruleSelectionStatement=ruleSelectionStatement
	{ $current=$iv_ruleSelectionStatement.current; }
	EOF;

// Rule SelectionStatement
ruleSelectionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSelectionStatementAccess().getIfStatementParserRuleCall_0());
		}
		this_IfStatement_0=ruleIfStatement
		{
			$current = $this_IfStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSelectionStatementAccess().getCaseStatementParserRuleCall_1());
		}
		this_CaseStatement_1=ruleCaseStatement
		{
			$current = $this_CaseStatement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='IF'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIFKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getMainCondExpressionParserRuleCall_1_0());
				}
				lv_mainCond_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"mainCond",
						lv_mainCond_1_0,
						"su.nsk.iae.post.PoST.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='THEN'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfStatementAccess().getTHENKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getMainStatementStatementListParserRuleCall_3_0());
				}
				lv_mainStatement_3_0=ruleStatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"mainStatement",
						lv_mainStatement_3_0,
						"su.nsk.iae.post.PoST.StatementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='ELSIF'
			{
				newLeafNode(otherlv_4, grammarAccess.getIfStatementAccess().getELSIFKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getElseIfCondExpressionParserRuleCall_4_1_0());
					}
					lv_elseIfCond_5_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						add(
							$current,
							"elseIfCond",
							lv_elseIfCond_5_0,
							"su.nsk.iae.post.PoST.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6='THEN'
			{
				newLeafNode(otherlv_6, grammarAccess.getIfStatementAccess().getTHENKeyword_4_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getElseIfStatementsStatementListParserRuleCall_4_3_0());
					}
					lv_elseIfStatements_7_0=ruleStatementList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						add(
							$current,
							"elseIfStatements",
							lv_elseIfStatements_7_0,
							"su.nsk.iae.post.PoST.StatementList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_8='ELSE'
			{
				newLeafNode(otherlv_8, grammarAccess.getIfStatementAccess().getELSEKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getElseStatementStatementListParserRuleCall_5_1_0());
					}
					lv_elseStatement_9_0=ruleStatementList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						set(
							$current,
							"elseStatement",
							lv_elseStatement_9_0,
							"su.nsk.iae.post.PoST.StatementList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_10='END_IF'
		{
			newLeafNode(otherlv_10, grammarAccess.getIfStatementAccess().getEND_IFKeyword_6());
		}
	)
;

// Entry rule entryRuleCaseStatement
entryRuleCaseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseStatementRule()); }
	iv_ruleCaseStatement=ruleCaseStatement
	{ $current=$iv_ruleCaseStatement.current; }
	EOF;

// Rule CaseStatement
ruleCaseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CASE'
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseStatementAccess().getCASEKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStatementAccess().getCondExpressionParserRuleCall_1_0());
				}
				lv_cond_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
					}
					set(
						$current,
						"cond",
						lv_cond_1_0,
						"su.nsk.iae.post.PoST.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='OF'
		{
			newLeafNode(otherlv_2, grammarAccess.getCaseStatementAccess().getOFKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseStatementAccess().getCaseElementsCaseElementParserRuleCall_3_0());
				}
				lv_caseElements_3_0=ruleCaseElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
					}
					add(
						$current,
						"caseElements",
						lv_caseElements_3_0,
						"su.nsk.iae.post.PoST.CaseElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_4='ELSE'
			{
				newLeafNode(otherlv_4, grammarAccess.getCaseStatementAccess().getELSEKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseStatementAccess().getElseStatementStatementListParserRuleCall_4_1_0());
					}
					lv_elseStatement_5_0=ruleStatementList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseStatementRule());
						}
						set(
							$current,
							"elseStatement",
							lv_elseStatement_5_0,
							"su.nsk.iae.post.PoST.StatementList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='END_CASE'
		{
			newLeafNode(otherlv_6, grammarAccess.getCaseStatementAccess().getEND_CASEKeyword_5());
		}
	)
;

// Entry rule entryRuleCaseElement
entryRuleCaseElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseElementRule()); }
	iv_ruleCaseElement=ruleCaseElement
	{ $current=$iv_ruleCaseElement.current; }
	EOF;

// Rule CaseElement
ruleCaseElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseElementAccess().getCaseListCaseListParserRuleCall_0_0());
				}
				lv_caseList_0_0=ruleCaseList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseElementRule());
					}
					set(
						$current,
						"caseList",
						lv_caseList_0_0,
						"su.nsk.iae.post.PoST.CaseList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getCaseElementAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseElementAccess().getStatementStatementListParserRuleCall_2_0());
				}
				lv_statement_2_0=ruleStatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseElementRule());
					}
					set(
						$current,
						"statement",
						lv_statement_2_0,
						"su.nsk.iae.post.PoST.StatementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCaseList
entryRuleCaseList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseListRule()); }
	iv_ruleCaseList=ruleCaseList
	{ $current=$iv_ruleCaseList.current; }
	EOF;

// Rule CaseList
ruleCaseList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseListAccess().getCaseListElementCaseListElementParserRuleCall_0_0());
				}
				lv_caseListElement_0_0=ruleCaseListElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseListRule());
					}
					add(
						$current,
						"caseListElement",
						lv_caseListElement_0_0,
						"su.nsk.iae.post.PoST.CaseListElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getCaseListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseListAccess().getCaseListElementCaseListElementParserRuleCall_1_1_0());
					}
					lv_caseListElement_2_0=ruleCaseListElement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseListRule());
						}
						add(
							$current,
							"caseListElement",
							lv_caseListElement_2_0,
							"su.nsk.iae.post.PoST.CaseListElement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCaseListElement
entryRuleCaseListElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseListElementRule()); }
	iv_ruleCaseListElement=ruleCaseListElement
	{ $current=$iv_ruleCaseListElement.current; }
	EOF;

// Rule CaseListElement
ruleCaseListElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseListElementAccess().getNumSignedIntegerParserRuleCall_0_0());
				}
				lv_num_0_0=ruleSignedInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseListElementRule());
					}
					set(
						$current,
						"num",
						lv_num_0_0,
						"su.nsk.iae.post.PoST.SignedInteger");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCaseListElementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getCaseListElementAccess().getVariableSymbolicVariableCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleIterationStatement
entryRuleIterationStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIterationStatementRule()); }
	iv_ruleIterationStatement=ruleIterationStatement
	{ $current=$iv_ruleIterationStatement.current; }
	EOF;

// Rule IterationStatement
ruleIterationStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_0());
		}
		this_ForStatement_0=ruleForStatement
		{
			$current = $this_ForStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1());
		}
		this_WhileStatement_1=ruleWhileStatement
		{
			$current = $this_WhileStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIterationStatementAccess().getRepeatStatementParserRuleCall_2());
		}
		this_RepeatStatement_2=ruleRepeatStatement
		{
			$current = $this_RepeatStatement_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	iv_ruleForStatement=ruleForStatement
	{ $current=$iv_ruleForStatement.current; }
	EOF;

// Rule ForStatement
ruleForStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='FOR'
		{
			newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getFORKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getVariableSymbolicVariableCrossReference_1_0());
				}
			)
		)
		otherlv_2=':='
		{
			newLeafNode(otherlv_2, grammarAccess.getForStatementAccess().getColonEqualsSignKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getForListForListParserRuleCall_3_0());
				}
				lv_forList_3_0=ruleForList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"forList",
						lv_forList_3_0,
						"su.nsk.iae.post.PoST.ForList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='DO'
		{
			newLeafNode(otherlv_4, grammarAccess.getForStatementAccess().getDOKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getStatementStatementListParserRuleCall_5_0());
				}
				lv_statement_5_0=ruleStatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"statement",
						lv_statement_5_0,
						"su.nsk.iae.post.PoST.StatementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='END_FOR'
		{
			newLeafNode(otherlv_6, grammarAccess.getForStatementAccess().getEND_FORKeyword_6());
		}
	)
;

// Entry rule entryRuleForList
entryRuleForList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForListRule()); }
	iv_ruleForList=ruleForList
	{ $current=$iv_ruleForList.current; }
	EOF;

// Rule ForList
ruleForList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getForListAccess().getStartExpressionParserRuleCall_0_0());
				}
				lv_start_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForListRule());
					}
					set(
						$current,
						"start",
						lv_start_0_0,
						"su.nsk.iae.post.PoST.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='TO'
		{
			newLeafNode(otherlv_1, grammarAccess.getForListAccess().getTOKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForListAccess().getEndExpressionParserRuleCall_2_0());
				}
				lv_end_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForListRule());
					}
					set(
						$current,
						"end",
						lv_end_2_0,
						"su.nsk.iae.post.PoST.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='BY'
			{
				newLeafNode(otherlv_3, grammarAccess.getForListAccess().getBYKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getForListAccess().getStepExpressionParserRuleCall_3_1_0());
					}
					lv_step_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForListRule());
						}
						set(
							$current,
							"step",
							lv_step_4_0,
							"su.nsk.iae.post.PoST.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	iv_ruleWhileStatement=ruleWhileStatement
	{ $current=$iv_ruleWhileStatement.current; }
	EOF;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='WHILE'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWHILEKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getCondExpressionParserRuleCall_1_0());
				}
				lv_cond_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"cond",
						lv_cond_1_0,
						"su.nsk.iae.post.PoST.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='DO'
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileStatementAccess().getDOKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getStatementStatementListParserRuleCall_3_0());
				}
				lv_statement_3_0=ruleStatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"statement",
						lv_statement_3_0,
						"su.nsk.iae.post.PoST.StatementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='END_WHILE'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileStatementAccess().getEND_WHILEKeyword_4());
		}
	)
;

// Entry rule entryRuleRepeatStatement
entryRuleRepeatStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeatStatementRule()); }
	iv_ruleRepeatStatement=ruleRepeatStatement
	{ $current=$iv_ruleRepeatStatement.current; }
	EOF;

// Rule RepeatStatement
ruleRepeatStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='REPEAT'
		{
			newLeafNode(otherlv_0, grammarAccess.getRepeatStatementAccess().getREPEATKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatStatementAccess().getStatementStatementListParserRuleCall_1_0());
				}
				lv_statement_1_0=ruleStatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatStatementRule());
					}
					set(
						$current,
						"statement",
						lv_statement_1_0,
						"su.nsk.iae.post.PoST.StatementList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='UNTIL'
		{
			newLeafNode(otherlv_2, grammarAccess.getRepeatStatementAccess().getUNTILKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatStatementAccess().getCondExpressionParserRuleCall_3_0());
				}
				lv_cond_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatStatementRule());
					}
					set(
						$current,
						"cond",
						lv_cond_3_0,
						"su.nsk.iae.post.PoST.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='END_REPEAT'
		{
			newLeafNode(otherlv_4, grammarAccess.getRepeatStatementAccess().getEND_REPEATKeyword_4());
		}
	)
;

// Entry rule entryRuleSubprogramControlStatement
entryRuleSubprogramControlStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubprogramControlStatementRule()); }
	iv_ruleSubprogramControlStatement=ruleSubprogramControlStatement
	{ $current=$iv_ruleSubprogramControlStatement.current; }
	EOF;

// Rule SubprogramControlStatement
ruleSubprogramControlStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSubprogramControlStatementAccess().getSubprogramControlStatementAction_0(),
					$current);
			}
		)
		otherlv_1='RETURN'
		{
			newLeafNode(otherlv_1, grammarAccess.getSubprogramControlStatementAccess().getRETURNKeyword_1());
		}
	)
;

// Entry rule entryRuleExitStatement
entryRuleExitStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExitStatementRule()); }
	iv_ruleExitStatement=ruleExitStatement
	{ $current=$iv_ruleExitStatement.current; }
	EOF;

// Rule ExitStatement
ruleExitStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExitStatementAccess().getExitStatementAction_0(),
					$current);
			}
		)
		otherlv_1='EXIT'
		{
			newLeafNode(otherlv_1, grammarAccess.getExitStatementAccess().getEXITKeyword_1());
		}
	)
;

// Entry rule entryRuleSymbolicVariable
entryRuleSymbolicVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSymbolicVariableRule()); }
	iv_ruleSymbolicVariable=ruleSymbolicVariable
	{ $current=$iv_ruleSymbolicVariable.current; }
	EOF;

// Rule SymbolicVariable
ruleSymbolicVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getSymbolicVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSymbolicVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"su.nsk.iae.post.PoST.ID");
			}
		)
	)
;

// Entry rule entryRuleSimpleSpecificationInit
entryRuleSimpleSpecificationInit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleSpecificationInitRule()); }
	iv_ruleSimpleSpecificationInit=ruleSimpleSpecificationInit
	{ $current=$iv_ruleSimpleSpecificationInit.current; }
	EOF;

// Rule SimpleSpecificationInit
ruleSimpleSpecificationInit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSimpleSpecificationInitAccess().getSimpleSpecificationInitAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleSpecificationInitAccess().getTypeDataTypeNameParserRuleCall_1_0());
				}
				lv_type_1_0=ruleDataTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleSpecificationInitRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"su.nsk.iae.post.PoST.DataTypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=':='
			{
				newLeafNode(otherlv_2, grammarAccess.getSimpleSpecificationInitAccess().getColonEqualsSignKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleSpecificationInitAccess().getValueExpressionParserRuleCall_2_1_0());
					}
					lv_value_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleSpecificationInitRule());
						}
						set(
							$current,
							"value",
							lv_value_3_0,
							"su.nsk.iae.post.PoST.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVarList
entryRuleVarList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarListRule()); }
	iv_ruleVarList=ruleVarList
	{ $current=$iv_ruleVarList.current; }
	EOF;

// Rule VarList
ruleVarList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarListAccess().getVarsSymbolicVariableParserRuleCall_0_0());
				}
				lv_vars_0_0=ruleSymbolicVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarListRule());
					}
					add(
						$current,
						"vars",
						lv_vars_0_0,
						"su.nsk.iae.post.PoST.SymbolicVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getVarListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarListAccess().getVarsSymbolicVariableParserRuleCall_1_1_0());
					}
					lv_vars_2_0=ruleSymbolicVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarListRule());
						}
						add(
							$current,
							"vars",
							lv_vars_2_0,
							"su.nsk.iae.post.PoST.SymbolicVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleVarInitDeclaration
entryRuleVarInitDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarInitDeclarationRule()); }
	iv_ruleVarInitDeclaration=ruleVarInitDeclaration
	{ $current=$iv_ruleVarInitDeclaration.current; }
	EOF;

// Rule VarInitDeclaration
ruleVarInitDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarInitDeclarationAccess().getVarListVarListParserRuleCall_0_0());
				}
				lv_varList_0_0=ruleVarList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarInitDeclarationRule());
					}
					set(
						$current,
						"varList",
						lv_varList_0_0,
						"su.nsk.iae.post.PoST.VarList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVarInitDeclarationAccess().getColonKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVarInitDeclarationAccess().getSpecSimpleSpecificationInitParserRuleCall_2_0_0());
					}
					lv_spec_2_0=ruleSimpleSpecificationInit
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarInitDeclarationRule());
						}
						set(
							$current,
							"spec",
							lv_spec_2_0,
							"su.nsk.iae.post.PoST.SimpleSpecificationInit");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getVarInitDeclarationAccess().getArrSpecArraySpecificationInitParserRuleCall_2_1_0());
					}
					lv_arrSpec_3_0=ruleArraySpecificationInit
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarInitDeclarationRule());
						}
						set(
							$current,
							"arrSpec",
							lv_arrSpec_3_0,
							"su.nsk.iae.post.PoST.ArraySpecificationInit");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarInitDeclarationRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getVarInitDeclarationAccess().getFbFunctionBlockCrossReference_2_2_0());
					}
				)
			)
		)
	)
;

// Entry rule entryRuleInputVarDeclaration
entryRuleInputVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputVarDeclarationRule()); }
	iv_ruleInputVarDeclaration=ruleInputVarDeclaration
	{ $current=$iv_ruleInputVarDeclaration.current; }
	EOF;

// Rule InputVarDeclaration
ruleInputVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInputVarDeclarationAccess().getInputVarDeclarationAction_0(),
					$current);
			}
		)
		otherlv_1='VAR_INPUT'
		{
			newLeafNode(otherlv_1, grammarAccess.getInputVarDeclarationAccess().getVAR_INPUTKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getInputVarDeclarationAccess().getVarsVarInitDeclarationParserRuleCall_2_0_0());
					}
					lv_vars_2_0=ruleVarInitDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInputVarDeclarationRule());
						}
						add(
							$current,
							"vars",
							lv_vars_2_0,
							"su.nsk.iae.post.PoST.VarInitDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getInputVarDeclarationAccess().getSemicolonKeyword_2_1());
			}
		)*
		otherlv_4='END_VAR'
		{
			newLeafNode(otherlv_4, grammarAccess.getInputVarDeclarationAccess().getEND_VARKeyword_3());
		}
	)
;

// Entry rule entryRuleOutputVarDeclaration
entryRuleOutputVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputVarDeclarationRule()); }
	iv_ruleOutputVarDeclaration=ruleOutputVarDeclaration
	{ $current=$iv_ruleOutputVarDeclaration.current; }
	EOF;

// Rule OutputVarDeclaration
ruleOutputVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOutputVarDeclarationAccess().getOutputVarDeclarationAction_0(),
					$current);
			}
		)
		otherlv_1='VAR_OUTPUT'
		{
			newLeafNode(otherlv_1, grammarAccess.getOutputVarDeclarationAccess().getVAR_OUTPUTKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOutputVarDeclarationAccess().getVarsVarInitDeclarationParserRuleCall_2_0_0());
					}
					lv_vars_2_0=ruleVarInitDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOutputVarDeclarationRule());
						}
						add(
							$current,
							"vars",
							lv_vars_2_0,
							"su.nsk.iae.post.PoST.VarInitDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getOutputVarDeclarationAccess().getSemicolonKeyword_2_1());
			}
		)*
		otherlv_4='END_VAR'
		{
			newLeafNode(otherlv_4, grammarAccess.getOutputVarDeclarationAccess().getEND_VARKeyword_3());
		}
	)
;

// Entry rule entryRuleInputOutputVarDeclaration
entryRuleInputOutputVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputOutputVarDeclarationRule()); }
	iv_ruleInputOutputVarDeclaration=ruleInputOutputVarDeclaration
	{ $current=$iv_ruleInputOutputVarDeclaration.current; }
	EOF;

// Rule InputOutputVarDeclaration
ruleInputOutputVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInputOutputVarDeclarationAccess().getInputOutputVarDeclarationAction_0(),
					$current);
			}
		)
		otherlv_1='VAR_IN_OUT'
		{
			newLeafNode(otherlv_1, grammarAccess.getInputOutputVarDeclarationAccess().getVAR_IN_OUTKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getInputOutputVarDeclarationAccess().getVarsVarInitDeclarationParserRuleCall_2_0_0());
					}
					lv_vars_2_0=ruleVarInitDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInputOutputVarDeclarationRule());
						}
						add(
							$current,
							"vars",
							lv_vars_2_0,
							"su.nsk.iae.post.PoST.VarInitDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getInputOutputVarDeclarationAccess().getSemicolonKeyword_2_1());
			}
		)*
		otherlv_4='END_VAR'
		{
			newLeafNode(otherlv_4, grammarAccess.getInputOutputVarDeclarationAccess().getEND_VARKeyword_3());
		}
	)
;

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	iv_ruleVarDeclaration=ruleVarDeclaration
	{ $current=$iv_ruleVarDeclaration.current; }
	EOF;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVarDeclarationAccess().getVarDeclarationAction_0(),
					$current);
			}
		)
		otherlv_1='VAR'
		{
			newLeafNode(otherlv_1, grammarAccess.getVarDeclarationAccess().getVARKeyword_1());
		}
		(
			(
				lv_const_2_0='CONSTANT'
				{
					newLeafNode(lv_const_2_0, grammarAccess.getVarDeclarationAccess().getConstCONSTANTKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarDeclarationRule());
					}
					setWithLastConsumed($current, "const", lv_const_2_0 != null, "CONSTANT");
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVarDeclarationAccess().getVarsVarInitDeclarationParserRuleCall_3_0_0());
					}
					lv_vars_3_0=ruleVarInitDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
						}
						add(
							$current,
							"vars",
							lv_vars_3_0,
							"su.nsk.iae.post.PoST.VarInitDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getVarDeclarationAccess().getSemicolonKeyword_3_1());
			}
		)*
		otherlv_5='END_VAR'
		{
			newLeafNode(otherlv_5, grammarAccess.getVarDeclarationAccess().getEND_VARKeyword_4());
		}
	)
;

// Entry rule entryRuleTempVarDeclaration
entryRuleTempVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTempVarDeclarationRule()); }
	iv_ruleTempVarDeclaration=ruleTempVarDeclaration
	{ $current=$iv_ruleTempVarDeclaration.current; }
	EOF;

// Rule TempVarDeclaration
ruleTempVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTempVarDeclarationAccess().getTempVarDeclarationAction_0(),
					$current);
			}
		)
		otherlv_1='VAR_TEMP'
		{
			newLeafNode(otherlv_1, grammarAccess.getTempVarDeclarationAccess().getVAR_TEMPKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTempVarDeclarationAccess().getVarsVarInitDeclarationParserRuleCall_2_0_0());
					}
					lv_vars_2_0=ruleVarInitDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTempVarDeclarationRule());
						}
						add(
							$current,
							"vars",
							lv_vars_2_0,
							"su.nsk.iae.post.PoST.VarInitDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getTempVarDeclarationAccess().getSemicolonKeyword_2_1());
			}
		)*
		otherlv_4='END_VAR'
		{
			newLeafNode(otherlv_4, grammarAccess.getTempVarDeclarationAccess().getEND_VARKeyword_3());
		}
	)
;

// Entry rule entryRuleExternalVarInitDeclaration
entryRuleExternalVarInitDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalVarInitDeclarationRule()); }
	iv_ruleExternalVarInitDeclaration=ruleExternalVarInitDeclaration
	{ $current=$iv_ruleExternalVarInitDeclaration.current; }
	EOF;

// Rule ExternalVarInitDeclaration
ruleExternalVarInitDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExternalVarInitDeclarationAccess().getVarListVarListParserRuleCall_0_0());
				}
				lv_varList_0_0=ruleVarList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternalVarInitDeclarationRule());
					}
					set(
						$current,
						"varList",
						lv_varList_0_0,
						"su.nsk.iae.post.PoST.VarList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getExternalVarInitDeclarationAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExternalVarInitDeclarationAccess().getTypeDataTypeNameParserRuleCall_2_0());
				}
				lv_type_2_0=ruleDataTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternalVarInitDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"su.nsk.iae.post.PoST.DataTypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExternalVarDeclaration
entryRuleExternalVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalVarDeclarationRule()); }
	iv_ruleExternalVarDeclaration=ruleExternalVarDeclaration
	{ $current=$iv_ruleExternalVarDeclaration.current; }
	EOF;

// Rule ExternalVarDeclaration
ruleExternalVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExternalVarDeclarationAccess().getExternalVarDeclarationAction_0(),
					$current);
			}
		)
		otherlv_1='VAR_EXTERNAL'
		{
			newLeafNode(otherlv_1, grammarAccess.getExternalVarDeclarationAccess().getVAR_EXTERNALKeyword_1());
		}
		(
			(
				lv_const_2_0='CONSTANT'
				{
					newLeafNode(lv_const_2_0, grammarAccess.getExternalVarDeclarationAccess().getConstCONSTANTKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalVarDeclarationRule());
					}
					setWithLastConsumed($current, "const", lv_const_2_0 != null, "CONSTANT");
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExternalVarDeclarationAccess().getVarsExternalVarInitDeclarationParserRuleCall_3_0_0());
					}
					lv_vars_3_0=ruleExternalVarInitDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExternalVarDeclarationRule());
						}
						add(
							$current,
							"vars",
							lv_vars_3_0,
							"su.nsk.iae.post.PoST.ExternalVarInitDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getExternalVarDeclarationAccess().getSemicolonKeyword_3_1());
			}
		)*
		otherlv_5='END_VAR'
		{
			newLeafNode(otherlv_5, grammarAccess.getExternalVarDeclarationAccess().getEND_VARKeyword_4());
		}
	)
;

// Entry rule entryRuleGlobalVarInitDeclaration
entryRuleGlobalVarInitDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGlobalVarInitDeclarationRule()); }
	iv_ruleGlobalVarInitDeclaration=ruleGlobalVarInitDeclaration
	{ $current=$iv_ruleGlobalVarInitDeclaration.current; }
	EOF;

// Rule GlobalVarInitDeclaration
ruleGlobalVarInitDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getGlobalVarInitDeclarationAccess().getVarListVarListParserRuleCall_0_0());
				}
				lv_varList_0_0=ruleVarList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGlobalVarInitDeclarationRule());
					}
					set(
						$current,
						"varList",
						lv_varList_0_0,
						"su.nsk.iae.post.PoST.VarList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='AT'
		{
			newLeafNode(otherlv_1, grammarAccess.getGlobalVarInitDeclarationAccess().getATKeyword_1());
		}
		(
			(
				lv_location_2_0=RULE_DIRECT_VARIABLE
				{
					newLeafNode(lv_location_2_0, grammarAccess.getGlobalVarInitDeclarationAccess().getLocationDIRECT_VARIABLETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGlobalVarInitDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"location",
						lv_location_2_0,
						"su.nsk.iae.post.PoST.DIRECT_VARIABLE");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getGlobalVarInitDeclarationAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGlobalVarInitDeclarationAccess().getTypeDataTypeNameParserRuleCall_4_0());
				}
				lv_type_4_0=ruleDataTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGlobalVarInitDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_4_0,
						"su.nsk.iae.post.PoST.DataTypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGlobalVarDeclaration
entryRuleGlobalVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGlobalVarDeclarationRule()); }
	iv_ruleGlobalVarDeclaration=ruleGlobalVarDeclaration
	{ $current=$iv_ruleGlobalVarDeclaration.current; }
	EOF;

// Rule GlobalVarDeclaration
ruleGlobalVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGlobalVarDeclarationAccess().getGlobalVarDeclarationAction_0(),
					$current);
			}
		)
		otherlv_1='VAR_GLOBAL'
		{
			newLeafNode(otherlv_1, grammarAccess.getGlobalVarDeclarationAccess().getVAR_GLOBALKeyword_1());
		}
		(
			(
				lv_const_2_0='CONSTANT'
				{
					newLeafNode(lv_const_2_0, grammarAccess.getGlobalVarDeclarationAccess().getConstCONSTANTKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGlobalVarDeclarationRule());
					}
					setWithLastConsumed($current, "const", lv_const_2_0 != null, "CONSTANT");
				}
			)
		)?
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getGlobalVarDeclarationAccess().getVarsSimpleVarInitDeclarationParserRuleCall_3_0_0_0());
						}
						lv_varsSimple_3_0=ruleVarInitDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getGlobalVarDeclarationRule());
							}
							add(
								$current,
								"varsSimple",
								lv_varsSimple_3_0,
								"su.nsk.iae.post.PoST.VarInitDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_4=';'
				{
					newLeafNode(otherlv_4, grammarAccess.getGlobalVarDeclarationAccess().getSemicolonKeyword_3_0_1());
				}
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getGlobalVarDeclarationAccess().getVarsAsGlobalVarInitDeclarationParserRuleCall_3_1_0_0());
						}
						lv_varsAs_5_0=ruleGlobalVarInitDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getGlobalVarDeclarationRule());
							}
							add(
								$current,
								"varsAs",
								lv_varsAs_5_0,
								"su.nsk.iae.post.PoST.GlobalVarInitDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_6=';'
				{
					newLeafNode(otherlv_6, grammarAccess.getGlobalVarDeclarationAccess().getSemicolonKeyword_3_1_1());
				}
			)
		)*
		otherlv_7='END_VAR'
		{
			newLeafNode(otherlv_7, grammarAccess.getGlobalVarDeclarationAccess().getEND_VARKeyword_4());
		}
	)
;

// Entry rule entryRuleProcessVariable
entryRuleProcessVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessVariableRule()); }
	iv_ruleProcessVariable=ruleProcessVariable
	{ $current=$iv_ruleProcessVariable.current; }
	EOF;

// Rule ProcessVariable
ruleProcessVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getProcessVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getProcessVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"su.nsk.iae.post.PoST.ID");
			}
		)
	)
;

// Entry rule entryRuleProcessVarList
entryRuleProcessVarList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessVarListRule()); }
	iv_ruleProcessVarList=ruleProcessVarList
	{ $current=$iv_ruleProcessVarList.current; }
	EOF;

// Rule ProcessVarList
ruleProcessVarList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessVarListAccess().getVarsProcessVariableParserRuleCall_0_0());
				}
				lv_vars_0_0=ruleProcessVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessVarListRule());
					}
					add(
						$current,
						"vars",
						lv_vars_0_0,
						"su.nsk.iae.post.PoST.ProcessVariable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getProcessVarListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProcessVarListAccess().getVarsProcessVariableParserRuleCall_1_1_0());
					}
					lv_vars_2_0=ruleProcessVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcessVarListRule());
						}
						add(
							$current,
							"vars",
							lv_vars_2_0,
							"su.nsk.iae.post.PoST.ProcessVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleProcessVarInitDeclaration
entryRuleProcessVarInitDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessVarInitDeclarationRule()); }
	iv_ruleProcessVarInitDeclaration=ruleProcessVarInitDeclaration
	{ $current=$iv_ruleProcessVarInitDeclaration.current; }
	EOF;

// Rule ProcessVarInitDeclaration
ruleProcessVarInitDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProcessVarInitDeclarationAccess().getVarListProcessVarListParserRuleCall_0_0());
				}
				lv_varList_0_0=ruleProcessVarList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProcessVarInitDeclarationRule());
					}
					set(
						$current,
						"varList",
						lv_varList_0_0,
						"su.nsk.iae.post.PoST.ProcessVarList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcessVarInitDeclarationAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcessVarInitDeclarationRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getProcessVarInitDeclarationAccess().getProcessProcessCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleProcessVarDeclaration
entryRuleProcessVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcessVarDeclarationRule()); }
	iv_ruleProcessVarDeclaration=ruleProcessVarDeclaration
	{ $current=$iv_ruleProcessVarDeclaration.current; }
	EOF;

// Rule ProcessVarDeclaration
ruleProcessVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProcessVarDeclarationAccess().getProcessVarDeclarationAction_0(),
					$current);
			}
		)
		otherlv_1='VAR_PROCESS'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcessVarDeclarationAccess().getVAR_PROCESSKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProcessVarDeclarationAccess().getVarsProcessVarInitDeclarationParserRuleCall_2_0_0());
					}
					lv_vars_2_0=ruleProcessVarInitDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcessVarDeclarationRule());
						}
						add(
							$current,
							"vars",
							lv_vars_2_0,
							"su.nsk.iae.post.PoST.ProcessVarInitDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getProcessVarDeclarationAccess().getSemicolonKeyword_2_1());
			}
		)*
		otherlv_4='END_VAR'
		{
			newLeafNode(otherlv_4, grammarAccess.getProcessVarDeclarationAccess().getEND_VARKeyword_3());
		}
	)
;

// Entry rule entryRuleArrayVariable
entryRuleArrayVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayVariableRule()); }
	iv_ruleArrayVariable=ruleArrayVariable
	{ $current=$iv_ruleArrayVariable.current; }
	EOF;

// Rule ArrayVariable
ruleArrayVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArrayVariableRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getArrayVariableAccess().getVariableSymbolicVariableCrossReference_0_0());
				}
			)
		)
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getArrayVariableAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayVariableAccess().getIndexExpressionParserRuleCall_2_0());
				}
				lv_index_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayVariableRule());
					}
					set(
						$current,
						"index",
						lv_index_2_0,
						"su.nsk.iae.post.PoST.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getArrayVariableAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleArraySpecificationInit
entryRuleArraySpecificationInit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArraySpecificationInitRule()); }
	iv_ruleArraySpecificationInit=ruleArraySpecificationInit
	{ $current=$iv_ruleArraySpecificationInit.current; }
	EOF;

// Rule ArraySpecificationInit
ruleArraySpecificationInit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getArraySpecificationInitAccess().getInitArraySpecificationParserRuleCall_0_0());
				}
				lv_init_0_0=ruleArraySpecification
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArraySpecificationInitRule());
					}
					set(
						$current,
						"init",
						lv_init_0_0,
						"su.nsk.iae.post.PoST.ArraySpecification");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=':='
			{
				newLeafNode(otherlv_1, grammarAccess.getArraySpecificationInitAccess().getColonEqualsSignKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArraySpecificationInitAccess().getValuesArrayInitializationParserRuleCall_1_1_0());
					}
					lv_values_2_0=ruleArrayInitialization
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArraySpecificationInitRule());
						}
						set(
							$current,
							"values",
							lv_values_2_0,
							"su.nsk.iae.post.PoST.ArrayInitialization");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleArraySpecification
entryRuleArraySpecification returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArraySpecificationRule()); }
	iv_ruleArraySpecification=ruleArraySpecification
	{ $current=$iv_ruleArraySpecification.current; }
	EOF;

// Rule ArraySpecification
ruleArraySpecification returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='ARRAY'
		{
			newLeafNode(otherlv_0, grammarAccess.getArraySpecificationAccess().getARRAYKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getArraySpecificationAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getArraySpecificationAccess().getIntervalArrayIntervalParserRuleCall_2_0_0());
					}
					lv_interval_2_0=ruleArrayInterval
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArraySpecificationRule());
						}
						set(
							$current,
							"interval",
							lv_interval_2_0,
							"su.nsk.iae.post.PoST.ArrayInterval");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			otherlv_3='*'
			{
				newLeafNode(otherlv_3, grammarAccess.getArraySpecificationAccess().getAsteriskKeyword_2_1());
			}
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getArraySpecificationAccess().getRightSquareBracketKeyword_3());
		}
		otherlv_5='OF'
		{
			newLeafNode(otherlv_5, grammarAccess.getArraySpecificationAccess().getOFKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArraySpecificationAccess().getTypeDataTypeNameParserRuleCall_5_0());
				}
				lv_type_6_0=ruleDataTypeName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArraySpecificationRule());
					}
					set(
						$current,
						"type",
						lv_type_6_0,
						"su.nsk.iae.post.PoST.DataTypeName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArrayInterval
entryRuleArrayInterval returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayIntervalRule()); }
	iv_ruleArrayInterval=ruleArrayInterval
	{ $current=$iv_ruleArrayInterval.current; }
	EOF;

// Rule ArrayInterval
ruleArrayInterval returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayIntervalAccess().getStartExpressionParserRuleCall_0_0());
				}
				lv_start_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayIntervalRule());
					}
					set(
						$current,
						"start",
						lv_start_0_0,
						"su.nsk.iae.post.PoST.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='..'
		{
			newLeafNode(otherlv_1, grammarAccess.getArrayIntervalAccess().getFullStopFullStopKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayIntervalAccess().getEndExpressionParserRuleCall_2_0());
				}
				lv_end_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayIntervalRule());
					}
					set(
						$current,
						"end",
						lv_end_2_0,
						"su.nsk.iae.post.PoST.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleArrayInitialization
entryRuleArrayInitialization returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayInitializationRule()); }
	iv_ruleArrayInitialization=ruleArrayInitialization
	{ $current=$iv_ruleArrayInitialization.current; }
	EOF;

// Rule ArrayInitialization
ruleArrayInitialization returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayInitializationAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayInitializationAccess().getElementsExpressionParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayInitializationRule());
					}
					add(
						$current,
						"elements",
						lv_elements_1_0,
						"su.nsk.iae.post.PoST.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getArrayInitializationAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayInitializationAccess().getElementsExpressionParserRuleCall_2_1_0());
					}
					lv_elements_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayInitializationRule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_0,
							"su.nsk.iae.post.PoST.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getArrayInitializationAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleTimeLiteral
entryRuleTimeLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeLiteralRule()); }
	iv_ruleTimeLiteral=ruleTimeLiteral
	{ $current=$iv_ruleTimeLiteral.current; }
	EOF;

// Rule TimeLiteral
ruleTimeLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_TIME_PREF_LITERAL_0=RULE_TIME_PREF_LITERAL
		{
			newLeafNode(this_TIME_PREF_LITERAL_0, grammarAccess.getTimeLiteralAccess().getTIME_PREF_LITERALTerminalRuleCall_0());
		}
		otherlv_1='#'
		{
			newLeafNode(otherlv_1, grammarAccess.getTimeLiteralAccess().getNumberSignKeyword_1());
		}
		(
			otherlv_2='-'
			{
				newLeafNode(otherlv_2, grammarAccess.getTimeLiteralAccess().getHyphenMinusKeyword_2());
			}
		)?
		(
			(
				lv_interval_3_0=RULE_INTERVAL
				{
					newLeafNode(lv_interval_3_0, grammarAccess.getTimeLiteralAccess().getIntervalINTERVALTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"interval",
						lv_interval_3_0,
						"su.nsk.iae.post.PoST.INTERVAL");
				}
			)
		)
	)
;

// Entry rule entryRuleDataTypeName
entryRuleDataTypeName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeNameRule()); }
	iv_ruleDataTypeName=ruleDataTypeName
	{ $current=$iv_ruleDataTypeName.current.getText(); }
	EOF;

// Rule DataTypeName
ruleDataTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDataTypeNameAccess().getNumericTypeNameParserRuleCall_0());
		}
		this_NumericTypeName_0=ruleNumericTypeName
		{
			$current.merge(this_NumericTypeName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_BIT_STRING_TYPE_NAME_1=RULE_BIT_STRING_TYPE_NAME
		{
			$current.merge(this_BIT_STRING_TYPE_NAME_1);
		}
		{
			newLeafNode(this_BIT_STRING_TYPE_NAME_1, grammarAccess.getDataTypeNameAccess().getBIT_STRING_TYPE_NAMETerminalRuleCall_1());
		}
		    |
		this_TIME_TYPE_NAME_2=RULE_TIME_TYPE_NAME
		{
			$current.merge(this_TIME_TYPE_NAME_2);
		}
		{
			newLeafNode(this_TIME_TYPE_NAME_2, grammarAccess.getDataTypeNameAccess().getTIME_TYPE_NAMETerminalRuleCall_2());
		}
		    |
		this_STRING_TYPE_NAME_3=RULE_STRING_TYPE_NAME
		{
			$current.merge(this_STRING_TYPE_NAME_3);
		}
		{
			newLeafNode(this_STRING_TYPE_NAME_3, grammarAccess.getDataTypeNameAccess().getSTRING_TYPE_NAMETerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuleNumericTypeName
entryRuleNumericTypeName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumericTypeNameRule()); }
	iv_ruleNumericTypeName=ruleNumericTypeName
	{ $current=$iv_ruleNumericTypeName.current.getText(); }
	EOF;

// Rule NumericTypeName
ruleNumericTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumericTypeNameAccess().getIntegerTypeNameParserRuleCall_0());
		}
		this_IntegerTypeName_0=ruleIntegerTypeName
		{
			$current.merge(this_IntegerTypeName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_REAL_TYPE_NAME_1=RULE_REAL_TYPE_NAME
		{
			$current.merge(this_REAL_TYPE_NAME_1);
		}
		{
			newLeafNode(this_REAL_TYPE_NAME_1, grammarAccess.getNumericTypeNameAccess().getREAL_TYPE_NAMETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleIntegerTypeName
entryRuleIntegerTypeName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntegerTypeNameRule()); }
	iv_ruleIntegerTypeName=ruleIntegerTypeName
	{ $current=$iv_ruleIntegerTypeName.current.getText(); }
	EOF;

// Rule IntegerTypeName
ruleIntegerTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_SIGNED_INTEGER_TYPE_NAME_0=RULE_SIGNED_INTEGER_TYPE_NAME
		{
			$current.merge(this_SIGNED_INTEGER_TYPE_NAME_0);
		}
		{
			newLeafNode(this_SIGNED_INTEGER_TYPE_NAME_0, grammarAccess.getIntegerTypeNameAccess().getSIGNED_INTEGER_TYPE_NAMETerminalRuleCall_0());
		}
		    |
		this_UNSIGNED_INTEGER_TYPE_NAME_1=RULE_UNSIGNED_INTEGER_TYPE_NAME
		{
			$current.merge(this_UNSIGNED_INTEGER_TYPE_NAME_1);
		}
		{
			newLeafNode(this_UNSIGNED_INTEGER_TYPE_NAME_1, grammarAccess.getIntegerTypeNameAccess().getUNSIGNED_INTEGER_TYPE_NAMETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getNumNumericLiteralParserRuleCall_0_0());
				}
				lv_num_0_0=ruleNumericLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"num",
						lv_num_0_0,
						"su.nsk.iae.post.PoST.NumericLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getTimeTimeLiteralParserRuleCall_1_0());
				}
				lv_time_1_0=ruleTimeLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"time",
						lv_time_1_0,
						"su.nsk.iae.post.PoST.TimeLiteral");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					lv_oth_2_1=RULE_BINARY_INTEGER
					{
						newLeafNode(lv_oth_2_1, grammarAccess.getConstantAccess().getOthBINARY_INTEGERTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantRule());
						}
						setWithLastConsumed(
							$current,
							"oth",
							lv_oth_2_1,
							"su.nsk.iae.post.PoST.BINARY_INTEGER");
					}
					    |
					lv_oth_2_2=RULE_OCTAL_INTEGER
					{
						newLeafNode(lv_oth_2_2, grammarAccess.getConstantAccess().getOthOCTAL_INTEGERTerminalRuleCall_2_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantRule());
						}
						setWithLastConsumed(
							$current,
							"oth",
							lv_oth_2_2,
							"su.nsk.iae.post.PoST.OCTAL_INTEGER");
					}
					    |
					lv_oth_2_3=RULE_HEX_INTEGER
					{
						newLeafNode(lv_oth_2_3, grammarAccess.getConstantAccess().getOthHEX_INTEGERTerminalRuleCall_2_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantRule());
						}
						setWithLastConsumed(
							$current,
							"oth",
							lv_oth_2_3,
							"su.nsk.iae.post.PoST.HEX_INTEGER");
					}
					    |
					lv_oth_2_4=RULE_BOOLEAN_LITERAL
					{
						newLeafNode(lv_oth_2_4, grammarAccess.getConstantAccess().getOthBOOLEAN_LITERALTerminalRuleCall_2_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConstantRule());
						}
						setWithLastConsumed(
							$current,
							"oth",
							lv_oth_2_4,
							"su.nsk.iae.post.PoST.BOOLEAN_LITERAL");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSignedInteger
entryRuleSignedInteger returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignedIntegerRule()); }
	iv_ruleSignedInteger=ruleSignedInteger
	{ $current=$iv_ruleSignedInteger.current; }
	EOF;

// Rule SignedInteger
ruleSignedInteger returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_iSig_0_0='-'
				{
					newLeafNode(lv_iSig_0_0, grammarAccess.getSignedIntegerAccess().getISigHyphenMinusKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignedIntegerRule());
					}
					setWithLastConsumed($current, "iSig", lv_iSig_0_0 != null, "-");
				}
			)
		)?
		(
			(
				lv_value_1_0=RULE_INTEGER
				{
					newLeafNode(lv_value_1_0, grammarAccess.getSignedIntegerAccess().getValueINTEGERTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSignedIntegerRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"su.nsk.iae.post.PoST.INTEGER");
				}
			)
		)
	)
;

// Entry rule entryRuleNumericLiteral
entryRuleNumericLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericLiteralRule()); }
	iv_ruleNumericLiteral=ruleNumericLiteral
	{ $current=$iv_ruleNumericLiteral.current; }
	EOF;

// Rule NumericLiteral
ruleNumericLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumericLiteralAccess().getIntegerLiteralParserRuleCall_0());
		}
		this_IntegerLiteral_0=ruleIntegerLiteral
		{
			$current = $this_IntegerLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumericLiteralAccess().getRealLiteralParserRuleCall_1());
		}
		this_RealLiteral_1=ruleRealLiteral
		{
			$current = $this_RealLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	iv_ruleIntegerLiteral=ruleIntegerLiteral
	{ $current=$iv_ruleIntegerLiteral.current; }
	EOF;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getIntegerLiteralAccess().getTypeIntegerTypeNameParserRuleCall_0_0_0());
					}
					lv_type_0_0=ruleIntegerTypeName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntegerLiteralRule());
						}
						set(
							$current,
							"type",
							lv_type_0_0,
							"su.nsk.iae.post.PoST.IntegerTypeName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='#'
			{
				newLeafNode(otherlv_1, grammarAccess.getIntegerLiteralAccess().getNumberSignKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getIntegerLiteralAccess().getValueSignedIntegerParserRuleCall_1_0());
				}
				lv_value_2_0=ruleSignedInteger
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntegerLiteralRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"su.nsk.iae.post.PoST.SignedInteger");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); }
	iv_ruleRealLiteral=ruleRealLiteral
	{ $current=$iv_ruleRealLiteral.current; }
	EOF;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_type_0_0=RULE_REAL_TYPE_NAME
					{
						newLeafNode(lv_type_0_0, grammarAccess.getRealLiteralAccess().getTypeREAL_TYPE_NAMETerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRealLiteralRule());
						}
						setWithLastConsumed(
							$current,
							"type",
							lv_type_0_0,
							"su.nsk.iae.post.PoST.REAL_TYPE_NAME");
					}
				)
			)
			otherlv_1='#'
			{
				newLeafNode(otherlv_1, grammarAccess.getRealLiteralAccess().getNumberSignKeyword_0_1());
			}
		)?
		(
			(
				lv_rSig_2_0='-'
				{
					newLeafNode(lv_rSig_2_0, grammarAccess.getRealLiteralAccess().getRSigHyphenMinusKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRealLiteralRule());
					}
					setWithLastConsumed($current, "rSig", lv_rSig_2_0 != null, "-");
				}
			)
		)?
		(
			(
				lv_value_3_0=RULE_REAL
				{
					newLeafNode(lv_value_3_0, grammarAccess.getRealLiteralAccess().getValueREALTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRealLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"su.nsk.iae.post.PoST.REAL");
				}
			)
		)
	)
;

// Rule AssignmentType
ruleAssignmentType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0=':='
			{
				$current = grammarAccess.getAssignmentTypeAccess().getInEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAssignmentTypeAccess().getInEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='=>'
			{
				$current = grammarAccess.getAssignmentTypeAccess().getOutEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAssignmentTypeAccess().getOutEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule CompOperator
ruleCompOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getCompOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompOperatorAccess().getEQUALEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<>'
			{
				$current = grammarAccess.getCompOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule EquOperator
ruleEquOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<'
			{
				$current = grammarAccess.getEquOperatorAccess().getLESSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEquOperatorAccess().getLESSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>'
			{
				$current = grammarAccess.getEquOperatorAccess().getGREATEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEquOperatorAccess().getGREATEREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<='
			{
				$current = grammarAccess.getEquOperatorAccess().getLESS_EQUEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEquOperatorAccess().getLESS_EQUEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>='
			{
				$current = grammarAccess.getEquOperatorAccess().getGREATER_EQUEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getEquOperatorAccess().getGREATER_EQUEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule AddOperator
ruleAddOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getAddOperatorAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAddOperatorAccess().getPLUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getAddOperatorAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAddOperatorAccess().getMINUSEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule MulOperator
ruleMulOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='*'
			{
				$current = grammarAccess.getMulOperatorAccess().getMULEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMulOperatorAccess().getMULEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='/'
			{
				$current = grammarAccess.getMulOperatorAccess().getDIVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMulOperatorAccess().getDIVEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='MOD'
			{
				$current = grammarAccess.getMulOperatorAccess().getMODEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMulOperatorAccess().getMODEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule UnaryOperator
ruleUnaryOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='NOT'
			{
				$current = grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnaryOperatorAccess().getNOTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getUnaryOperatorAccess().getUNMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnaryOperatorAccess().getUNMINUSEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_SINGLE_DECLARATION : 'SINGLE';

RULE_INTERVAL_DECLARATION : 'INTERVAL';

RULE_PRIORITY_DECLARATION : 'PRIORITY';

RULE_OR_OPERATOR : 'OR';

RULE_XOR_OPERATOR : 'XOR';

RULE_AND_OPERATOR : ('&'|'AND');

RULE_POWER_OPERATOR : '**';

RULE_TIME_PREF_LITERAL : 'T';

RULE_INTERVAL : (RULE_INTEGER 'd')? (RULE_INTEGER 'h')? (RULE_INTEGER 'm')? (RULE_INTEGER 's')? (RULE_INTEGER 'ms')?;

RULE_DIRECT_VARIABLE : '%' RULE_DIRECT_TYPE_PREFIX RULE_DIRECT_SIZE_PREFIX RULE_INTEGER ('.' RULE_INTEGER)*;

fragment RULE_DIRECT_TYPE_PREFIX : ('I'|'Q'|'M');

fragment RULE_DIRECT_SIZE_PREFIX : ('X'|'B'|'W'|'D'|'L');

RULE_SIGNED_INTEGER_TYPE_NAME : ('SINT'|'INT'|'DINT'|'LINT');

RULE_UNSIGNED_INTEGER_TYPE_NAME : ('USINT'|'UINT'|'UDINT'|'ULINT');

RULE_REAL_TYPE_NAME : ('REAL'|'LREAL');

RULE_BIT_STRING_TYPE_NAME : ('BOOL'|'BYTE'|'WORD'|'DWORD'|'LWORD');

RULE_TIME_TYPE_NAME : 'TIME';

RULE_STRING_TYPE_NAME : ('STRING'|'WSTRING');

RULE_INTEGER : RULE_DIGIT+;

RULE_REAL : RULE_INTEGER '.' RULE_INTEGER;

RULE_BINARY_INTEGER : '2#' RULE_BIT+;

RULE_OCTAL_INTEGER : '8#' RULE_OCTAL_DIGIT+;

RULE_HEX_INTEGER : '16#' RULE_HEX_DIGIT+;

RULE_BOOLEAN_LITERAL : ('TRUE'|'FALSE');

fragment RULE_LETTER : ('A'..'Z'|'a'..'z'|'_');

fragment RULE_BIT : ('0'|'1');

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_DIGIT : '0'..'9';

fragment RULE_HEX_DIGIT : (RULE_DIGIT|'A'..'F');

RULE_ID : RULE_LETTER (RULE_LETTER|RULE_DIGIT)*;

RULE_ML_COMMENT : ('/*' ( options {greedy=false;} : . )*'*/'|'(*' ( options {greedy=false;} : . )*'*)');

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
