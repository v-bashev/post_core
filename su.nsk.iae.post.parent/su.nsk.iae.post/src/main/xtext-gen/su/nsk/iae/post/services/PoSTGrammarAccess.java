/*
 * generated by Xtext 2.25.0
 */
package su.nsk.iae.post.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PoSTGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.Model");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cConfAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cConfConfigurationParserRuleCall_0_0 = (RuleCall)cConfAssignment_0.eContents().get(0);
		private final Assignment cGlobVarsAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cGlobVarsGlobalVarDeclarationParserRuleCall_1_0 = (RuleCall)cGlobVarsAssignment_1.eContents().get(0);
		private final Assignment cProgramsAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cProgramsProgramParserRuleCall_2_0 = (RuleCall)cProgramsAssignment_2.eContents().get(0);
		private final Assignment cFbsAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cFbsFunctionBlockParserRuleCall_3_0 = (RuleCall)cFbsAssignment_3.eContents().get(0);
		private final Assignment cFunsAssignment_4 = (Assignment)cUnorderedGroup.eContents().get(4);
		private final RuleCall cFunsFunctionParserRuleCall_4_0 = (RuleCall)cFunsAssignment_4.eContents().get(0);
		
		//Model:
		//    (conf=Configuration)? &
		//    (globVars+=GlobalVarDeclaration)* &
		//    (programs+=Program)* &
		//    (fbs+=FunctionBlock)* &
		//    (funs+=Function)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(conf=Configuration)? &
		//(globVars+=GlobalVarDeclaration)* &
		//(programs+=Program)* &
		//(fbs+=FunctionBlock)* &
		//(funs+=Function)*
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//(conf=Configuration)?
		public Assignment getConfAssignment_0() { return cConfAssignment_0; }
		
		//Configuration
		public RuleCall getConfConfigurationParserRuleCall_0_0() { return cConfConfigurationParserRuleCall_0_0; }
		
		//(globVars+=GlobalVarDeclaration)*
		public Assignment getGlobVarsAssignment_1() { return cGlobVarsAssignment_1; }
		
		//GlobalVarDeclaration
		public RuleCall getGlobVarsGlobalVarDeclarationParserRuleCall_1_0() { return cGlobVarsGlobalVarDeclarationParserRuleCall_1_0; }
		
		//(programs+=Program)*
		public Assignment getProgramsAssignment_2() { return cProgramsAssignment_2; }
		
		//Program
		public RuleCall getProgramsProgramParserRuleCall_2_0() { return cProgramsProgramParserRuleCall_2_0; }
		
		//(fbs+=FunctionBlock)*
		public Assignment getFbsAssignment_3() { return cFbsAssignment_3; }
		
		//FunctionBlock
		public RuleCall getFbsFunctionBlockParserRuleCall_3_0() { return cFbsFunctionBlockParserRuleCall_3_0; }
		
		//(funs+=Function)*
		public Assignment getFunsAssignment_4() { return cFunsAssignment_4; }
		
		//Function
		public RuleCall getFunsFunctionParserRuleCall_4_0() { return cFunsFunctionParserRuleCall_4_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSymbolicVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcessVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProcessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTemplateProcessConfElementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///* ======================= START Variable ======================= */
		//Variable:
		//    SymbolicVariable | ProcessVariable | Process | TemplateProcessConfElement;
		@Override public ParserRule getRule() { return rule; }
		
		//SymbolicVariable | ProcessVariable | Process | TemplateProcessConfElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SymbolicVariable
		public RuleCall getSymbolicVariableParserRuleCall_0() { return cSymbolicVariableParserRuleCall_0; }
		
		//ProcessVariable
		public RuleCall getProcessVariableParserRuleCall_1() { return cProcessVariableParserRuleCall_1; }
		
		//Process
		public RuleCall getProcessParserRuleCall_2() { return cProcessParserRuleCall_2; }
		
		//TemplateProcessConfElement
		public RuleCall getTemplateProcessConfElementParserRuleCall_3() { return cTemplateProcessConfElementParserRuleCall_3; }
	}
	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCONFIGURATIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cConfGlobVarsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cConfGlobVarsGlobalVarDeclarationParserRuleCall_2_0_0 = (RuleCall)cConfGlobVarsAssignment_2_0.eContents().get(0);
		private final Assignment cResourcesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cResourcesResourceParserRuleCall_2_1_0 = (RuleCall)cResourcesAssignment_2_1.eContents().get(0);
		private final Keyword cEND_CONFIGURATIONKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///* ======================= END Variable ======================= */
		///* ======================= START Configuration ======================= */
		//Configuration:
		//    'CONFIGURATION' name=ID
		//        (
		//            confGlobVars+=GlobalVarDeclaration |
		//            resources+=Resource
		//        )*
		//    'END_CONFIGURATION';
		@Override public ParserRule getRule() { return rule; }
		
		//'CONFIGURATION' name=ID
		//    (
		//        confGlobVars+=GlobalVarDeclaration |
		//        resources+=Resource
		//    )*
		//'END_CONFIGURATION'
		public Group getGroup() { return cGroup; }
		
		//'CONFIGURATION'
		public Keyword getCONFIGURATIONKeyword_0() { return cCONFIGURATIONKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(
		//    confGlobVars+=GlobalVarDeclaration |
		//    resources+=Resource
		//)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//confGlobVars+=GlobalVarDeclaration
		public Assignment getConfGlobVarsAssignment_2_0() { return cConfGlobVarsAssignment_2_0; }
		
		//GlobalVarDeclaration
		public RuleCall getConfGlobVarsGlobalVarDeclarationParserRuleCall_2_0_0() { return cConfGlobVarsGlobalVarDeclarationParserRuleCall_2_0_0; }
		
		//resources+=Resource
		public Assignment getResourcesAssignment_2_1() { return cResourcesAssignment_2_1; }
		
		//Resource
		public RuleCall getResourcesResourceParserRuleCall_2_1_0() { return cResourcesResourceParserRuleCall_2_1_0; }
		
		//'END_CONFIGURATION'
		public Keyword getEND_CONFIGURATIONKeyword_3() { return cEND_CONFIGURATIONKeyword_3; }
	}
	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRESOURCEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cONKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeIDTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cResGlobVarsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cResGlobVarsGlobalVarDeclarationParserRuleCall_4_0 = (RuleCall)cResGlobVarsAssignment_4.eContents().get(0);
		private final Assignment cResStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cResStatementSingleResourceParserRuleCall_5_0 = (RuleCall)cResStatementAssignment_5.eContents().get(0);
		private final Keyword cEND_RESOURCEKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Resource:
		//    'RESOURCE' name=ID 'ON' type=ID
		//        (resGlobVars+=GlobalVarDeclaration)*
		//        resStatement=SingleResource
		//    'END_RESOURCE';
		@Override public ParserRule getRule() { return rule; }
		
		//'RESOURCE' name=ID 'ON' type=ID
		//    (resGlobVars+=GlobalVarDeclaration)*
		//    resStatement=SingleResource
		//'END_RESOURCE'
		public Group getGroup() { return cGroup; }
		
		//'RESOURCE'
		public Keyword getRESOURCEKeyword_0() { return cRESOURCEKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'ON'
		public Keyword getONKeyword_2() { return cONKeyword_2; }
		
		//type=ID
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_0() { return cTypeIDTerminalRuleCall_3_0; }
		
		//(resGlobVars+=GlobalVarDeclaration)*
		public Assignment getResGlobVarsAssignment_4() { return cResGlobVarsAssignment_4; }
		
		//GlobalVarDeclaration
		public RuleCall getResGlobVarsGlobalVarDeclarationParserRuleCall_4_0() { return cResGlobVarsGlobalVarDeclarationParserRuleCall_4_0; }
		
		//resStatement=SingleResource
		public Assignment getResStatementAssignment_5() { return cResStatementAssignment_5; }
		
		//SingleResource
		public RuleCall getResStatementSingleResourceParserRuleCall_5_0() { return cResStatementSingleResourceParserRuleCall_5_0; }
		
		//'END_RESOURCE'
		public Keyword getEND_RESOURCEKeyword_6() { return cEND_RESOURCEKeyword_6; }
	}
	public class SingleResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.SingleResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSingleResourceAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cTasksAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cTasksTaskParserRuleCall_1_0_0_0 = (RuleCall)cTasksAssignment_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cProgramConfsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cProgramConfsProgramConfigurationParserRuleCall_1_1_0_0 = (RuleCall)cProgramConfsAssignment_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//SingleResource:
		//    {SingleResource}
		//    (
		//        (tasks+=Task ';') |
		//        (programConfs+=ProgramConfiguration ';')
		//    )*;
		@Override public ParserRule getRule() { return rule; }
		
		//{SingleResource}
		//(
		//    (tasks+=Task ';') |
		//    (programConfs+=ProgramConfiguration ';')
		//)*
		public Group getGroup() { return cGroup; }
		
		//{SingleResource}
		public Action getSingleResourceAction_0() { return cSingleResourceAction_0; }
		
		//(
		//    (tasks+=Task ';') |
		//    (programConfs+=ProgramConfiguration ';')
		//)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(tasks+=Task ';')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//tasks+=Task
		public Assignment getTasksAssignment_1_0_0() { return cTasksAssignment_1_0_0; }
		
		//Task
		public RuleCall getTasksTaskParserRuleCall_1_0_0_0() { return cTasksTaskParserRuleCall_1_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0_1() { return cSemicolonKeyword_1_0_1; }
		
		//(programConfs+=ProgramConfiguration ';')
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//programConfs+=ProgramConfiguration
		public Assignment getProgramConfsAssignment_1_1_0() { return cProgramConfsAssignment_1_1_0; }
		
		//ProgramConfiguration
		public RuleCall getProgramConfsProgramConfigurationParserRuleCall_1_1_0_0() { return cProgramConfsProgramConfigurationParserRuleCall_1_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTASKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitTaskInitializationParserRuleCall_3_0 = (RuleCall)cInitAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Task:
		//    'TASK' name=ID '(' init=TaskInitialization ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'TASK' name=ID '(' init=TaskInitialization ')'
		public Group getGroup() { return cGroup; }
		
		//'TASK'
		public Keyword getTASKKeyword_0() { return cTASKKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//init=TaskInitialization
		public Assignment getInitAssignment_3() { return cInitAssignment_3; }
		
		//TaskInitialization
		public RuleCall getInitTaskInitializationParserRuleCall_3_0() { return cInitTaskInitializationParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class TaskInitializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.TaskInitialization");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cSINGLE_DECLARATIONTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSingleAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSingleConstantParserRuleCall_0_2_0 = (RuleCall)cSingleAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final RuleCall cINTERVAL_DECLARATIONTerminalRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cIntervalAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cIntervalConstantParserRuleCall_1_0_2_0 = (RuleCall)cIntervalAssignment_1_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cPRIORITY_DECLARATIONTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cPriorityAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cPriorityINTEGERTerminalRuleCall_1_4_0 = (RuleCall)cPriorityAssignment_1_4.eContents().get(0);
		
		//TaskInitialization:
		//    (SINGLE_DECLARATION ':=' single=Constant) | (INTERVAL_DECLARATION ':=' interval=Constant)
		//    ',' PRIORITY_DECLARATION ':=' priority=INTEGER;
		@Override public ParserRule getRule() { return rule; }
		
		//(SINGLE_DECLARATION ':=' single=Constant) | (INTERVAL_DECLARATION ':=' interval=Constant)
		//',' PRIORITY_DECLARATION ':=' priority=INTEGER
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(SINGLE_DECLARATION ':=' single=Constant)
		public Group getGroup_0() { return cGroup_0; }
		
		//SINGLE_DECLARATION
		public RuleCall getSINGLE_DECLARATIONTerminalRuleCall_0_0() { return cSINGLE_DECLARATIONTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_1() { return cColonEqualsSignKeyword_0_1; }
		
		//single=Constant
		public Assignment getSingleAssignment_0_2() { return cSingleAssignment_0_2; }
		
		//Constant
		public RuleCall getSingleConstantParserRuleCall_0_2_0() { return cSingleConstantParserRuleCall_0_2_0; }
		
		//(INTERVAL_DECLARATION ':=' interval=Constant)
		//   ',' PRIORITY_DECLARATION ':=' priority=INTEGER
		public Group getGroup_1() { return cGroup_1; }
		
		//(INTERVAL_DECLARATION ':=' interval=Constant)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//INTERVAL_DECLARATION
		public RuleCall getINTERVAL_DECLARATIONTerminalRuleCall_1_0_0() { return cINTERVAL_DECLARATIONTerminalRuleCall_1_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_0_1() { return cColonEqualsSignKeyword_1_0_1; }
		
		//interval=Constant
		public Assignment getIntervalAssignment_1_0_2() { return cIntervalAssignment_1_0_2; }
		
		//Constant
		public RuleCall getIntervalConstantParserRuleCall_1_0_2_0() { return cIntervalConstantParserRuleCall_1_0_2_0; }
		
		//','
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//PRIORITY_DECLARATION
		public RuleCall getPRIORITY_DECLARATIONTerminalRuleCall_1_2() { return cPRIORITY_DECLARATIONTerminalRuleCall_1_2; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_3() { return cColonEqualsSignKeyword_1_3; }
		
		//priority=INTEGER
		public Assignment getPriorityAssignment_1_4() { return cPriorityAssignment_1_4; }
		
		//INTEGER
		public RuleCall getPriorityINTEGERTerminalRuleCall_1_4_0() { return cPriorityINTEGERTerminalRuleCall_1_4_0; }
	}
	public class ProgramConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ProgramConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROGRAMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWITHKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTaskAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cTaskTaskCrossReference_2_1_0 = (CrossReference)cTaskAssignment_2_1.eContents().get(0);
		private final RuleCall cTaskTaskIDTerminalRuleCall_2_1_0_1 = (RuleCall)cTaskTaskCrossReference_2_1_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProgramAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cProgramProgramCrossReference_4_0 = (CrossReference)cProgramAssignment_4.eContents().get(0);
		private final RuleCall cProgramProgramIDTerminalRuleCall_4_0_1 = (RuleCall)cProgramProgramCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cArgsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cArgsProgramConfElementsParserRuleCall_5_1_0 = (RuleCall)cArgsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//ProgramConfiguration:
		//    'PROGRAM' name=ID ('WITH' task=[Task])? ':' program=[Program] ('(' args=ProgramConfElements ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'PROGRAM' name=ID ('WITH' task=[Task])? ':' program=[Program] ('(' args=ProgramConfElements ')')?
		public Group getGroup() { return cGroup; }
		
		//'PROGRAM'
		public Keyword getPROGRAMKeyword_0() { return cPROGRAMKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('WITH' task=[Task])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'WITH'
		public Keyword getWITHKeyword_2_0() { return cWITHKeyword_2_0; }
		
		//task=[Task]
		public Assignment getTaskAssignment_2_1() { return cTaskAssignment_2_1; }
		
		//[Task]
		public CrossReference getTaskTaskCrossReference_2_1_0() { return cTaskTaskCrossReference_2_1_0; }
		
		//ID
		public RuleCall getTaskTaskIDTerminalRuleCall_2_1_0_1() { return cTaskTaskIDTerminalRuleCall_2_1_0_1; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//program=[Program]
		public Assignment getProgramAssignment_4() { return cProgramAssignment_4; }
		
		//[Program]
		public CrossReference getProgramProgramCrossReference_4_0() { return cProgramProgramCrossReference_4_0; }
		
		//ID
		public RuleCall getProgramProgramIDTerminalRuleCall_4_0_1() { return cProgramProgramIDTerminalRuleCall_4_0_1; }
		
		//('(' args=ProgramConfElements ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//args=ProgramConfElements
		public Assignment getArgsAssignment_5_1() { return cArgsAssignment_5_1; }
		
		//ProgramConfElements
		public RuleCall getArgsProgramConfElementsParserRuleCall_5_1_0() { return cArgsProgramConfElementsParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}
	public class ProgramConfElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ProgramConfElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsProgramConfElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsProgramConfElementParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//ProgramConfElements:
		//    elements+=ProgramConfElement (',' elements+=ProgramConfElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=ProgramConfElement (',' elements+=ProgramConfElement)*
		public Group getGroup() { return cGroup; }
		
		//elements+=ProgramConfElement
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//ProgramConfElement
		public RuleCall getElementsProgramConfElementParserRuleCall_0_0() { return cElementsProgramConfElementParserRuleCall_0_0; }
		
		//(',' elements+=ProgramConfElement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//elements+=ProgramConfElement
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//ProgramConfElement
		public RuleCall getElementsProgramConfElementParserRuleCall_1_1_0() { return cElementsProgramConfElementParserRuleCall_1_1_0; }
	}
	public class ProgramConfElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ProgramConfElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttachVariableConfElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTemplateProcessConfElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ProgramConfElement:
		//    AttachVariableConfElement | TemplateProcessConfElement;
		@Override public ParserRule getRule() { return rule; }
		
		//AttachVariableConfElement | TemplateProcessConfElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttachVariableConfElement
		public RuleCall getAttachVariableConfElementParserRuleCall_0() { return cAttachVariableConfElementParserRuleCall_0; }
		
		//TemplateProcessConfElement
		public RuleCall getTemplateProcessConfElementParserRuleCall_1() { return cTemplateProcessConfElementParserRuleCall_1; }
	}
	public class AttachVariableConfElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.AttachVariableConfElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProgramVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cProgramVarSymbolicVariableCrossReference_0_0 = (CrossReference)cProgramVarAssignment_0.eContents().get(0);
		private final RuleCall cProgramVarSymbolicVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cProgramVarSymbolicVariableCrossReference_0_0.eContents().get(1);
		private final Assignment cAssigAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssigAssignmentTypeEnumRuleCall_1_0 = (RuleCall)cAssigAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAttVarAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cAttVarSymbolicVariableCrossReference_2_0_0 = (CrossReference)cAttVarAssignment_2_0.eContents().get(0);
		private final RuleCall cAttVarSymbolicVariableIDTerminalRuleCall_2_0_0_1 = (RuleCall)cAttVarSymbolicVariableCrossReference_2_0_0.eContents().get(1);
		private final Assignment cConstAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cConstConstantParserRuleCall_2_1_0 = (RuleCall)cConstAssignment_2_1.eContents().get(0);
		
		//AttachVariableConfElement:
		//    programVar=[SymbolicVariable] assig=AssignmentType (attVar=[SymbolicVariable] | const=Constant);
		@Override public ParserRule getRule() { return rule; }
		
		//programVar=[SymbolicVariable] assig=AssignmentType (attVar=[SymbolicVariable] | const=Constant)
		public Group getGroup() { return cGroup; }
		
		//programVar=[SymbolicVariable]
		public Assignment getProgramVarAssignment_0() { return cProgramVarAssignment_0; }
		
		//[SymbolicVariable]
		public CrossReference getProgramVarSymbolicVariableCrossReference_0_0() { return cProgramVarSymbolicVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getProgramVarSymbolicVariableIDTerminalRuleCall_0_0_1() { return cProgramVarSymbolicVariableIDTerminalRuleCall_0_0_1; }
		
		//assig=AssignmentType
		public Assignment getAssigAssignment_1() { return cAssigAssignment_1; }
		
		//AssignmentType
		public RuleCall getAssigAssignmentTypeEnumRuleCall_1_0() { return cAssigAssignmentTypeEnumRuleCall_1_0; }
		
		//(attVar=[SymbolicVariable] | const=Constant)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//attVar=[SymbolicVariable]
		public Assignment getAttVarAssignment_2_0() { return cAttVarAssignment_2_0; }
		
		//[SymbolicVariable]
		public CrossReference getAttVarSymbolicVariableCrossReference_2_0_0() { return cAttVarSymbolicVariableCrossReference_2_0_0; }
		
		//ID
		public RuleCall getAttVarSymbolicVariableIDTerminalRuleCall_2_0_0_1() { return cAttVarSymbolicVariableIDTerminalRuleCall_2_0_0_1; }
		
		//const=Constant
		public Assignment getConstAssignment_2_1() { return cConstAssignment_2_1; }
		
		//Constant
		public RuleCall getConstConstantParserRuleCall_2_1_0() { return cConstConstantParserRuleCall_2_1_0; }
	}
	public class TemplateProcessConfElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.TemplateProcessConfElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROCESSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActiveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cActiveACTIVEKeyword_1_0 = (Keyword)cActiveAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProcessAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cProcessProcessCrossReference_4_0 = (CrossReference)cProcessAssignment_4.eContents().get(0);
		private final RuleCall cProcessProcessIDTerminalRuleCall_4_0_1 = (RuleCall)cProcessProcessCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cArgsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cArgsTemplateProcessElementsParserRuleCall_5_1_0 = (RuleCall)cArgsAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		///* ======================= END Configuration ======================= */
		///* ======================= START Template Configuration ======================= */
		//TemplateProcessConfElement:
		//    'PROCESS' (active?='ACTIVE')? name=ID ':' process=[Process] ('(' args=TemplateProcessElements ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'PROCESS' (active?='ACTIVE')? name=ID ':' process=[Process] ('(' args=TemplateProcessElements ')')?
		public Group getGroup() { return cGroup; }
		
		//'PROCESS'
		public Keyword getPROCESSKeyword_0() { return cPROCESSKeyword_0; }
		
		//(active?='ACTIVE')?
		public Assignment getActiveAssignment_1() { return cActiveAssignment_1; }
		
		//'ACTIVE'
		public Keyword getActiveACTIVEKeyword_1_0() { return cActiveACTIVEKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//process=[Process]
		public Assignment getProcessAssignment_4() { return cProcessAssignment_4; }
		
		//[Process]
		public CrossReference getProcessProcessCrossReference_4_0() { return cProcessProcessCrossReference_4_0; }
		
		//ID
		public RuleCall getProcessProcessIDTerminalRuleCall_4_0_1() { return cProcessProcessIDTerminalRuleCall_4_0_1; }
		
		//('(' args=TemplateProcessElements ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//args=TemplateProcessElements
		public Assignment getArgsAssignment_5_1() { return cArgsAssignment_5_1; }
		
		//TemplateProcessElements
		public RuleCall getArgsTemplateProcessElementsParserRuleCall_5_1_0() { return cArgsTemplateProcessElementsParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}
	public class TemplateProcessElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.TemplateProcessElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsTemplateProcessAttachVariableConfElementParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsTemplateProcessAttachVariableConfElementParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//TemplateProcessElements:
		//    elements+=TemplateProcessAttachVariableConfElement (',' elements+=TemplateProcessAttachVariableConfElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=TemplateProcessAttachVariableConfElement (',' elements+=TemplateProcessAttachVariableConfElement)*
		public Group getGroup() { return cGroup; }
		
		//elements+=TemplateProcessAttachVariableConfElement
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//TemplateProcessAttachVariableConfElement
		public RuleCall getElementsTemplateProcessAttachVariableConfElementParserRuleCall_0_0() { return cElementsTemplateProcessAttachVariableConfElementParserRuleCall_0_0; }
		
		//(',' elements+=TemplateProcessAttachVariableConfElement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//elements+=TemplateProcessAttachVariableConfElement
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//TemplateProcessAttachVariableConfElement
		public RuleCall getElementsTemplateProcessAttachVariableConfElementParserRuleCall_1_1_0() { return cElementsTemplateProcessAttachVariableConfElementParserRuleCall_1_1_0; }
	}
	public class TemplateProcessAttachVariableConfElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.TemplateProcessAttachVariableConfElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProgramVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cProgramVarVariableCrossReference_0_0 = (CrossReference)cProgramVarAssignment_0.eContents().get(0);
		private final RuleCall cProgramVarVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cProgramVarVariableCrossReference_0_0.eContents().get(1);
		private final Assignment cAssigAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssigAssignmentTypeEnumRuleCall_1_0 = (RuleCall)cAssigAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAttVarAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cAttVarVariableCrossReference_2_0_0 = (CrossReference)cAttVarAssignment_2_0.eContents().get(0);
		private final RuleCall cAttVarVariableIDTerminalRuleCall_2_0_0_1 = (RuleCall)cAttVarVariableCrossReference_2_0_0.eContents().get(1);
		private final Assignment cConstAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cConstConstantParserRuleCall_2_1_0 = (RuleCall)cConstAssignment_2_1.eContents().get(0);
		
		//TemplateProcessAttachVariableConfElement:
		//    programVar=[Variable] assig=AssignmentType (attVar=[Variable] | const=Constant);
		@Override public ParserRule getRule() { return rule; }
		
		//programVar=[Variable] assig=AssignmentType (attVar=[Variable] | const=Constant)
		public Group getGroup() { return cGroup; }
		
		//programVar=[Variable]
		public Assignment getProgramVarAssignment_0() { return cProgramVarAssignment_0; }
		
		//[Variable]
		public CrossReference getProgramVarVariableCrossReference_0_0() { return cProgramVarVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getProgramVarVariableIDTerminalRuleCall_0_0_1() { return cProgramVarVariableIDTerminalRuleCall_0_0_1; }
		
		//assig=AssignmentType
		public Assignment getAssigAssignment_1() { return cAssigAssignment_1; }
		
		//AssignmentType
		public RuleCall getAssigAssignmentTypeEnumRuleCall_1_0() { return cAssigAssignmentTypeEnumRuleCall_1_0; }
		
		//(attVar=[Variable] | const=Constant)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//attVar=[Variable]
		public Assignment getAttVarAssignment_2_0() { return cAttVarAssignment_2_0; }
		
		//[Variable]
		public CrossReference getAttVarVariableCrossReference_2_0_0() { return cAttVarVariableCrossReference_2_0_0; }
		
		//ID
		public RuleCall getAttVarVariableIDTerminalRuleCall_2_0_0_1() { return cAttVarVariableIDTerminalRuleCall_2_0_0_1; }
		
		//const=Constant
		public Assignment getConstAssignment_2_1() { return cConstAssignment_2_1; }
		
		//Constant
		public RuleCall getConstConstantParserRuleCall_2_1_0() { return cConstConstantParserRuleCall_2_1_0; }
	}
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROGRAMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cProgInVarsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cProgInVarsInputVarDeclarationParserRuleCall_2_0_0 = (RuleCall)cProgInVarsAssignment_2_0.eContents().get(0);
		private final Assignment cProgOutVarsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cProgOutVarsOutputVarDeclarationParserRuleCall_2_1_0 = (RuleCall)cProgOutVarsAssignment_2_1.eContents().get(0);
		private final Assignment cProgInOutVarsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cProgInOutVarsInputOutputVarDeclarationParserRuleCall_2_2_0 = (RuleCall)cProgInOutVarsAssignment_2_2.eContents().get(0);
		private final Assignment cProgVarsAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cProgVarsVarDeclarationParserRuleCall_2_3_0 = (RuleCall)cProgVarsAssignment_2_3.eContents().get(0);
		private final Assignment cProgTempVarsAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cProgTempVarsTempVarDeclarationParserRuleCall_2_4_0 = (RuleCall)cProgTempVarsAssignment_2_4.eContents().get(0);
		private final Assignment cProgExternVarsAssignment_2_5 = (Assignment)cAlternatives_2.eContents().get(5);
		private final RuleCall cProgExternVarsExternalVarDeclarationParserRuleCall_2_5_0 = (RuleCall)cProgExternVarsAssignment_2_5.eContents().get(0);
		private final Assignment cProcessesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessesProcessParserRuleCall_3_0 = (RuleCall)cProcessesAssignment_3.eContents().get(0);
		private final Keyword cEND_PROGRAMKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* ======================= END Template Configuration ======================= */
		///* ======================= START Program ======================= */
		//Program:
		//    'PROGRAM' name=ID
		//        (
		//            progInVars+=InputVarDeclaration |
		//            progOutVars+=OutputVarDeclaration |
		//            progInOutVars+=InputOutputVarDeclaration |
		//            progVars+=VarDeclaration |
		//            progTempVars+=TempVarDeclaration |
		//            progExternVars+=ExternalVarDeclaration
		//        )*
		//        (processes+=Process )*
		//    'END_PROGRAM';
		@Override public ParserRule getRule() { return rule; }
		
		//'PROGRAM' name=ID
		//    (
		//        progInVars+=InputVarDeclaration |
		//        progOutVars+=OutputVarDeclaration |
		//        progInOutVars+=InputOutputVarDeclaration |
		//        progVars+=VarDeclaration |
		//        progTempVars+=TempVarDeclaration |
		//        progExternVars+=ExternalVarDeclaration
		//    )*
		//    (processes+=Process )*
		//'END_PROGRAM'
		public Group getGroup() { return cGroup; }
		
		//'PROGRAM'
		public Keyword getPROGRAMKeyword_0() { return cPROGRAMKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(
		//    progInVars+=InputVarDeclaration |
		//    progOutVars+=OutputVarDeclaration |
		//    progInOutVars+=InputOutputVarDeclaration |
		//    progVars+=VarDeclaration |
		//    progTempVars+=TempVarDeclaration |
		//    progExternVars+=ExternalVarDeclaration
		//)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//progInVars+=InputVarDeclaration
		public Assignment getProgInVarsAssignment_2_0() { return cProgInVarsAssignment_2_0; }
		
		//InputVarDeclaration
		public RuleCall getProgInVarsInputVarDeclarationParserRuleCall_2_0_0() { return cProgInVarsInputVarDeclarationParserRuleCall_2_0_0; }
		
		//progOutVars+=OutputVarDeclaration
		public Assignment getProgOutVarsAssignment_2_1() { return cProgOutVarsAssignment_2_1; }
		
		//OutputVarDeclaration
		public RuleCall getProgOutVarsOutputVarDeclarationParserRuleCall_2_1_0() { return cProgOutVarsOutputVarDeclarationParserRuleCall_2_1_0; }
		
		//progInOutVars+=InputOutputVarDeclaration
		public Assignment getProgInOutVarsAssignment_2_2() { return cProgInOutVarsAssignment_2_2; }
		
		//InputOutputVarDeclaration
		public RuleCall getProgInOutVarsInputOutputVarDeclarationParserRuleCall_2_2_0() { return cProgInOutVarsInputOutputVarDeclarationParserRuleCall_2_2_0; }
		
		//progVars+=VarDeclaration
		public Assignment getProgVarsAssignment_2_3() { return cProgVarsAssignment_2_3; }
		
		//VarDeclaration
		public RuleCall getProgVarsVarDeclarationParserRuleCall_2_3_0() { return cProgVarsVarDeclarationParserRuleCall_2_3_0; }
		
		//progTempVars+=TempVarDeclaration
		public Assignment getProgTempVarsAssignment_2_4() { return cProgTempVarsAssignment_2_4; }
		
		//TempVarDeclaration
		public RuleCall getProgTempVarsTempVarDeclarationParserRuleCall_2_4_0() { return cProgTempVarsTempVarDeclarationParserRuleCall_2_4_0; }
		
		//progExternVars+=ExternalVarDeclaration
		public Assignment getProgExternVarsAssignment_2_5() { return cProgExternVarsAssignment_2_5; }
		
		//ExternalVarDeclaration
		public RuleCall getProgExternVarsExternalVarDeclarationParserRuleCall_2_5_0() { return cProgExternVarsExternalVarDeclarationParserRuleCall_2_5_0; }
		
		//(processes+=Process )*
		public Assignment getProcessesAssignment_3() { return cProcessesAssignment_3; }
		
		//Process
		public RuleCall getProcessesProcessParserRuleCall_3_0() { return cProcessesProcessParserRuleCall_3_0; }
		
		//'END_PROGRAM'
		public Keyword getEND_PROGRAMKeyword_4() { return cEND_PROGRAMKeyword_4; }
	}
	public class FunctionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.FunctionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFUNCTION_BLOCKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFbInVarsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cFbInVarsInputVarDeclarationParserRuleCall_2_0_0 = (RuleCall)cFbInVarsAssignment_2_0.eContents().get(0);
		private final Assignment cFbOutVarsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cFbOutVarsOutputVarDeclarationParserRuleCall_2_1_0 = (RuleCall)cFbOutVarsAssignment_2_1.eContents().get(0);
		private final Assignment cFbInOutVarsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cFbInOutVarsInputOutputVarDeclarationParserRuleCall_2_2_0 = (RuleCall)cFbInOutVarsAssignment_2_2.eContents().get(0);
		private final Assignment cFbVarsAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cFbVarsVarDeclarationParserRuleCall_2_3_0 = (RuleCall)cFbVarsAssignment_2_3.eContents().get(0);
		private final Assignment cFbTempVarsAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cFbTempVarsTempVarDeclarationParserRuleCall_2_4_0 = (RuleCall)cFbTempVarsAssignment_2_4.eContents().get(0);
		private final Assignment cFbExternVarsAssignment_2_5 = (Assignment)cAlternatives_2.eContents().get(5);
		private final RuleCall cFbExternVarsExternalVarDeclarationParserRuleCall_2_5_0 = (RuleCall)cFbExternVarsAssignment_2_5.eContents().get(0);
		private final Assignment cProcessesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProcessesProcessParserRuleCall_3_0 = (RuleCall)cProcessesAssignment_3.eContents().get(0);
		private final Keyword cEND_FUNCTION_BLOCKKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* ======================= END Program ======================= */
		///* ======================= START FB ======================= */
		//FunctionBlock:
		//    'FUNCTION_BLOCK' name=ID
		//        (
		//            fbInVars+=InputVarDeclaration |
		//            fbOutVars+=OutputVarDeclaration |
		//            fbInOutVars+=InputOutputVarDeclaration |
		//            fbVars+=VarDeclaration |
		//            fbTempVars+=TempVarDeclaration |
		//            fbExternVars+=ExternalVarDeclaration
		//        )*
		//        (processes+=Process )*
		//    'END_FUNCTION_BLOCK';
		@Override public ParserRule getRule() { return rule; }
		
		//'FUNCTION_BLOCK' name=ID
		//    (
		//        fbInVars+=InputVarDeclaration |
		//        fbOutVars+=OutputVarDeclaration |
		//        fbInOutVars+=InputOutputVarDeclaration |
		//        fbVars+=VarDeclaration |
		//        fbTempVars+=TempVarDeclaration |
		//        fbExternVars+=ExternalVarDeclaration
		//    )*
		//    (processes+=Process )*
		//'END_FUNCTION_BLOCK'
		public Group getGroup() { return cGroup; }
		
		//'FUNCTION_BLOCK'
		public Keyword getFUNCTION_BLOCKKeyword_0() { return cFUNCTION_BLOCKKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(
		//    fbInVars+=InputVarDeclaration |
		//    fbOutVars+=OutputVarDeclaration |
		//    fbInOutVars+=InputOutputVarDeclaration |
		//    fbVars+=VarDeclaration |
		//    fbTempVars+=TempVarDeclaration |
		//    fbExternVars+=ExternalVarDeclaration
		//)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//fbInVars+=InputVarDeclaration
		public Assignment getFbInVarsAssignment_2_0() { return cFbInVarsAssignment_2_0; }
		
		//InputVarDeclaration
		public RuleCall getFbInVarsInputVarDeclarationParserRuleCall_2_0_0() { return cFbInVarsInputVarDeclarationParserRuleCall_2_0_0; }
		
		//fbOutVars+=OutputVarDeclaration
		public Assignment getFbOutVarsAssignment_2_1() { return cFbOutVarsAssignment_2_1; }
		
		//OutputVarDeclaration
		public RuleCall getFbOutVarsOutputVarDeclarationParserRuleCall_2_1_0() { return cFbOutVarsOutputVarDeclarationParserRuleCall_2_1_0; }
		
		//fbInOutVars+=InputOutputVarDeclaration
		public Assignment getFbInOutVarsAssignment_2_2() { return cFbInOutVarsAssignment_2_2; }
		
		//InputOutputVarDeclaration
		public RuleCall getFbInOutVarsInputOutputVarDeclarationParserRuleCall_2_2_0() { return cFbInOutVarsInputOutputVarDeclarationParserRuleCall_2_2_0; }
		
		//fbVars+=VarDeclaration
		public Assignment getFbVarsAssignment_2_3() { return cFbVarsAssignment_2_3; }
		
		//VarDeclaration
		public RuleCall getFbVarsVarDeclarationParserRuleCall_2_3_0() { return cFbVarsVarDeclarationParserRuleCall_2_3_0; }
		
		//fbTempVars+=TempVarDeclaration
		public Assignment getFbTempVarsAssignment_2_4() { return cFbTempVarsAssignment_2_4; }
		
		//TempVarDeclaration
		public RuleCall getFbTempVarsTempVarDeclarationParserRuleCall_2_4_0() { return cFbTempVarsTempVarDeclarationParserRuleCall_2_4_0; }
		
		//fbExternVars+=ExternalVarDeclaration
		public Assignment getFbExternVarsAssignment_2_5() { return cFbExternVarsAssignment_2_5; }
		
		//ExternalVarDeclaration
		public RuleCall getFbExternVarsExternalVarDeclarationParserRuleCall_2_5_0() { return cFbExternVarsExternalVarDeclarationParserRuleCall_2_5_0; }
		
		//(processes+=Process )*
		public Assignment getProcessesAssignment_3() { return cProcessesAssignment_3; }
		
		//Process
		public RuleCall getProcessesProcessParserRuleCall_3_0() { return cProcessesProcessParserRuleCall_3_0; }
		
		//'END_FUNCTION_BLOCK'
		public Keyword getEND_FUNCTION_BLOCKKeyword_4() { return cEND_FUNCTION_BLOCKKeyword_4; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFUNCTIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeDataTypeNameParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cFunInVarsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cFunInVarsInputVarDeclarationParserRuleCall_4_0_0 = (RuleCall)cFunInVarsAssignment_4_0.eContents().get(0);
		private final Assignment cFunOutVarsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cFunOutVarsOutputVarDeclarationParserRuleCall_4_1_0 = (RuleCall)cFunOutVarsAssignment_4_1.eContents().get(0);
		private final Assignment cFunInOutVarsAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cFunInOutVarsInputOutputVarDeclarationParserRuleCall_4_2_0 = (RuleCall)cFunInOutVarsAssignment_4_2.eContents().get(0);
		private final Assignment cFunVarsAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final RuleCall cFunVarsVarDeclarationParserRuleCall_4_3_0 = (RuleCall)cFunVarsAssignment_4_3.eContents().get(0);
		private final Assignment cStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementStatementListParserRuleCall_5_0 = (RuleCall)cStatementAssignment_5.eContents().get(0);
		private final Keyword cEND_FUNCTIONKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///* ======================= END FB ======================= */
		///* ======================= START Function ======================= */
		//Function:
		//    'FUNCTION' name=ID ':' type=DataTypeName
		//        (
		//            funInVars+=InputVarDeclaration |
		//            funOutVars+=OutputVarDeclaration |
		//            funInOutVars+=InputOutputVarDeclaration |
		//            funVars+=VarDeclaration
		//        )*
		//        statement=StatementList
		//    'END_FUNCTION'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'FUNCTION' name=ID ':' type=DataTypeName
		//    (
		//        funInVars+=InputVarDeclaration |
		//        funOutVars+=OutputVarDeclaration |
		//        funInOutVars+=InputOutputVarDeclaration |
		//        funVars+=VarDeclaration
		//    )*
		//    statement=StatementList
		//'END_FUNCTION'
		public Group getGroup() { return cGroup; }
		
		//'FUNCTION'
		public Keyword getFUNCTIONKeyword_0() { return cFUNCTIONKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=DataTypeName
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//DataTypeName
		public RuleCall getTypeDataTypeNameParserRuleCall_3_0() { return cTypeDataTypeNameParserRuleCall_3_0; }
		
		//(
		//    funInVars+=InputVarDeclaration |
		//    funOutVars+=OutputVarDeclaration |
		//    funInOutVars+=InputOutputVarDeclaration |
		//    funVars+=VarDeclaration
		//)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//funInVars+=InputVarDeclaration
		public Assignment getFunInVarsAssignment_4_0() { return cFunInVarsAssignment_4_0; }
		
		//InputVarDeclaration
		public RuleCall getFunInVarsInputVarDeclarationParserRuleCall_4_0_0() { return cFunInVarsInputVarDeclarationParserRuleCall_4_0_0; }
		
		//funOutVars+=OutputVarDeclaration
		public Assignment getFunOutVarsAssignment_4_1() { return cFunOutVarsAssignment_4_1; }
		
		//OutputVarDeclaration
		public RuleCall getFunOutVarsOutputVarDeclarationParserRuleCall_4_1_0() { return cFunOutVarsOutputVarDeclarationParserRuleCall_4_1_0; }
		
		//funInOutVars+=InputOutputVarDeclaration
		public Assignment getFunInOutVarsAssignment_4_2() { return cFunInOutVarsAssignment_4_2; }
		
		//InputOutputVarDeclaration
		public RuleCall getFunInOutVarsInputOutputVarDeclarationParserRuleCall_4_2_0() { return cFunInOutVarsInputOutputVarDeclarationParserRuleCall_4_2_0; }
		
		//funVars+=VarDeclaration
		public Assignment getFunVarsAssignment_4_3() { return cFunVarsAssignment_4_3; }
		
		//VarDeclaration
		public RuleCall getFunVarsVarDeclarationParserRuleCall_4_3_0() { return cFunVarsVarDeclarationParserRuleCall_4_3_0; }
		
		//statement=StatementList
		public Assignment getStatementAssignment_5() { return cStatementAssignment_5; }
		
		//StatementList
		public RuleCall getStatementStatementListParserRuleCall_5_0() { return cStatementStatementListParserRuleCall_5_0; }
		
		//'END_FUNCTION'
		public Keyword getEND_FUNCTIONKeyword_6() { return cEND_FUNCTIONKeyword_6; }
	}
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROCESSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cProcInVarsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cProcInVarsInputVarDeclarationParserRuleCall_2_0_0 = (RuleCall)cProcInVarsAssignment_2_0.eContents().get(0);
		private final Assignment cProcOutVarsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cProcOutVarsOutputVarDeclarationParserRuleCall_2_1_0 = (RuleCall)cProcOutVarsAssignment_2_1.eContents().get(0);
		private final Assignment cProcInOutVarsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cProcInOutVarsInputOutputVarDeclarationParserRuleCall_2_2_0 = (RuleCall)cProcInOutVarsAssignment_2_2.eContents().get(0);
		private final Assignment cProcProcessVarsAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cProcProcessVarsProcessVarDeclarationParserRuleCall_2_3_0 = (RuleCall)cProcProcessVarsAssignment_2_3.eContents().get(0);
		private final Assignment cProcVarsAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cProcVarsVarDeclarationParserRuleCall_2_4_0 = (RuleCall)cProcVarsAssignment_2_4.eContents().get(0);
		private final Assignment cProcTempVarsAssignment_2_5 = (Assignment)cAlternatives_2.eContents().get(5);
		private final RuleCall cProcTempVarsTempVarDeclarationParserRuleCall_2_5_0 = (RuleCall)cProcTempVarsAssignment_2_5.eContents().get(0);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesStateParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		private final Keyword cEND_PROCESSKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		///* ======================= END Function ======================= */
		///* ======================= START Process and State  ======================= */
		//Process:
		//    'PROCESS' name=ID
		//        (
		//            procInVars+=InputVarDeclaration |
		//            procOutVars+=OutputVarDeclaration |
		//            procInOutVars+=InputOutputVarDeclaration |
		//            procProcessVars+=ProcessVarDeclaration |
		//            procVars+=VarDeclaration |
		//            procTempVars+=TempVarDeclaration
		//        )*
		//        (states+=State)*
		//    'END_PROCESS';
		@Override public ParserRule getRule() { return rule; }
		
		//'PROCESS' name=ID
		//    (
		//        procInVars+=InputVarDeclaration |
		//        procOutVars+=OutputVarDeclaration |
		//        procInOutVars+=InputOutputVarDeclaration |
		//        procProcessVars+=ProcessVarDeclaration |
		//        procVars+=VarDeclaration |
		//        procTempVars+=TempVarDeclaration
		//    )*
		//    (states+=State)*
		//'END_PROCESS'
		public Group getGroup() { return cGroup; }
		
		//'PROCESS'
		public Keyword getPROCESSKeyword_0() { return cPROCESSKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(
		//    procInVars+=InputVarDeclaration |
		//    procOutVars+=OutputVarDeclaration |
		//    procInOutVars+=InputOutputVarDeclaration |
		//    procProcessVars+=ProcessVarDeclaration |
		//    procVars+=VarDeclaration |
		//    procTempVars+=TempVarDeclaration
		//)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//procInVars+=InputVarDeclaration
		public Assignment getProcInVarsAssignment_2_0() { return cProcInVarsAssignment_2_0; }
		
		//InputVarDeclaration
		public RuleCall getProcInVarsInputVarDeclarationParserRuleCall_2_0_0() { return cProcInVarsInputVarDeclarationParserRuleCall_2_0_0; }
		
		//procOutVars+=OutputVarDeclaration
		public Assignment getProcOutVarsAssignment_2_1() { return cProcOutVarsAssignment_2_1; }
		
		//OutputVarDeclaration
		public RuleCall getProcOutVarsOutputVarDeclarationParserRuleCall_2_1_0() { return cProcOutVarsOutputVarDeclarationParserRuleCall_2_1_0; }
		
		//procInOutVars+=InputOutputVarDeclaration
		public Assignment getProcInOutVarsAssignment_2_2() { return cProcInOutVarsAssignment_2_2; }
		
		//InputOutputVarDeclaration
		public RuleCall getProcInOutVarsInputOutputVarDeclarationParserRuleCall_2_2_0() { return cProcInOutVarsInputOutputVarDeclarationParserRuleCall_2_2_0; }
		
		//procProcessVars+=ProcessVarDeclaration
		public Assignment getProcProcessVarsAssignment_2_3() { return cProcProcessVarsAssignment_2_3; }
		
		//ProcessVarDeclaration
		public RuleCall getProcProcessVarsProcessVarDeclarationParserRuleCall_2_3_0() { return cProcProcessVarsProcessVarDeclarationParserRuleCall_2_3_0; }
		
		//procVars+=VarDeclaration
		public Assignment getProcVarsAssignment_2_4() { return cProcVarsAssignment_2_4; }
		
		//VarDeclaration
		public RuleCall getProcVarsVarDeclarationParserRuleCall_2_4_0() { return cProcVarsVarDeclarationParserRuleCall_2_4_0; }
		
		//procTempVars+=TempVarDeclaration
		public Assignment getProcTempVarsAssignment_2_5() { return cProcTempVarsAssignment_2_5; }
		
		//TempVarDeclaration
		public RuleCall getProcTempVarsTempVarDeclarationParserRuleCall_2_5_0() { return cProcTempVarsTempVarDeclarationParserRuleCall_2_5_0; }
		
		//(states+=State)*
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_3_0() { return cStatesStateParserRuleCall_3_0; }
		
		//'END_PROCESS'
		public Keyword getEND_PROCESSKeyword_4() { return cEND_PROCESSKeyword_4; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSTATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cLoopedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cLoopedLOOPEDKeyword_2_0 = (Keyword)cLoopedAssignment_2.eContents().get(0);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementListParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Assignment cTimeoutAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTimeoutTimeoutStatementParserRuleCall_4_0 = (RuleCall)cTimeoutAssignment_4.eContents().get(0);
		private final Keyword cEND_STATEKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//State:
		//    'STATE' name=ID (looped?='LOOPED')?
		//        statement=StatementList
		//        timeout=TimeoutStatement?
		//    'END_STATE';
		@Override public ParserRule getRule() { return rule; }
		
		//'STATE' name=ID (looped?='LOOPED')?
		//    statement=StatementList
		//    timeout=TimeoutStatement?
		//'END_STATE'
		public Group getGroup() { return cGroup; }
		
		//'STATE'
		public Keyword getSTATEKeyword_0() { return cSTATEKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(looped?='LOOPED')?
		public Assignment getLoopedAssignment_2() { return cLoopedAssignment_2; }
		
		//'LOOPED'
		public Keyword getLoopedLOOPEDKeyword_2_0() { return cLoopedLOOPEDKeyword_2_0; }
		
		//statement=StatementList
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//StatementList
		public RuleCall getStatementStatementListParserRuleCall_3_0() { return cStatementStatementListParserRuleCall_3_0; }
		
		//timeout=TimeoutStatement?
		public Assignment getTimeoutAssignment_4() { return cTimeoutAssignment_4; }
		
		//TimeoutStatement
		public RuleCall getTimeoutTimeoutStatementParserRuleCall_4_0() { return cTimeoutTimeoutStatementParserRuleCall_4_0; }
		
		//'END_STATE'
		public Keyword getEND_STATEKeyword_5() { return cEND_STATEKeyword_5; }
	}
	public class SetStateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.SetStateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetStateStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSETKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cSTATEKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cStateAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final CrossReference cStateStateCrossReference_2_0_1_0 = (CrossReference)cStateAssignment_2_0_1.eContents().get(0);
		private final RuleCall cStateStateIDTerminalRuleCall_2_0_1_0_1 = (RuleCall)cStateStateCrossReference_2_0_1_0.eContents().get(1);
		private final Assignment cNextAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cNextNEXTKeyword_2_1_0 = (Keyword)cNextAssignment_2_1.eContents().get(0);
		
		///* ======================= END Process and State  ======================= */
		///* ======================= START poST Statements ======================= */
		//SetStateStatement:
		//    {SetStateStatement} 'SET' ('STATE' state=[State] | next?='NEXT');
		@Override public ParserRule getRule() { return rule; }
		
		//{SetStateStatement} 'SET' ('STATE' state=[State] | next?='NEXT')
		public Group getGroup() { return cGroup; }
		
		//{SetStateStatement}
		public Action getSetStateStatementAction_0() { return cSetStateStatementAction_0; }
		
		//'SET'
		public Keyword getSETKeyword_1() { return cSETKeyword_1; }
		
		//('STATE' state=[State] | next?='NEXT')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'STATE' state=[State]
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'STATE'
		public Keyword getSTATEKeyword_2_0_0() { return cSTATEKeyword_2_0_0; }
		
		//state=[State]
		public Assignment getStateAssignment_2_0_1() { return cStateAssignment_2_0_1; }
		
		//[State]
		public CrossReference getStateStateCrossReference_2_0_1_0() { return cStateStateCrossReference_2_0_1_0; }
		
		//ID
		public RuleCall getStateStateIDTerminalRuleCall_2_0_1_0_1() { return cStateStateIDTerminalRuleCall_2_0_1_0_1; }
		
		//next?='NEXT'
		public Assignment getNextAssignment_2_1() { return cNextAssignment_2_1; }
		
		//'NEXT'
		public Keyword getNextNEXTKeyword_2_1_0() { return cNextNEXTKeyword_2_1_0; }
	}
	public class ProcessStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ProcessStatements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStartProcessStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStopProcessStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cErrorProcessStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ProcessStatements:
		//    StartProcessStatement | StopProcessStatement | ErrorProcessStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//StartProcessStatement | StopProcessStatement | ErrorProcessStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StartProcessStatement
		public RuleCall getStartProcessStatementParserRuleCall_0() { return cStartProcessStatementParserRuleCall_0; }
		
		//StopProcessStatement
		public RuleCall getStopProcessStatementParserRuleCall_1() { return cStopProcessStatementParserRuleCall_1; }
		
		//ErrorProcessStatement
		public RuleCall getErrorProcessStatementParserRuleCall_2() { return cErrorProcessStatementParserRuleCall_2; }
	}
	public class ProcessStatusExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ProcessStatusExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPROCESSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cProcessAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cProcessVariableCrossReference_1_0 = (CrossReference)cProcessAssignment_1.eContents().get(0);
		private final RuleCall cProcessVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cProcessVariableCrossReference_1_0.eContents().get(1);
		private final Keyword cINKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSTATEKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cActiveAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final Keyword cActiveACTIVEKeyword_4_0_0 = (Keyword)cActiveAssignment_4_0.eContents().get(0);
		private final Assignment cInactiveAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final Keyword cInactiveINACTIVEKeyword_4_1_0 = (Keyword)cInactiveAssignment_4_1.eContents().get(0);
		private final Assignment cStopAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final Keyword cStopSTOPKeyword_4_2_0 = (Keyword)cStopAssignment_4_2.eContents().get(0);
		private final Assignment cErrorAssignment_4_3 = (Assignment)cAlternatives_4.eContents().get(3);
		private final Keyword cErrorERRORKeyword_4_3_0 = (Keyword)cErrorAssignment_4_3.eContents().get(0);
		
		//ProcessStatusExpression:
		//    'PROCESS' process=[Variable] 'IN' 'STATE' (active?='ACTIVE' | inactive?="INACTIVE" | stop?='STOP' | error?='ERROR');
		@Override public ParserRule getRule() { return rule; }
		
		//'PROCESS' process=[Variable] 'IN' 'STATE' (active?='ACTIVE' | inactive?="INACTIVE" | stop?='STOP' | error?='ERROR')
		public Group getGroup() { return cGroup; }
		
		//'PROCESS'
		public Keyword getPROCESSKeyword_0() { return cPROCESSKeyword_0; }
		
		//process=[Variable]
		public Assignment getProcessAssignment_1() { return cProcessAssignment_1; }
		
		//[Variable]
		public CrossReference getProcessVariableCrossReference_1_0() { return cProcessVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getProcessVariableIDTerminalRuleCall_1_0_1() { return cProcessVariableIDTerminalRuleCall_1_0_1; }
		
		//'IN'
		public Keyword getINKeyword_2() { return cINKeyword_2; }
		
		//'STATE'
		public Keyword getSTATEKeyword_3() { return cSTATEKeyword_3; }
		
		//(active?='ACTIVE' | inactive?="INACTIVE" | stop?='STOP' | error?='ERROR')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//active?='ACTIVE'
		public Assignment getActiveAssignment_4_0() { return cActiveAssignment_4_0; }
		
		//'ACTIVE'
		public Keyword getActiveACTIVEKeyword_4_0_0() { return cActiveACTIVEKeyword_4_0_0; }
		
		//inactive?="INACTIVE"
		public Assignment getInactiveAssignment_4_1() { return cInactiveAssignment_4_1; }
		
		//"INACTIVE"
		public Keyword getInactiveINACTIVEKeyword_4_1_0() { return cInactiveINACTIVEKeyword_4_1_0; }
		
		//stop?='STOP'
		public Assignment getStopAssignment_4_2() { return cStopAssignment_4_2; }
		
		//'STOP'
		public Keyword getStopSTOPKeyword_4_2_0() { return cStopSTOPKeyword_4_2_0; }
		
		//error?='ERROR'
		public Assignment getErrorAssignment_4_3() { return cErrorAssignment_4_3; }
		
		//'ERROR'
		public Keyword getErrorERRORKeyword_4_3_0() { return cErrorERRORKeyword_4_3_0; }
	}
	public class StartProcessStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.StartProcessStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStartProcessStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cSTARTKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cPROCESSKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cProcessAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final CrossReference cProcessVariableCrossReference_0_1_2_0 = (CrossReference)cProcessAssignment_0_1_2.eContents().get(0);
		private final RuleCall cProcessVariableIDTerminalRuleCall_0_1_2_0_1 = (RuleCall)cProcessVariableCrossReference_0_1_2_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStartProcessStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cRESTARTKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//StartProcessStatement:
		//    {StartProcessStatement} ('START' 'PROCESS' process=[Variable]) | {StartProcessStatement} 'RESTART';
		@Override public ParserRule getRule() { return rule; }
		
		//{StartProcessStatement} ('START' 'PROCESS' process=[Variable]) | {StartProcessStatement} 'RESTART'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StartProcessStatement} ('START' 'PROCESS' process=[Variable])
		public Group getGroup_0() { return cGroup_0; }
		
		//{StartProcessStatement}
		public Action getStartProcessStatementAction_0_0() { return cStartProcessStatementAction_0_0; }
		
		//('START' 'PROCESS' process=[Variable])
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'START'
		public Keyword getSTARTKeyword_0_1_0() { return cSTARTKeyword_0_1_0; }
		
		//'PROCESS'
		public Keyword getPROCESSKeyword_0_1_1() { return cPROCESSKeyword_0_1_1; }
		
		//process=[Variable]
		public Assignment getProcessAssignment_0_1_2() { return cProcessAssignment_0_1_2; }
		
		//[Variable]
		public CrossReference getProcessVariableCrossReference_0_1_2_0() { return cProcessVariableCrossReference_0_1_2_0; }
		
		//ID
		public RuleCall getProcessVariableIDTerminalRuleCall_0_1_2_0_1() { return cProcessVariableIDTerminalRuleCall_0_1_2_0_1; }
		
		//{StartProcessStatement} 'RESTART'
		public Group getGroup_1() { return cGroup_1; }
		
		//{StartProcessStatement}
		public Action getStartProcessStatementAction_1_0() { return cStartProcessStatementAction_1_0; }
		
		//'RESTART'
		public Keyword getRESTARTKeyword_1_1() { return cRESTARTKeyword_1_1; }
	}
	public class StopProcessStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.StopProcessStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStopProcessStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSTOPKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPROCESSKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cProcessAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cProcessVariableCrossReference_2_1_0 = (CrossReference)cProcessAssignment_2_1.eContents().get(0);
		private final RuleCall cProcessVariableIDTerminalRuleCall_2_1_0_1 = (RuleCall)cProcessVariableCrossReference_2_1_0.eContents().get(1);
		
		//StopProcessStatement:
		//    {StopProcessStatement} 'STOP' ('PROCESS' process=[Variable])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{StopProcessStatement} 'STOP' ('PROCESS' process=[Variable])?
		public Group getGroup() { return cGroup; }
		
		//{StopProcessStatement}
		public Action getStopProcessStatementAction_0() { return cStopProcessStatementAction_0; }
		
		//'STOP'
		public Keyword getSTOPKeyword_1() { return cSTOPKeyword_1; }
		
		//('PROCESS' process=[Variable])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'PROCESS'
		public Keyword getPROCESSKeyword_2_0() { return cPROCESSKeyword_2_0; }
		
		//process=[Variable]
		public Assignment getProcessAssignment_2_1() { return cProcessAssignment_2_1; }
		
		//[Variable]
		public CrossReference getProcessVariableCrossReference_2_1_0() { return cProcessVariableCrossReference_2_1_0; }
		
		//ID
		public RuleCall getProcessVariableIDTerminalRuleCall_2_1_0_1() { return cProcessVariableIDTerminalRuleCall_2_1_0_1; }
	}
	public class ErrorProcessStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ErrorProcessStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cErrorProcessStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cERRORKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPROCESSKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cProcessAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cProcessVariableCrossReference_2_1_0 = (CrossReference)cProcessAssignment_2_1.eContents().get(0);
		private final RuleCall cProcessVariableIDTerminalRuleCall_2_1_0_1 = (RuleCall)cProcessVariableCrossReference_2_1_0.eContents().get(1);
		
		//ErrorProcessStatement:
		//    {ErrorProcessStatement} 'ERROR' ('PROCESS' process=[Variable])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ErrorProcessStatement} 'ERROR' ('PROCESS' process=[Variable])?
		public Group getGroup() { return cGroup; }
		
		//{ErrorProcessStatement}
		public Action getErrorProcessStatementAction_0() { return cErrorProcessStatementAction_0; }
		
		//'ERROR'
		public Keyword getERRORKeyword_1() { return cERRORKeyword_1; }
		
		//('PROCESS' process=[Variable])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'PROCESS'
		public Keyword getPROCESSKeyword_2_0() { return cPROCESSKeyword_2_0; }
		
		//process=[Variable]
		public Assignment getProcessAssignment_2_1() { return cProcessAssignment_2_1; }
		
		//[Variable]
		public CrossReference getProcessVariableCrossReference_2_1_0() { return cProcessVariableCrossReference_2_1_0; }
		
		//ID
		public RuleCall getProcessVariableIDTerminalRuleCall_2_1_0_1() { return cProcessVariableIDTerminalRuleCall_2_1_0_1; }
	}
	public class TimeoutStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.TimeoutStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTIMEOUTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cConstAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cConstConstantParserRuleCall_1_0_0 = (RuleCall)cConstAssignment_1_0.eContents().get(0);
		private final Assignment cVariableAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cVariableSymbolicVariableCrossReference_1_1_0 = (CrossReference)cVariableAssignment_1_1.eContents().get(0);
		private final RuleCall cVariableSymbolicVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVariableSymbolicVariableCrossReference_1_1_0.eContents().get(1);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementListParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cEND_TIMEOUTKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TimeoutStatement:
		//    'TIMEOUT' (const=Constant | variable=[SymbolicVariable]) 'THEN'
		//        statement=StatementList
		//    'END_TIMEOUT';
		@Override public ParserRule getRule() { return rule; }
		
		//'TIMEOUT' (const=Constant | variable=[SymbolicVariable]) 'THEN'
		//    statement=StatementList
		//'END_TIMEOUT'
		public Group getGroup() { return cGroup; }
		
		//'TIMEOUT'
		public Keyword getTIMEOUTKeyword_0() { return cTIMEOUTKeyword_0; }
		
		//(const=Constant | variable=[SymbolicVariable])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//const=Constant
		public Assignment getConstAssignment_1_0() { return cConstAssignment_1_0; }
		
		//Constant
		public RuleCall getConstConstantParserRuleCall_1_0_0() { return cConstConstantParserRuleCall_1_0_0; }
		
		//variable=[SymbolicVariable]
		public Assignment getVariableAssignment_1_1() { return cVariableAssignment_1_1; }
		
		//[SymbolicVariable]
		public CrossReference getVariableSymbolicVariableCrossReference_1_1_0() { return cVariableSymbolicVariableCrossReference_1_1_0; }
		
		//ID
		public RuleCall getVariableSymbolicVariableIDTerminalRuleCall_1_1_0_1() { return cVariableSymbolicVariableIDTerminalRuleCall_1_1_0_1; }
		
		//'THEN'
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }
		
		//statement=StatementList
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//StatementList
		public RuleCall getStatementStatementListParserRuleCall_3_0() { return cStatementStatementListParserRuleCall_3_0; }
		
		//'END_TIMEOUT'
		public Keyword getEND_TIMEOUTKeyword_4() { return cEND_TIMEOUTKeyword_4; }
	}
	public class ResetTimerStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ResetTimerStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cResetTimerStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRESETKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTIMERKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ResetTimerStatement:
		//    {ResetTimerStatement} 'RESET' 'TIMER';
		@Override public ParserRule getRule() { return rule; }
		
		//{ResetTimerStatement} 'RESET' 'TIMER'
		public Group getGroup() { return cGroup; }
		
		//{ResetTimerStatement}
		public Action getResetTimerStatementAction_0() { return cResetTimerStatementAction_0; }
		
		//'RESET'
		public Keyword getRESETKeyword_1() { return cRESETKeyword_1; }
		
		//'TIMER'
		public Keyword getTIMERKeyword_2() { return cTIMERKeyword_2; }
	}
	public class FBInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.FBInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFbAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFbSymbolicVariableCrossReference_0_0 = (CrossReference)cFbAssignment_0.eContents().get(0);
		private final RuleCall cFbSymbolicVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cFbSymbolicVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsParamAssignmentElementsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///* ======================= END poST Statements ======================= */
		///* ======================= START Subprogram Call ======================= */
		//FBInvocation:
		//    fb=[SymbolicVariable] '(' (args=ParamAssignmentElements)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//fb=[SymbolicVariable] '(' (args=ParamAssignmentElements)? ')'
		public Group getGroup() { return cGroup; }
		
		//fb=[SymbolicVariable]
		public Assignment getFbAssignment_0() { return cFbAssignment_0; }
		
		//[SymbolicVariable]
		public CrossReference getFbSymbolicVariableCrossReference_0_0() { return cFbSymbolicVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getFbSymbolicVariableIDTerminalRuleCall_0_0_1() { return cFbSymbolicVariableIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(args=ParamAssignmentElements)?
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//ParamAssignmentElements
		public RuleCall getArgsParamAssignmentElementsParserRuleCall_2_0() { return cArgsParamAssignmentElementsParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionFunctionCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionFunctionIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionFunctionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsParamAssignmentElementsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//    function=[Function] '(' (args=ParamAssignmentElements)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//function=[Function] '(' (args=ParamAssignmentElements)? ')'
		public Group getGroup() { return cGroup; }
		
		//function=[Function]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//[Function]
		public CrossReference getFunctionFunctionCrossReference_0_0() { return cFunctionFunctionCrossReference_0_0; }
		
		//ID
		public RuleCall getFunctionFunctionIDTerminalRuleCall_0_0_1() { return cFunctionFunctionIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(args=ParamAssignmentElements)?
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//ParamAssignmentElements
		public RuleCall getArgsParamAssignmentElementsParserRuleCall_2_0() { return cArgsParamAssignmentElementsParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ParamAssignmentElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ParamAssignmentElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElementsParamAssignmentParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsParamAssignmentParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//ParamAssignmentElements:
		//    elements+=ParamAssignment (',' elements+=ParamAssignment)*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=ParamAssignment (',' elements+=ParamAssignment)*
		public Group getGroup() { return cGroup; }
		
		//elements+=ParamAssignment
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//ParamAssignment
		public RuleCall getElementsParamAssignmentParserRuleCall_0_0() { return cElementsParamAssignmentParserRuleCall_0_0; }
		
		//(',' elements+=ParamAssignment)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//elements+=ParamAssignment
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//ParamAssignment
		public RuleCall getElementsParamAssignmentParserRuleCall_1_1_0() { return cElementsParamAssignmentParserRuleCall_1_1_0; }
	}
	public class ParamAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ParamAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableSymbolicVariableCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableSymbolicVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableSymbolicVariableCrossReference_0_0.eContents().get(1);
		private final Assignment cAssigAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAssigAssignmentTypeEnumRuleCall_1_0 = (RuleCall)cAssigAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ParamAssignment:
		//    variable=[SymbolicVariable] assig=AssignmentType value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[SymbolicVariable] assig=AssignmentType value=Expression
		public Group getGroup() { return cGroup; }
		
		//variable=[SymbolicVariable]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[SymbolicVariable]
		public CrossReference getVariableSymbolicVariableCrossReference_0_0() { return cVariableSymbolicVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getVariableSymbolicVariableIDTerminalRuleCall_0_0_1() { return cVariableSymbolicVariableIDTerminalRuleCall_0_0_1; }
		
		//assig=AssignmentType
		public Assignment getAssigAssignment_1() { return cAssigAssignment_1; }
		
		//AssignmentType
		public RuleCall getAssigAssignmentTypeEnumRuleCall_1_0() { return cAssigAssignmentTypeEnumRuleCall_1_0; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOR_OPERATORTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightXorExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		///* ======================= END Subprogram Call ======================= */
		///* ======================= START Expression ======================= */
		//Expression:
		//    XorExpression ({Expression.left=current} OR_OPERATOR right=XorExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XorExpression ({Expression.left=current} OR_OPERATOR right=XorExpression)*
		public Group getGroup() { return cGroup; }
		
		//XorExpression
		public RuleCall getXorExpressionParserRuleCall_0() { return cXorExpressionParserRuleCall_0; }
		
		//({Expression.left=current} OR_OPERATOR right=XorExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }
		
		//OR_OPERATOR
		public RuleCall getOR_OPERATORTerminalRuleCall_1_1() { return cOR_OPERATORTerminalRuleCall_1_1; }
		
		//right=XorExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//XorExpression
		public RuleCall getRightXorExpressionParserRuleCall_1_2_0() { return cRightXorExpressionParserRuleCall_1_2_0; }
	}
	public class XorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.XorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cXorExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cXOR_OPERATORTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//XorExpression:
		//    AndExpression ({XorExpression.left=current} XOR_OPERATOR right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({XorExpression.left=current} XOR_OPERATOR right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({XorExpression.left=current} XOR_OPERATOR right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{XorExpression.left=current}
		public Action getXorExpressionLeftAction_1_0() { return cXorExpressionLeftAction_1_0; }
		
		//XOR_OPERATOR
		public RuleCall getXOR_OPERATORTerminalRuleCall_1_1() { return cXOR_OPERATORTerminalRuleCall_1_1; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cAND_OPERATORTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightCompExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression:
		//    CompExpression ({AndExpression.left=current} AND_OPERATOR right=CompExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//CompExpression ({AndExpression.left=current} AND_OPERATOR right=CompExpression)*
		public Group getGroup() { return cGroup; }
		
		//CompExpression
		public RuleCall getCompExpressionParserRuleCall_0() { return cCompExpressionParserRuleCall_0; }
		
		//({AndExpression.left=current} AND_OPERATOR right=CompExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//AND_OPERATOR
		public RuleCall getAND_OPERATORTerminalRuleCall_1_1() { return cAND_OPERATORTerminalRuleCall_1_1; }
		
		//right=CompExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//CompExpression
		public RuleCall getRightCompExpressionParserRuleCall_1_2_0() { return cRightCompExpressionParserRuleCall_1_2_0; }
	}
	public class CompExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.CompExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEquExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCompExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cCompOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCompOpCompOperatorEnumRuleCall_1_1_0 = (RuleCall)cCompOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEquExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//CompExpression:
		//    EquExpression ({CompExpression.left=current} compOp=CompOperator right=EquExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EquExpression ({CompExpression.left=current} compOp=CompOperator right=EquExpression)*
		public Group getGroup() { return cGroup; }
		
		//EquExpression
		public RuleCall getEquExpressionParserRuleCall_0() { return cEquExpressionParserRuleCall_0; }
		
		//({CompExpression.left=current} compOp=CompOperator right=EquExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{CompExpression.left=current}
		public Action getCompExpressionLeftAction_1_0() { return cCompExpressionLeftAction_1_0; }
		
		//compOp=CompOperator
		public Assignment getCompOpAssignment_1_1() { return cCompOpAssignment_1_1; }
		
		//CompOperator
		public RuleCall getCompOpCompOperatorEnumRuleCall_1_1_0() { return cCompOpCompOperatorEnumRuleCall_1_1_0; }
		
		//right=EquExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//EquExpression
		public RuleCall getRightEquExpressionParserRuleCall_1_2_0() { return cRightEquExpressionParserRuleCall_1_2_0; }
	}
	public class EquExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.EquExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEquExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cEquOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEquOpEquOperatorEnumRuleCall_1_1_0 = (RuleCall)cEquOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAddExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EquExpression:
		//    AddExpression ({EquExpression.left=current} equOp=EquOperator right=AddExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AddExpression ({EquExpression.left=current} equOp=EquOperator right=AddExpression)*
		public Group getGroup() { return cGroup; }
		
		//AddExpression
		public RuleCall getAddExpressionParserRuleCall_0() { return cAddExpressionParserRuleCall_0; }
		
		//({EquExpression.left=current} equOp=EquOperator right=AddExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EquExpression.left=current}
		public Action getEquExpressionLeftAction_1_0() { return cEquExpressionLeftAction_1_0; }
		
		//equOp=EquOperator
		public Assignment getEquOpAssignment_1_1() { return cEquOpAssignment_1_1; }
		
		//EquOperator
		public RuleCall getEquOpEquOperatorEnumRuleCall_1_1_0() { return cEquOpEquOperatorEnumRuleCall_1_1_0; }
		
		//right=AddExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AddExpression
		public RuleCall getRightAddExpressionParserRuleCall_1_2_0() { return cRightAddExpressionParserRuleCall_1_2_0; }
	}
	public class AddExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.AddExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAddExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cAddOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAddOpAddOperatorEnumRuleCall_1_1_0 = (RuleCall)cAddOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMulExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AddExpression:
		//    MulExpression ({AddExpression.left=current} addOp=AddOperator right=MulExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulExpression ({AddExpression.left=current} addOp=AddOperator right=MulExpression)*
		public Group getGroup() { return cGroup; }
		
		//MulExpression
		public RuleCall getMulExpressionParserRuleCall_0() { return cMulExpressionParserRuleCall_0; }
		
		//({AddExpression.left=current} addOp=AddOperator right=MulExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AddExpression.left=current}
		public Action getAddExpressionLeftAction_1_0() { return cAddExpressionLeftAction_1_0; }
		
		//addOp=AddOperator
		public Assignment getAddOpAssignment_1_1() { return cAddOpAssignment_1_1; }
		
		//AddOperator
		public RuleCall getAddOpAddOperatorEnumRuleCall_1_1_0() { return cAddOpAddOperatorEnumRuleCall_1_1_0; }
		
		//right=MulExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MulExpression
		public RuleCall getRightMulExpressionParserRuleCall_1_2_0() { return cRightMulExpressionParserRuleCall_1_2_0; }
	}
	public class MulExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.MulExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPowerExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cMulOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMulOpMulOperatorEnumRuleCall_1_1_0 = (RuleCall)cMulOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPowerExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulExpression:
		//    PowerExpression ({MulExpression.left=current} mulOp=MulOperator right=PowerExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PowerExpression ({MulExpression.left=current} mulOp=MulOperator right=PowerExpression)*
		public Group getGroup() { return cGroup; }
		
		//PowerExpression
		public RuleCall getPowerExpressionParserRuleCall_0() { return cPowerExpressionParserRuleCall_0; }
		
		//({MulExpression.left=current} mulOp=MulOperator right=PowerExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulExpression.left=current}
		public Action getMulExpressionLeftAction_1_0() { return cMulExpressionLeftAction_1_0; }
		
		//mulOp=MulOperator
		public Assignment getMulOpAssignment_1_1() { return cMulOpAssignment_1_1; }
		
		//MulOperator
		public RuleCall getMulOpMulOperatorEnumRuleCall_1_1_0() { return cMulOpMulOperatorEnumRuleCall_1_1_0; }
		
		//right=PowerExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PowerExpression
		public RuleCall getRightPowerExpressionParserRuleCall_1_2_0() { return cRightPowerExpressionParserRuleCall_1_2_0; }
	}
	public class PowerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.PowerExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPowerExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cPOWER_OPERATORTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//PowerExpression:
		//    UnaryExpression ({PowerExpression.left=current} POWER_OPERATOR right=UnaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression ({PowerExpression.left=current} POWER_OPERATOR right=UnaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//({PowerExpression.left=current} POWER_OPERATOR right=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PowerExpression.left=current}
		public Action getPowerExpressionLeftAction_1_0() { return cPowerExpressionLeftAction_1_0; }
		
		//POWER_OPERATOR
		public RuleCall getPOWER_OPERATORTerminalRuleCall_1_1() { return cPOWER_OPERATORTerminalRuleCall_1_1; }
		
		//right=UnaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnaryExpression
		public RuleCall getRightUnaryExpressionParserRuleCall_1_2_0() { return cRightUnaryExpressionParserRuleCall_1_2_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cUnOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUnOpUnaryOperatorEnumRuleCall_1_0_0 = (RuleCall)cUnOpAssignment_1_0.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//UnaryExpression:
		//    PrimaryExpression | (unOp=UnaryOperator right=PrimaryExpression);
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression | (unOp=UnaryOperator right=PrimaryExpression)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//(unOp=UnaryOperator right=PrimaryExpression)
		public Group getGroup_1() { return cGroup_1; }
		
		//unOp=UnaryOperator
		public Assignment getUnOpAssignment_1_0() { return cUnOpAssignment_1_0; }
		
		//UnaryOperator
		public RuleCall getUnOpUnaryOperatorEnumRuleCall_1_0_0() { return cUnOpUnaryOperatorEnumRuleCall_1_0_0; }
		
		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_0() { return cRightPrimaryExpressionParserRuleCall_1_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConstConstantParserRuleCall_0_0 = (RuleCall)cConstAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cVariableSymbolicVariableCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableSymbolicVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableSymbolicVariableCrossReference_1_0.eContents().get(1);
		private final Assignment cArrayAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cArrayArrayVariableParserRuleCall_2_0 = (RuleCall)cArrayAssignment_2.eContents().get(0);
		private final Assignment cProcStatusAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cProcStatusProcessStatusExpressionParserRuleCall_3_0 = (RuleCall)cProcStatusAssignment_3.eContents().get(0);
		private final Assignment cFunCallAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cFunCallFunctionCallParserRuleCall_4_0 = (RuleCall)cFunCallAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cNestExprAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNestExprExpressionParserRuleCall_5_1_0 = (RuleCall)cNestExprAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//PrimaryExpression:
		//    const=Constant | variable=[SymbolicVariable] | array=ArrayVariable | procStatus=ProcessStatusExpression | funCall=FunctionCall | '(' nestExpr=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//const=Constant | variable=[SymbolicVariable] | array=ArrayVariable | procStatus=ProcessStatusExpression | funCall=FunctionCall | '(' nestExpr=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//const=Constant
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }
		
		//Constant
		public RuleCall getConstConstantParserRuleCall_0_0() { return cConstConstantParserRuleCall_0_0; }
		
		//variable=[SymbolicVariable]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[SymbolicVariable]
		public CrossReference getVariableSymbolicVariableCrossReference_1_0() { return cVariableSymbolicVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableSymbolicVariableIDTerminalRuleCall_1_0_1() { return cVariableSymbolicVariableIDTerminalRuleCall_1_0_1; }
		
		//array=ArrayVariable
		public Assignment getArrayAssignment_2() { return cArrayAssignment_2; }
		
		//ArrayVariable
		public RuleCall getArrayArrayVariableParserRuleCall_2_0() { return cArrayArrayVariableParserRuleCall_2_0; }
		
		//procStatus=ProcessStatusExpression
		public Assignment getProcStatusAssignment_3() { return cProcStatusAssignment_3; }
		
		//ProcessStatusExpression
		public RuleCall getProcStatusProcessStatusExpressionParserRuleCall_3_0() { return cProcStatusProcessStatusExpressionParserRuleCall_3_0; }
		
		//funCall=FunctionCall
		public Assignment getFunCallAssignment_4() { return cFunCallAssignment_4; }
		
		//FunctionCall
		public RuleCall getFunCallFunctionCallParserRuleCall_4_0() { return cFunCallFunctionCallParserRuleCall_4_0; }
		
		//'(' nestExpr=Expression ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//nestExpr=Expression
		public Assignment getNestExprAssignment_5_1() { return cNestExprAssignment_5_1; }
		
		//Expression
		public RuleCall getNestExprExpressionParserRuleCall_5_1_0() { return cNestExprExpressionParserRuleCall_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_2() { return cRightParenthesisKeyword_5_2; }
	}
	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.StatementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		///* ======================= END Expression ======================= */
		///* ======================= START ST Statements ======================= */
		//StatementList:
		//    {StatementList} (statements+=Statement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementList} (statements+=Statement)*
		public Group getGroup() { return cGroup; }
		
		//{StatementList}
		public Action getStatementListAction_0() { return cStatementListAction_0; }
		
		//(statements+=Statement)*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cAssignmentStatementParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cSelectionStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIterationStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cFBInvocationParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cSubprogramControlStatementParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cExitStatementParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cProcessStatementsParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final RuleCall cSetStateStatementParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final RuleCall cResetTimerStatementParserRuleCall_8_0 = (RuleCall)cGroup_8.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		
		//Statement:
		//    (AssignmentStatement ';') |
		//    SelectionStatement |
		//    IterationStatement |
		//    (FBInvocation ';') |
		//    (SubprogramControlStatement ';') |
		//    (ExitStatement ';') |
		//    (ProcessStatements ';') |
		//    (SetStateStatement ';') |
		//    (ResetTimerStatement ';');
		@Override public ParserRule getRule() { return rule; }
		
		//(AssignmentStatement ';') |
		//SelectionStatement |
		//IterationStatement |
		//(FBInvocation ';') |
		//(SubprogramControlStatement ';') |
		//(ExitStatement ';') |
		//(ProcessStatements ';') |
		//(SetStateStatement ';') |
		//(ResetTimerStatement ';')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(AssignmentStatement ';')
		public Group getGroup_0() { return cGroup_0; }
		
		//AssignmentStatement
		public RuleCall getAssignmentStatementParserRuleCall_0_0() { return cAssignmentStatementParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//SelectionStatement
		public RuleCall getSelectionStatementParserRuleCall_1() { return cSelectionStatementParserRuleCall_1; }
		
		//IterationStatement
		public RuleCall getIterationStatementParserRuleCall_2() { return cIterationStatementParserRuleCall_2; }
		
		//(FBInvocation ';')
		public Group getGroup_3() { return cGroup_3; }
		
		//FBInvocation
		public RuleCall getFBInvocationParserRuleCall_3_0() { return cFBInvocationParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//(SubprogramControlStatement ';')
		public Group getGroup_4() { return cGroup_4; }
		
		//SubprogramControlStatement
		public RuleCall getSubprogramControlStatementParserRuleCall_4_0() { return cSubprogramControlStatementParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//(ExitStatement ';')
		public Group getGroup_5() { return cGroup_5; }
		
		//ExitStatement
		public RuleCall getExitStatementParserRuleCall_5_0() { return cExitStatementParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
		
		//(ProcessStatements ';')
		public Group getGroup_6() { return cGroup_6; }
		
		//ProcessStatements
		public RuleCall getProcessStatementsParserRuleCall_6_0() { return cProcessStatementsParserRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
		
		//(SetStateStatement ';')
		public Group getGroup_7() { return cGroup_7; }
		
		//SetStateStatement
		public RuleCall getSetStateStatementParserRuleCall_7_0() { return cSetStateStatementParserRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
		
		//(ResetTimerStatement ';')
		public Group getGroup_8() { return cGroup_8; }
		
		//ResetTimerStatement
		public RuleCall getResetTimerStatementParserRuleCall_8_0() { return cResetTimerStatementParserRuleCall_8_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8_1() { return cSemicolonKeyword_8_1; }
	}
	public class AssignmentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.AssignmentStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final CrossReference cVariableSymbolicVariableCrossReference_0_0_0 = (CrossReference)cVariableAssignment_0_0.eContents().get(0);
		private final RuleCall cVariableSymbolicVariableIDTerminalRuleCall_0_0_0_1 = (RuleCall)cVariableSymbolicVariableCrossReference_0_0_0.eContents().get(1);
		private final Assignment cArrayAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cArrayArrayVariableParserRuleCall_0_1_0 = (RuleCall)cArrayAssignment_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AssignmentStatement:
		//    (variable=[SymbolicVariable] | array=ArrayVariable) ':=' value=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//(variable=[SymbolicVariable] | array=ArrayVariable) ':=' value=Expression
		public Group getGroup() { return cGroup; }
		
		//(variable=[SymbolicVariable] | array=ArrayVariable)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//variable=[SymbolicVariable]
		public Assignment getVariableAssignment_0_0() { return cVariableAssignment_0_0; }
		
		//[SymbolicVariable]
		public CrossReference getVariableSymbolicVariableCrossReference_0_0_0() { return cVariableSymbolicVariableCrossReference_0_0_0; }
		
		//ID
		public RuleCall getVariableSymbolicVariableIDTerminalRuleCall_0_0_0_1() { return cVariableSymbolicVariableIDTerminalRuleCall_0_0_0_1; }
		
		//array=ArrayVariable
		public Assignment getArrayAssignment_0_1() { return cArrayAssignment_0_1; }
		
		//ArrayVariable
		public RuleCall getArrayArrayVariableParserRuleCall_0_1_0() { return cArrayArrayVariableParserRuleCall_0_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}
	public class SelectionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.SelectionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCaseStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SelectionStatement:
		//    IfStatement | CaseStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//IfStatement | CaseStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0() { return cIfStatementParserRuleCall_0; }
		
		//CaseStatement
		public RuleCall getCaseStatementParserRuleCall_1() { return cCaseStatementParserRuleCall_1; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIFKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMainCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMainCondExpressionParserRuleCall_1_0 = (RuleCall)cMainCondAssignment_1.eContents().get(0);
		private final Keyword cTHENKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMainStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMainStatementStatementListParserRuleCall_3_0 = (RuleCall)cMainStatementAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cELSIFKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseIfCondAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseIfCondExpressionParserRuleCall_4_1_0 = (RuleCall)cElseIfCondAssignment_4_1.eContents().get(0);
		private final Keyword cTHENKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cElseIfStatementsAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cElseIfStatementsStatementListParserRuleCall_4_3_0 = (RuleCall)cElseIfStatementsAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cELSEKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseStatementAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementStatementListParserRuleCall_5_1_0 = (RuleCall)cElseStatementAssignment_5_1.eContents().get(0);
		private final Keyword cEND_IFKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfStatement:
		//    'IF' mainCond=Expression 'THEN'
		//        mainStatement=StatementList
		//    ('ELSIF' elseIfCond+=Expression 'THEN'
		//        elseIfStatements+=StatementList
		//    )*
		//    ('ELSE'
		//        elseStatement=StatementList
		//    )?
		//    'END_IF';
		@Override public ParserRule getRule() { return rule; }
		
		//'IF' mainCond=Expression 'THEN'
		//    mainStatement=StatementList
		//('ELSIF' elseIfCond+=Expression 'THEN'
		//    elseIfStatements+=StatementList
		//)*
		//('ELSE'
		//    elseStatement=StatementList
		//)?
		//'END_IF'
		public Group getGroup() { return cGroup; }
		
		//'IF'
		public Keyword getIFKeyword_0() { return cIFKeyword_0; }
		
		//mainCond=Expression
		public Assignment getMainCondAssignment_1() { return cMainCondAssignment_1; }
		
		//Expression
		public RuleCall getMainCondExpressionParserRuleCall_1_0() { return cMainCondExpressionParserRuleCall_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_2() { return cTHENKeyword_2; }
		
		//mainStatement=StatementList
		public Assignment getMainStatementAssignment_3() { return cMainStatementAssignment_3; }
		
		//StatementList
		public RuleCall getMainStatementStatementListParserRuleCall_3_0() { return cMainStatementStatementListParserRuleCall_3_0; }
		
		//('ELSIF' elseIfCond+=Expression 'THEN'
		//    elseIfStatements+=StatementList
		//)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'ELSIF'
		public Keyword getELSIFKeyword_4_0() { return cELSIFKeyword_4_0; }
		
		//elseIfCond+=Expression
		public Assignment getElseIfCondAssignment_4_1() { return cElseIfCondAssignment_4_1; }
		
		//Expression
		public RuleCall getElseIfCondExpressionParserRuleCall_4_1_0() { return cElseIfCondExpressionParserRuleCall_4_1_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_4_2() { return cTHENKeyword_4_2; }
		
		//elseIfStatements+=StatementList
		public Assignment getElseIfStatementsAssignment_4_3() { return cElseIfStatementsAssignment_4_3; }
		
		//StatementList
		public RuleCall getElseIfStatementsStatementListParserRuleCall_4_3_0() { return cElseIfStatementsStatementListParserRuleCall_4_3_0; }
		
		//('ELSE'
		//    elseStatement=StatementList
		//)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'ELSE'
		public Keyword getELSEKeyword_5_0() { return cELSEKeyword_5_0; }
		
		//elseStatement=StatementList
		public Assignment getElseStatementAssignment_5_1() { return cElseStatementAssignment_5_1; }
		
		//StatementList
		public RuleCall getElseStatementStatementListParserRuleCall_5_1_0() { return cElseStatementStatementListParserRuleCall_5_1_0; }
		
		//'END_IF'
		public Keyword getEND_IFKeyword_6() { return cEND_IFKeyword_6; }
	}
	public class CaseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.CaseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCASEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cOFKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCaseElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCaseElementsCaseElementParserRuleCall_3_0 = (RuleCall)cCaseElementsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cELSEKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseStatementAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cElseStatementStatementListParserRuleCall_4_1_0 = (RuleCall)cElseStatementAssignment_4_1.eContents().get(0);
		private final Keyword cEND_CASEKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CaseStatement:
		//    'CASE' cond=Expression 'OF'
		//        (caseElements+=CaseElement)*
		//    ('ELSE'
		//        elseStatement=StatementList
		//    )?
		//    'END_CASE';
		@Override public ParserRule getRule() { return rule; }
		
		//'CASE' cond=Expression 'OF'
		//    (caseElements+=CaseElement)*
		//('ELSE'
		//    elseStatement=StatementList
		//)?
		//'END_CASE'
		public Group getGroup() { return cGroup; }
		
		//'CASE'
		public Keyword getCASEKeyword_0() { return cCASEKeyword_0; }
		
		//cond=Expression
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_1_0() { return cCondExpressionParserRuleCall_1_0; }
		
		//'OF'
		public Keyword getOFKeyword_2() { return cOFKeyword_2; }
		
		//(caseElements+=CaseElement)*
		public Assignment getCaseElementsAssignment_3() { return cCaseElementsAssignment_3; }
		
		//CaseElement
		public RuleCall getCaseElementsCaseElementParserRuleCall_3_0() { return cCaseElementsCaseElementParserRuleCall_3_0; }
		
		//('ELSE'
		//    elseStatement=StatementList
		//)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'ELSE'
		public Keyword getELSEKeyword_4_0() { return cELSEKeyword_4_0; }
		
		//elseStatement=StatementList
		public Assignment getElseStatementAssignment_4_1() { return cElseStatementAssignment_4_1; }
		
		//StatementList
		public RuleCall getElseStatementStatementListParserRuleCall_4_1_0() { return cElseStatementStatementListParserRuleCall_4_1_0; }
		
		//'END_CASE'
		public Keyword getEND_CASEKeyword_5() { return cEND_CASEKeyword_5; }
	}
	public class CaseElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.CaseElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCaseListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCaseListCaseListParserRuleCall_0_0 = (RuleCall)cCaseListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementStatementListParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		
		//CaseElement:
		//    caseList=CaseList ':' statement=StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//caseList=CaseList ':' statement=StatementList
		public Group getGroup() { return cGroup; }
		
		//caseList=CaseList
		public Assignment getCaseListAssignment_0() { return cCaseListAssignment_0; }
		
		//CaseList
		public RuleCall getCaseListCaseListParserRuleCall_0_0() { return cCaseListCaseListParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//statement=StatementList
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }
		
		//StatementList
		public RuleCall getStatementStatementListParserRuleCall_2_0() { return cStatementStatementListParserRuleCall_2_0; }
	}
	public class CaseListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.CaseList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCaseListElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCaseListElementCaseListElementParserRuleCall_0_0 = (RuleCall)cCaseListElementAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCaseListElementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCaseListElementCaseListElementParserRuleCall_1_1_0 = (RuleCall)cCaseListElementAssignment_1_1.eContents().get(0);
		
		//CaseList:
		//    caseListElement+=CaseListElement (',' caseListElement+=CaseListElement)*;
		@Override public ParserRule getRule() { return rule; }
		
		//caseListElement+=CaseListElement (',' caseListElement+=CaseListElement)*
		public Group getGroup() { return cGroup; }
		
		//caseListElement+=CaseListElement
		public Assignment getCaseListElementAssignment_0() { return cCaseListElementAssignment_0; }
		
		//CaseListElement
		public RuleCall getCaseListElementCaseListElementParserRuleCall_0_0() { return cCaseListElementCaseListElementParserRuleCall_0_0; }
		
		//(',' caseListElement+=CaseListElement)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//caseListElement+=CaseListElement
		public Assignment getCaseListElementAssignment_1_1() { return cCaseListElementAssignment_1_1; }
		
		//CaseListElement
		public RuleCall getCaseListElementCaseListElementParserRuleCall_1_1_0() { return cCaseListElementCaseListElementParserRuleCall_1_1_0; }
	}
	public class CaseListElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.CaseListElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumSignedIntegerParserRuleCall_0_0 = (RuleCall)cNumAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cVariableSymbolicVariableCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableSymbolicVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableSymbolicVariableCrossReference_1_0.eContents().get(1);
		
		//CaseListElement:
		//    num=SignedInteger | variable=[SymbolicVariable];
		@Override public ParserRule getRule() { return rule; }
		
		//num=SignedInteger | variable=[SymbolicVariable]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//num=SignedInteger
		public Assignment getNumAssignment_0() { return cNumAssignment_0; }
		
		//SignedInteger
		public RuleCall getNumSignedIntegerParserRuleCall_0_0() { return cNumSignedIntegerParserRuleCall_0_0; }
		
		//variable=[SymbolicVariable]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[SymbolicVariable]
		public CrossReference getVariableSymbolicVariableCrossReference_1_0() { return cVariableSymbolicVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableSymbolicVariableIDTerminalRuleCall_1_0_1() { return cVariableSymbolicVariableIDTerminalRuleCall_1_0_1; }
	}
	public class IterationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.IterationStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cForStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhileStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRepeatStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IterationStatement:
		//    ForStatement | WhileStatement | RepeatStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//ForStatement | WhileStatement | RepeatStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_0() { return cForStatementParserRuleCall_0; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_1() { return cWhileStatementParserRuleCall_1; }
		
		//RepeatStatement
		public RuleCall getRepeatStatementParserRuleCall_2() { return cRepeatStatementParserRuleCall_2; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFORKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableSymbolicVariableCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableSymbolicVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableSymbolicVariableCrossReference_1_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cForListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cForListForListParserRuleCall_3_0 = (RuleCall)cForListAssignment_3.eContents().get(0);
		private final Keyword cDOKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementStatementListParserRuleCall_5_0 = (RuleCall)cStatementAssignment_5.eContents().get(0);
		private final Keyword cEND_FORKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ForStatement:
		//    'FOR' variable=[SymbolicVariable] ':=' forList=ForList 'DO'
		//        statement=StatementList
		//    'END_FOR';
		@Override public ParserRule getRule() { return rule; }
		
		//'FOR' variable=[SymbolicVariable] ':=' forList=ForList 'DO'
		//    statement=StatementList
		//'END_FOR'
		public Group getGroup() { return cGroup; }
		
		//'FOR'
		public Keyword getFORKeyword_0() { return cFORKeyword_0; }
		
		//variable=[SymbolicVariable]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[SymbolicVariable]
		public CrossReference getVariableSymbolicVariableCrossReference_1_0() { return cVariableSymbolicVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableSymbolicVariableIDTerminalRuleCall_1_0_1() { return cVariableSymbolicVariableIDTerminalRuleCall_1_0_1; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//forList=ForList
		public Assignment getForListAssignment_3() { return cForListAssignment_3; }
		
		//ForList
		public RuleCall getForListForListParserRuleCall_3_0() { return cForListForListParserRuleCall_3_0; }
		
		//'DO'
		public Keyword getDOKeyword_4() { return cDOKeyword_4; }
		
		//statement=StatementList
		public Assignment getStatementAssignment_5() { return cStatementAssignment_5; }
		
		//StatementList
		public RuleCall getStatementStatementListParserRuleCall_5_0() { return cStatementStatementListParserRuleCall_5_0; }
		
		//'END_FOR'
		public Keyword getEND_FORKeyword_6() { return cEND_FORKeyword_6; }
	}
	public class ForListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ForList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartExpressionParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Keyword cTOKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndExpressionParserRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cBYKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStepAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStepExpressionParserRuleCall_3_1_0 = (RuleCall)cStepAssignment_3_1.eContents().get(0);
		
		//ForList:
		//    start=Expression 'TO' end=Expression ('BY' step=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//start=Expression 'TO' end=Expression ('BY' step=Expression)?
		public Group getGroup() { return cGroup; }
		
		//start=Expression
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//Expression
		public RuleCall getStartExpressionParserRuleCall_0_0() { return cStartExpressionParserRuleCall_0_0; }
		
		//'TO'
		public Keyword getTOKeyword_1() { return cTOKeyword_1; }
		
		//end=Expression
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }
		
		//Expression
		public RuleCall getEndExpressionParserRuleCall_2_0() { return cEndExpressionParserRuleCall_2_0; }
		
		//('BY' step=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'BY'
		public Keyword getBYKeyword_3_0() { return cBYKeyword_3_0; }
		
		//step=Expression
		public Assignment getStepAssignment_3_1() { return cStepAssignment_3_1; }
		
		//Expression
		public RuleCall getStepExpressionParserRuleCall_3_1_0() { return cStepExpressionParserRuleCall_3_1_0; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHILEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondExpressionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		private final Keyword cDOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementListParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cEND_WHILEKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WhileStatement:
		//    'WHILE' cond=Expression 'DO'
		//        statement=StatementList
		//    'END_WHILE';
		@Override public ParserRule getRule() { return rule; }
		
		//'WHILE' cond=Expression 'DO'
		//    statement=StatementList
		//'END_WHILE'
		public Group getGroup() { return cGroup; }
		
		//'WHILE'
		public Keyword getWHILEKeyword_0() { return cWHILEKeyword_0; }
		
		//cond=Expression
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_1_0() { return cCondExpressionParserRuleCall_1_0; }
		
		//'DO'
		public Keyword getDOKeyword_2() { return cDOKeyword_2; }
		
		//statement=StatementList
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//StatementList
		public RuleCall getStatementStatementListParserRuleCall_3_0() { return cStatementStatementListParserRuleCall_3_0; }
		
		//'END_WHILE'
		public Keyword getEND_WHILEKeyword_4() { return cEND_WHILEKeyword_4; }
	}
	public class RepeatStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.RepeatStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREPEATKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementListParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Keyword cUNTILKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCondAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCondExpressionParserRuleCall_3_0 = (RuleCall)cCondAssignment_3.eContents().get(0);
		private final Keyword cEND_REPEATKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RepeatStatement:
		//    'REPEAT'
		//        statement=StatementList
		//    'UNTIL' cond=Expression 'END_REPEAT';
		@Override public ParserRule getRule() { return rule; }
		
		//'REPEAT'
		//    statement=StatementList
		//'UNTIL' cond=Expression 'END_REPEAT'
		public Group getGroup() { return cGroup; }
		
		//'REPEAT'
		public Keyword getREPEATKeyword_0() { return cREPEATKeyword_0; }
		
		//statement=StatementList
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//StatementList
		public RuleCall getStatementStatementListParserRuleCall_1_0() { return cStatementStatementListParserRuleCall_1_0; }
		
		//'UNTIL'
		public Keyword getUNTILKeyword_2() { return cUNTILKeyword_2; }
		
		//cond=Expression
		public Assignment getCondAssignment_3() { return cCondAssignment_3; }
		
		//Expression
		public RuleCall getCondExpressionParserRuleCall_3_0() { return cCondExpressionParserRuleCall_3_0; }
		
		//'END_REPEAT'
		public Keyword getEND_REPEATKeyword_4() { return cEND_REPEATKeyword_4; }
	}
	public class SubprogramControlStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.SubprogramControlStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubprogramControlStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRETURNKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SubprogramControlStatement:
		//    {SubprogramControlStatement} 'RETURN';
		@Override public ParserRule getRule() { return rule; }
		
		//{SubprogramControlStatement} 'RETURN'
		public Group getGroup() { return cGroup; }
		
		//{SubprogramControlStatement}
		public Action getSubprogramControlStatementAction_0() { return cSubprogramControlStatementAction_0; }
		
		//'RETURN'
		public Keyword getRETURNKeyword_1() { return cRETURNKeyword_1; }
	}
	public class ExitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ExitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExitStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEXITKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ExitStatement:
		//    {ExitStatement} 'EXIT';
		@Override public ParserRule getRule() { return rule; }
		
		//{ExitStatement} 'EXIT'
		public Group getGroup() { return cGroup; }
		
		//{ExitStatement}
		public Action getExitStatementAction_0() { return cExitStatementAction_0; }
		
		//'EXIT'
		public Keyword getEXITKeyword_1() { return cEXITKeyword_1; }
	}
	public class SymbolicVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.SymbolicVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		///* ======================= END ST Statements ======================= */
		///* ======================= START Variables ======================= */
		//SymbolicVariable:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SimpleSpecificationInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.SimpleSpecificationInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleSpecificationInitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDataTypeNameParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//SimpleSpecificationInit:
		//    {SimpleSpecificationInit} type=DataTypeName (':=' value=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SimpleSpecificationInit} type=DataTypeName (':=' value=Expression)?
		public Group getGroup() { return cGroup; }
		
		//{SimpleSpecificationInit}
		public Action getSimpleSpecificationInitAction_0() { return cSimpleSpecificationInitAction_0; }
		
		//type=DataTypeName
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//DataTypeName
		public RuleCall getTypeDataTypeNameParserRuleCall_1_0() { return cTypeDataTypeNameParserRuleCall_1_0; }
		
		//(':=' value=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_2_0() { return cColonEqualsSignKeyword_2_0; }
		
		//value=Expression
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_1_0() { return cValueExpressionParserRuleCall_2_1_0; }
	}
	public class VarListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.VarList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsSymbolicVariableParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsSymbolicVariableParserRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		
		//VarList:
		//    vars+=SymbolicVariable (',' vars+=SymbolicVariable)*;
		@Override public ParserRule getRule() { return rule; }
		
		//vars+=SymbolicVariable (',' vars+=SymbolicVariable)*
		public Group getGroup() { return cGroup; }
		
		//vars+=SymbolicVariable
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//SymbolicVariable
		public RuleCall getVarsSymbolicVariableParserRuleCall_0_0() { return cVarsSymbolicVariableParserRuleCall_0_0; }
		
		//(',' vars+=SymbolicVariable)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vars+=SymbolicVariable
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }
		
		//SymbolicVariable
		public RuleCall getVarsSymbolicVariableParserRuleCall_1_1_0() { return cVarsSymbolicVariableParserRuleCall_1_1_0; }
	}
	public class VarInitDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.VarInitDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarListVarListParserRuleCall_0_0 = (RuleCall)cVarListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cSpecAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cSpecSimpleSpecificationInitParserRuleCall_2_0_0 = (RuleCall)cSpecAssignment_2_0.eContents().get(0);
		private final Assignment cArrSpecAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cArrSpecArraySpecificationInitParserRuleCall_2_1_0 = (RuleCall)cArrSpecAssignment_2_1.eContents().get(0);
		private final Assignment cFbAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final CrossReference cFbFunctionBlockCrossReference_2_2_0 = (CrossReference)cFbAssignment_2_2.eContents().get(0);
		private final RuleCall cFbFunctionBlockIDTerminalRuleCall_2_2_0_1 = (RuleCall)cFbFunctionBlockCrossReference_2_2_0.eContents().get(1);
		
		//VarInitDeclaration:
		//    varList=VarList ':' (spec=SimpleSpecificationInit | arrSpec=ArraySpecificationInit | fb=[FunctionBlock]);
		@Override public ParserRule getRule() { return rule; }
		
		//varList=VarList ':' (spec=SimpleSpecificationInit | arrSpec=ArraySpecificationInit | fb=[FunctionBlock])
		public Group getGroup() { return cGroup; }
		
		//varList=VarList
		public Assignment getVarListAssignment_0() { return cVarListAssignment_0; }
		
		//VarList
		public RuleCall getVarListVarListParserRuleCall_0_0() { return cVarListVarListParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(spec=SimpleSpecificationInit | arrSpec=ArraySpecificationInit | fb=[FunctionBlock])
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//spec=SimpleSpecificationInit
		public Assignment getSpecAssignment_2_0() { return cSpecAssignment_2_0; }
		
		//SimpleSpecificationInit
		public RuleCall getSpecSimpleSpecificationInitParserRuleCall_2_0_0() { return cSpecSimpleSpecificationInitParserRuleCall_2_0_0; }
		
		//arrSpec=ArraySpecificationInit
		public Assignment getArrSpecAssignment_2_1() { return cArrSpecAssignment_2_1; }
		
		//ArraySpecificationInit
		public RuleCall getArrSpecArraySpecificationInitParserRuleCall_2_1_0() { return cArrSpecArraySpecificationInitParserRuleCall_2_1_0; }
		
		//fb=[FunctionBlock]
		public Assignment getFbAssignment_2_2() { return cFbAssignment_2_2; }
		
		//[FunctionBlock]
		public CrossReference getFbFunctionBlockCrossReference_2_2_0() { return cFbFunctionBlockCrossReference_2_2_0; }
		
		//ID
		public RuleCall getFbFunctionBlockIDTerminalRuleCall_2_2_0_1() { return cFbFunctionBlockIDTerminalRuleCall_2_2_0_1; }
	}
	public class InputVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.InputVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputVarDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVAR_INPUTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVarsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVarsVarInitDeclarationParserRuleCall_2_0_0 = (RuleCall)cVarsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEND_VARKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InputVarDeclaration:
		//    {InputVarDeclaration}
		//    'VAR_INPUT'
		//        (vars+=VarInitDeclaration ';')*
		//    'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{InputVarDeclaration}
		//'VAR_INPUT'
		//    (vars+=VarInitDeclaration ';')*
		//'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{InputVarDeclaration}
		public Action getInputVarDeclarationAction_0() { return cInputVarDeclarationAction_0; }
		
		//'VAR_INPUT'
		public Keyword getVAR_INPUTKeyword_1() { return cVAR_INPUTKeyword_1; }
		
		//(vars+=VarInitDeclaration ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//vars+=VarInitDeclaration
		public Assignment getVarsAssignment_2_0() { return cVarsAssignment_2_0; }
		
		//VarInitDeclaration
		public RuleCall getVarsVarInitDeclarationParserRuleCall_2_0_0() { return cVarsVarInitDeclarationParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_3() { return cEND_VARKeyword_3; }
	}
	public class OutputVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.OutputVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputVarDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVAR_OUTPUTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVarsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVarsVarInitDeclarationParserRuleCall_2_0_0 = (RuleCall)cVarsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEND_VARKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OutputVarDeclaration:
		//    {OutputVarDeclaration}
		//    'VAR_OUTPUT'
		//        (vars+=VarInitDeclaration ';')*
		//    'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{OutputVarDeclaration}
		//'VAR_OUTPUT'
		//    (vars+=VarInitDeclaration ';')*
		//'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{OutputVarDeclaration}
		public Action getOutputVarDeclarationAction_0() { return cOutputVarDeclarationAction_0; }
		
		//'VAR_OUTPUT'
		public Keyword getVAR_OUTPUTKeyword_1() { return cVAR_OUTPUTKeyword_1; }
		
		//(vars+=VarInitDeclaration ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//vars+=VarInitDeclaration
		public Assignment getVarsAssignment_2_0() { return cVarsAssignment_2_0; }
		
		//VarInitDeclaration
		public RuleCall getVarsVarInitDeclarationParserRuleCall_2_0_0() { return cVarsVarInitDeclarationParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_3() { return cEND_VARKeyword_3; }
	}
	public class InputOutputVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.InputOutputVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputOutputVarDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVAR_IN_OUTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVarsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVarsVarInitDeclarationParserRuleCall_2_0_0 = (RuleCall)cVarsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEND_VARKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InputOutputVarDeclaration:
		//    {InputOutputVarDeclaration}
		//    'VAR_IN_OUT'
		//        (vars+=VarInitDeclaration ';')*
		//    'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{InputOutputVarDeclaration}
		//'VAR_IN_OUT'
		//    (vars+=VarInitDeclaration ';')*
		//'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{InputOutputVarDeclaration}
		public Action getInputOutputVarDeclarationAction_0() { return cInputOutputVarDeclarationAction_0; }
		
		//'VAR_IN_OUT'
		public Keyword getVAR_IN_OUTKeyword_1() { return cVAR_IN_OUTKeyword_1; }
		
		//(vars+=VarInitDeclaration ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//vars+=VarInitDeclaration
		public Assignment getVarsAssignment_2_0() { return cVarsAssignment_2_0; }
		
		//VarInitDeclaration
		public RuleCall getVarsVarInitDeclarationParserRuleCall_2_0_0() { return cVarsVarInitDeclarationParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_3() { return cEND_VARKeyword_3; }
	}
	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVARKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cConstCONSTANTKeyword_2_0 = (Keyword)cConstAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cVarsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cVarsVarInitDeclarationParserRuleCall_3_0_0 = (RuleCall)cVarsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cEND_VARKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VarDeclaration:
		//    {VarDeclaration}
		//    'VAR' (const?='CONSTANT')?
		//        (vars+=VarInitDeclaration ';')*
		//    'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{VarDeclaration}
		//'VAR' (const?='CONSTANT')?
		//    (vars+=VarInitDeclaration ';')*
		//'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{VarDeclaration}
		public Action getVarDeclarationAction_0() { return cVarDeclarationAction_0; }
		
		//'VAR'
		public Keyword getVARKeyword_1() { return cVARKeyword_1; }
		
		//(const?='CONSTANT')?
		public Assignment getConstAssignment_2() { return cConstAssignment_2; }
		
		//'CONSTANT'
		public Keyword getConstCONSTANTKeyword_2_0() { return cConstCONSTANTKeyword_2_0; }
		
		//(vars+=VarInitDeclaration ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//vars+=VarInitDeclaration
		public Assignment getVarsAssignment_3_0() { return cVarsAssignment_3_0; }
		
		//VarInitDeclaration
		public RuleCall getVarsVarInitDeclarationParserRuleCall_3_0_0() { return cVarsVarInitDeclarationParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_4() { return cEND_VARKeyword_4; }
	}
	public class TempVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.TempVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTempVarDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVAR_TEMPKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVarsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVarsVarInitDeclarationParserRuleCall_2_0_0 = (RuleCall)cVarsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEND_VARKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TempVarDeclaration:
		//    {TempVarDeclaration}
		//    'VAR_TEMP'
		//        (vars+=VarInitDeclaration ';')*
		//    'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{TempVarDeclaration}
		//'VAR_TEMP'
		//    (vars+=VarInitDeclaration ';')*
		//'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{TempVarDeclaration}
		public Action getTempVarDeclarationAction_0() { return cTempVarDeclarationAction_0; }
		
		//'VAR_TEMP'
		public Keyword getVAR_TEMPKeyword_1() { return cVAR_TEMPKeyword_1; }
		
		//(vars+=VarInitDeclaration ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//vars+=VarInitDeclaration
		public Assignment getVarsAssignment_2_0() { return cVarsAssignment_2_0; }
		
		//VarInitDeclaration
		public RuleCall getVarsVarInitDeclarationParserRuleCall_2_0_0() { return cVarsVarInitDeclarationParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_3() { return cEND_VARKeyword_3; }
	}
	public class ExternalVarInitDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ExternalVarInitDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarListVarListParserRuleCall_0_0 = (RuleCall)cVarListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeNameParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//ExternalVarInitDeclaration:
		//    varList=VarList ':' type=DataTypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//varList=VarList ':' type=DataTypeName
		public Group getGroup() { return cGroup; }
		
		//varList=VarList
		public Assignment getVarListAssignment_0() { return cVarListAssignment_0; }
		
		//VarList
		public RuleCall getVarListVarListParserRuleCall_0_0() { return cVarListVarListParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=DataTypeName
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataTypeName
		public RuleCall getTypeDataTypeNameParserRuleCall_2_0() { return cTypeDataTypeNameParserRuleCall_2_0; }
	}
	public class ExternalVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ExternalVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExternalVarDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVAR_EXTERNALKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cConstCONSTANTKeyword_2_0 = (Keyword)cConstAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cVarsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cVarsExternalVarInitDeclarationParserRuleCall_3_0_0 = (RuleCall)cVarsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cEND_VARKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExternalVarDeclaration:
		//    {ExternalVarDeclaration}
		//    'VAR_EXTERNAL' (const?='CONSTANT')?
		//        (vars+=ExternalVarInitDeclaration ';')*
		//    'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{ExternalVarDeclaration}
		//'VAR_EXTERNAL' (const?='CONSTANT')?
		//    (vars+=ExternalVarInitDeclaration ';')*
		//'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{ExternalVarDeclaration}
		public Action getExternalVarDeclarationAction_0() { return cExternalVarDeclarationAction_0; }
		
		//'VAR_EXTERNAL'
		public Keyword getVAR_EXTERNALKeyword_1() { return cVAR_EXTERNALKeyword_1; }
		
		//(const?='CONSTANT')?
		public Assignment getConstAssignment_2() { return cConstAssignment_2; }
		
		//'CONSTANT'
		public Keyword getConstCONSTANTKeyword_2_0() { return cConstCONSTANTKeyword_2_0; }
		
		//(vars+=ExternalVarInitDeclaration ';')*
		public Group getGroup_3() { return cGroup_3; }
		
		//vars+=ExternalVarInitDeclaration
		public Assignment getVarsAssignment_3_0() { return cVarsAssignment_3_0; }
		
		//ExternalVarInitDeclaration
		public RuleCall getVarsExternalVarInitDeclarationParserRuleCall_3_0_0() { return cVarsExternalVarInitDeclarationParserRuleCall_3_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_4() { return cEND_VARKeyword_4; }
	}
	public class GlobalVarInitDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.GlobalVarInitDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarListVarListParserRuleCall_0_0 = (RuleCall)cVarListAssignment_0.eContents().get(0);
		private final Keyword cATKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationDIRECT_VARIABLETerminalRuleCall_2_0 = (RuleCall)cLocationAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeDataTypeNameParserRuleCall_4_0 = (RuleCall)cTypeAssignment_4.eContents().get(0);
		
		//GlobalVarInitDeclaration:
		//    varList=VarList 'AT' location=DIRECT_VARIABLE ':' type=DataTypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//varList=VarList 'AT' location=DIRECT_VARIABLE ':' type=DataTypeName
		public Group getGroup() { return cGroup; }
		
		//varList=VarList
		public Assignment getVarListAssignment_0() { return cVarListAssignment_0; }
		
		//VarList
		public RuleCall getVarListVarListParserRuleCall_0_0() { return cVarListVarListParserRuleCall_0_0; }
		
		//'AT'
		public Keyword getATKeyword_1() { return cATKeyword_1; }
		
		//location=DIRECT_VARIABLE
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }
		
		//DIRECT_VARIABLE
		public RuleCall getLocationDIRECT_VARIABLETerminalRuleCall_2_0() { return cLocationDIRECT_VARIABLETerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=DataTypeName
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//DataTypeName
		public RuleCall getTypeDataTypeNameParserRuleCall_4_0() { return cTypeDataTypeNameParserRuleCall_4_0; }
	}
	public class GlobalVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.GlobalVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGlobalVarDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVAR_GLOBALKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cConstCONSTANTKeyword_2_0 = (Keyword)cConstAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cVarsSimpleAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cVarsSimpleVarInitDeclarationParserRuleCall_3_0_0_0 = (RuleCall)cVarsSimpleAssignment_3_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cVarsAsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cVarsAsGlobalVarInitDeclarationParserRuleCall_3_1_0_0 = (RuleCall)cVarsAsAssignment_3_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Keyword cEND_VARKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GlobalVarDeclaration:
		//    {GlobalVarDeclaration}
		//    'VAR_GLOBAL' (const?='CONSTANT')?
		//        (
		//            (varsSimple+=VarInitDeclaration ';') |
		//            (varsAs+=GlobalVarInitDeclaration ';')
		//        )*
		//    'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{GlobalVarDeclaration}
		//'VAR_GLOBAL' (const?='CONSTANT')?
		//    (
		//        (varsSimple+=VarInitDeclaration ';') |
		//        (varsAs+=GlobalVarInitDeclaration ';')
		//    )*
		//'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{GlobalVarDeclaration}
		public Action getGlobalVarDeclarationAction_0() { return cGlobalVarDeclarationAction_0; }
		
		//'VAR_GLOBAL'
		public Keyword getVAR_GLOBALKeyword_1() { return cVAR_GLOBALKeyword_1; }
		
		//(const?='CONSTANT')?
		public Assignment getConstAssignment_2() { return cConstAssignment_2; }
		
		//'CONSTANT'
		public Keyword getConstCONSTANTKeyword_2_0() { return cConstCONSTANTKeyword_2_0; }
		
		//(
		//    (varsSimple+=VarInitDeclaration ';') |
		//    (varsAs+=GlobalVarInitDeclaration ';')
		//)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//(varsSimple+=VarInitDeclaration ';')
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//varsSimple+=VarInitDeclaration
		public Assignment getVarsSimpleAssignment_3_0_0() { return cVarsSimpleAssignment_3_0_0; }
		
		//VarInitDeclaration
		public RuleCall getVarsSimpleVarInitDeclarationParserRuleCall_3_0_0_0() { return cVarsSimpleVarInitDeclarationParserRuleCall_3_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_0_1() { return cSemicolonKeyword_3_0_1; }
		
		//(varsAs+=GlobalVarInitDeclaration ';')
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//varsAs+=GlobalVarInitDeclaration
		public Assignment getVarsAsAssignment_3_1_0() { return cVarsAsAssignment_3_1_0; }
		
		//GlobalVarInitDeclaration
		public RuleCall getVarsAsGlobalVarInitDeclarationParserRuleCall_3_1_0_0() { return cVarsAsGlobalVarInitDeclarationParserRuleCall_3_1_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1_1() { return cSemicolonKeyword_3_1_1; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_4() { return cEND_VARKeyword_4; }
	}
	public class ProcessVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ProcessVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		///* ======================= END Variables ======================= */
		///* ======================= START poST Variables ======================= */
		//ProcessVariable:
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ProcessVarListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ProcessVarList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarsProcessVariableParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsProcessVariableParserRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		
		//ProcessVarList:
		//    vars+=ProcessVariable (',' vars+=ProcessVariable)*;
		@Override public ParserRule getRule() { return rule; }
		
		//vars+=ProcessVariable (',' vars+=ProcessVariable)*
		public Group getGroup() { return cGroup; }
		
		//vars+=ProcessVariable
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }
		
		//ProcessVariable
		public RuleCall getVarsProcessVariableParserRuleCall_0_0() { return cVarsProcessVariableParserRuleCall_0_0; }
		
		//(',' vars+=ProcessVariable)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//vars+=ProcessVariable
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }
		
		//ProcessVariable
		public RuleCall getVarsProcessVariableParserRuleCall_1_1_0() { return cVarsProcessVariableParserRuleCall_1_1_0; }
	}
	public class ProcessVarInitDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ProcessVarInitDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarListProcessVarListParserRuleCall_0_0 = (RuleCall)cVarListAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProcessAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cProcessProcessCrossReference_2_0 = (CrossReference)cProcessAssignment_2.eContents().get(0);
		private final RuleCall cProcessProcessIDTerminalRuleCall_2_0_1 = (RuleCall)cProcessProcessCrossReference_2_0.eContents().get(1);
		
		//ProcessVarInitDeclaration:
		//    varList=ProcessVarList ':' process=[Process];
		@Override public ParserRule getRule() { return rule; }
		
		//varList=ProcessVarList ':' process=[Process]
		public Group getGroup() { return cGroup; }
		
		//varList=ProcessVarList
		public Assignment getVarListAssignment_0() { return cVarListAssignment_0; }
		
		//ProcessVarList
		public RuleCall getVarListProcessVarListParserRuleCall_0_0() { return cVarListProcessVarListParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//process=[Process]
		public Assignment getProcessAssignment_2() { return cProcessAssignment_2; }
		
		//[Process]
		public CrossReference getProcessProcessCrossReference_2_0() { return cProcessProcessCrossReference_2_0; }
		
		//ID
		public RuleCall getProcessProcessIDTerminalRuleCall_2_0_1() { return cProcessProcessIDTerminalRuleCall_2_0_1; }
	}
	public class ProcessVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ProcessVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessVarDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVAR_PROCESSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVarsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVarsProcessVarInitDeclarationParserRuleCall_2_0_0 = (RuleCall)cVarsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cEND_VARKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProcessVarDeclaration:
		//    {ProcessVarDeclaration}
		//    'VAR_PROCESS'
		//        (vars+=ProcessVarInitDeclaration ';')*
		//    'END_VAR';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProcessVarDeclaration}
		//'VAR_PROCESS'
		//    (vars+=ProcessVarInitDeclaration ';')*
		//'END_VAR'
		public Group getGroup() { return cGroup; }
		
		//{ProcessVarDeclaration}
		public Action getProcessVarDeclarationAction_0() { return cProcessVarDeclarationAction_0; }
		
		//'VAR_PROCESS'
		public Keyword getVAR_PROCESSKeyword_1() { return cVAR_PROCESSKeyword_1; }
		
		//(vars+=ProcessVarInitDeclaration ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//vars+=ProcessVarInitDeclaration
		public Assignment getVarsAssignment_2_0() { return cVarsAssignment_2_0; }
		
		//ProcessVarInitDeclaration
		public RuleCall getVarsProcessVarInitDeclarationParserRuleCall_2_0_0() { return cVarsProcessVarInitDeclarationParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//'END_VAR'
		public Keyword getEND_VARKeyword_3() { return cEND_VARKeyword_3; }
	}
	public class ArrayVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ArrayVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableSymbolicVariableCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableSymbolicVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableSymbolicVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexExpressionParserRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///* ======================= END poST Variables ======================= */
		///* ======================= START Array ======================= */
		//ArrayVariable:
		//    variable=[SymbolicVariable] '[' index=Expression ']';
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[SymbolicVariable] '[' index=Expression ']'
		public Group getGroup() { return cGroup; }
		
		//variable=[SymbolicVariable]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[SymbolicVariable]
		public CrossReference getVariableSymbolicVariableCrossReference_0_0() { return cVariableSymbolicVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getVariableSymbolicVariableIDTerminalRuleCall_0_0_1() { return cVariableSymbolicVariableIDTerminalRuleCall_0_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//index=Expression
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//Expression
		public RuleCall getIndexExpressionParserRuleCall_2_0() { return cIndexExpressionParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ArraySpecificationInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ArraySpecificationInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInitArraySpecificationParserRuleCall_0_0 = (RuleCall)cInitAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesArrayInitializationParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		//ArraySpecificationInit:
		//    init=ArraySpecification (':=' values=ArrayInitialization)?;
		@Override public ParserRule getRule() { return rule; }
		
		//init=ArraySpecification (':=' values=ArrayInitialization)?
		public Group getGroup() { return cGroup; }
		
		//init=ArraySpecification
		public Assignment getInitAssignment_0() { return cInitAssignment_0; }
		
		//ArraySpecification
		public RuleCall getInitArraySpecificationParserRuleCall_0_0() { return cInitArraySpecificationParserRuleCall_0_0; }
		
		//(':=' values=ArrayInitialization)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_0() { return cColonEqualsSignKeyword_1_0; }
		
		//values=ArrayInitialization
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//ArrayInitialization
		public RuleCall getValuesArrayInitializationParserRuleCall_1_1_0() { return cValuesArrayInitializationParserRuleCall_1_1_0; }
	}
	public class ArraySpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ArraySpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cARRAYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIntervalAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIntervalArrayIntervalParserRuleCall_2_0_0 = (RuleCall)cIntervalAssignment_2_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOFKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeDataTypeNameParserRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		
		//ArraySpecification:
		//    'ARRAY' '[' (interval=ArrayInterval | '*') ']' 'OF' type=DataTypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//'ARRAY' '[' (interval=ArrayInterval | '*') ']' 'OF' type=DataTypeName
		public Group getGroup() { return cGroup; }
		
		//'ARRAY'
		public Keyword getARRAYKeyword_0() { return cARRAYKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(interval=ArrayInterval | '*')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//interval=ArrayInterval
		public Assignment getIntervalAssignment_2_0() { return cIntervalAssignment_2_0; }
		
		//ArrayInterval
		public RuleCall getIntervalArrayIntervalParserRuleCall_2_0_0() { return cIntervalArrayIntervalParserRuleCall_2_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_1() { return cAsteriskKeyword_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//'OF'
		public Keyword getOFKeyword_4() { return cOFKeyword_4; }
		
		//type=DataTypeName
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//DataTypeName
		public RuleCall getTypeDataTypeNameParserRuleCall_5_0() { return cTypeDataTypeNameParserRuleCall_5_0; }
	}
	public class ArrayIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ArrayInterval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartExpressionParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndExpressionParserRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		
		//ArrayInterval:
		//    start=Expression '..' end=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//start=Expression '..' end=Expression
		public Group getGroup() { return cGroup; }
		
		//start=Expression
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//Expression
		public RuleCall getStartExpressionParserRuleCall_0_0() { return cStartExpressionParserRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//end=Expression
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }
		
		//Expression
		public RuleCall getEndExpressionParserRuleCall_2_0() { return cEndExpressionParserRuleCall_2_0; }
	}
	public class ArrayInitializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ArrayInitialization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ArrayInitialization :
		//    '[' elements+=Expression (',' elements+=Expression)* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' elements+=Expression (',' elements+=Expression)* ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//elements+=Expression
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Expression
		public RuleCall getElementsExpressionParserRuleCall_1_0() { return cElementsExpressionParserRuleCall_1_0; }
		
		//(',' elements+=Expression)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//elements+=Expression
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//Expression
		public RuleCall getElementsExpressionParserRuleCall_2_1_0() { return cElementsExpressionParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class TimeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.TimeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTIME_PREF_LITERALTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIntervalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIntervalINTERVALTerminalRuleCall_3_0 = (RuleCall)cIntervalAssignment_3.eContents().get(0);
		
		///* ======================= END Array ======================= */
		///* ======================= START Time Literals ======================= */
		//TimeLiteral:
		//     TIME_PREF_LITERAL '#' '-'? interval=INTERVAL;
		@Override public ParserRule getRule() { return rule; }
		
		//TIME_PREF_LITERAL '#' '-'? interval=INTERVAL
		public Group getGroup() { return cGroup; }
		
		//TIME_PREF_LITERAL
		public RuleCall getTIME_PREF_LITERALTerminalRuleCall_0() { return cTIME_PREF_LITERALTerminalRuleCall_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//interval=INTERVAL
		public Assignment getIntervalAssignment_3() { return cIntervalAssignment_3; }
		
		//INTERVAL
		public RuleCall getIntervalINTERVALTerminalRuleCall_3_0() { return cIntervalINTERVALTerminalRuleCall_3_0; }
	}
	public class DataTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.DataTypeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericTypeNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBIT_STRING_TYPE_NAMETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTIME_TYPE_NAMETerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRING_TYPE_NAMETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///* ======================= END Direct Variables ======================= */
		///* ======================= START Elementary data types ======================= */
		//DataTypeName returns ecore::EString:
		//    NumericTypeName | BIT_STRING_TYPE_NAME | TIME_TYPE_NAME| STRING_TYPE_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//NumericTypeName | BIT_STRING_TYPE_NAME | TIME_TYPE_NAME| STRING_TYPE_NAME
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumericTypeName
		public RuleCall getNumericTypeNameParserRuleCall_0() { return cNumericTypeNameParserRuleCall_0; }
		
		//BIT_STRING_TYPE_NAME
		public RuleCall getBIT_STRING_TYPE_NAMETerminalRuleCall_1() { return cBIT_STRING_TYPE_NAMETerminalRuleCall_1; }
		
		//TIME_TYPE_NAME
		public RuleCall getTIME_TYPE_NAMETerminalRuleCall_2() { return cTIME_TYPE_NAMETerminalRuleCall_2; }
		
		//STRING_TYPE_NAME
		public RuleCall getSTRING_TYPE_NAMETerminalRuleCall_3() { return cSTRING_TYPE_NAMETerminalRuleCall_3; }
	}
	public class NumericTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.NumericTypeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeNameParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cREAL_TYPE_NAMETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericTypeName returns ecore::EString:
		//    IntegerTypeName | REAL_TYPE_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerTypeName | REAL_TYPE_NAME
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerTypeName
		public RuleCall getIntegerTypeNameParserRuleCall_0() { return cIntegerTypeNameParserRuleCall_0; }
		
		//REAL_TYPE_NAME
		public RuleCall getREAL_TYPE_NAMETerminalRuleCall_1() { return cREAL_TYPE_NAMETerminalRuleCall_1; }
	}
	public class IntegerTypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.IntegerTypeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSIGNED_INTEGER_TYPE_NAMETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUNSIGNED_INTEGER_TYPE_NAMETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IntegerTypeName returns ecore::EString:
		//    SIGNED_INTEGER_TYPE_NAME | UNSIGNED_INTEGER_TYPE_NAME;
		@Override public ParserRule getRule() { return rule; }
		
		//SIGNED_INTEGER_TYPE_NAME | UNSIGNED_INTEGER_TYPE_NAME
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SIGNED_INTEGER_TYPE_NAME
		public RuleCall getSIGNED_INTEGER_TYPE_NAMETerminalRuleCall_0() { return cSIGNED_INTEGER_TYPE_NAMETerminalRuleCall_0; }
		
		//UNSIGNED_INTEGER_TYPE_NAME
		public RuleCall getUNSIGNED_INTEGER_TYPE_NAMETerminalRuleCall_1() { return cUNSIGNED_INTEGER_TYPE_NAMETerminalRuleCall_1; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNumAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNumNumericLiteralParserRuleCall_0_0 = (RuleCall)cNumAssignment_0.eContents().get(0);
		private final Assignment cTimeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTimeTimeLiteralParserRuleCall_1_0 = (RuleCall)cTimeAssignment_1.eContents().get(0);
		private final Assignment cOthAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Alternatives cOthAlternatives_2_0 = (Alternatives)cOthAssignment_2.eContents().get(0);
		private final RuleCall cOthBINARY_INTEGERTerminalRuleCall_2_0_0 = (RuleCall)cOthAlternatives_2_0.eContents().get(0);
		private final RuleCall cOthOCTAL_INTEGERTerminalRuleCall_2_0_1 = (RuleCall)cOthAlternatives_2_0.eContents().get(1);
		private final RuleCall cOthHEX_INTEGERTerminalRuleCall_2_0_2 = (RuleCall)cOthAlternatives_2_0.eContents().get(2);
		private final RuleCall cOthBOOLEAN_LITERALTerminalRuleCall_2_0_3 = (RuleCall)cOthAlternatives_2_0.eContents().get(3);
		
		///* ======================= END Elementary data types ======================= */
		///* ======================= START Numeric Literals ======================= */
		//Constant:
		//    num=NumericLiteral |
		//    time=TimeLiteral |
		//    oth=(BINARY_INTEGER |
		//        OCTAL_INTEGER |
		//        HEX_INTEGER |
		//        BOOLEAN_LITERAL);
		@Override public ParserRule getRule() { return rule; }
		
		//num=NumericLiteral |
		//time=TimeLiteral |
		//oth=(BINARY_INTEGER |
		//    OCTAL_INTEGER |
		//    HEX_INTEGER |
		//    BOOLEAN_LITERAL)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//num=NumericLiteral
		public Assignment getNumAssignment_0() { return cNumAssignment_0; }
		
		//NumericLiteral
		public RuleCall getNumNumericLiteralParserRuleCall_0_0() { return cNumNumericLiteralParserRuleCall_0_0; }
		
		//time=TimeLiteral
		public Assignment getTimeAssignment_1() { return cTimeAssignment_1; }
		
		//TimeLiteral
		public RuleCall getTimeTimeLiteralParserRuleCall_1_0() { return cTimeTimeLiteralParserRuleCall_1_0; }
		
		//oth=(BINARY_INTEGER |
		//    OCTAL_INTEGER |
		//    HEX_INTEGER |
		//    BOOLEAN_LITERAL)
		public Assignment getOthAssignment_2() { return cOthAssignment_2; }
		
		//(BINARY_INTEGER |
		//        OCTAL_INTEGER |
		//        HEX_INTEGER |
		//        BOOLEAN_LITERAL)
		public Alternatives getOthAlternatives_2_0() { return cOthAlternatives_2_0; }
		
		//BINARY_INTEGER
		public RuleCall getOthBINARY_INTEGERTerminalRuleCall_2_0_0() { return cOthBINARY_INTEGERTerminalRuleCall_2_0_0; }
		
		//OCTAL_INTEGER
		public RuleCall getOthOCTAL_INTEGERTerminalRuleCall_2_0_1() { return cOthOCTAL_INTEGERTerminalRuleCall_2_0_1; }
		
		//HEX_INTEGER
		public RuleCall getOthHEX_INTEGERTerminalRuleCall_2_0_2() { return cOthHEX_INTEGERTerminalRuleCall_2_0_2; }
		
		//BOOLEAN_LITERAL
		public RuleCall getOthBOOLEAN_LITERALTerminalRuleCall_2_0_3() { return cOthBOOLEAN_LITERALTerminalRuleCall_2_0_3; }
	}
	public class SignedIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.SignedInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cISigAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cISigHyphenMinusKeyword_0_0 = (Keyword)cISigAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTEGERTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//SignedInteger:
		//    (iSig?='-')? value=INTEGER;
		@Override public ParserRule getRule() { return rule; }
		
		//(iSig?='-')? value=INTEGER
		public Group getGroup() { return cGroup; }
		
		//(iSig?='-')?
		public Assignment getISigAssignment_0() { return cISigAssignment_0; }
		
		//'-'
		public Keyword getISigHyphenMinusKeyword_0_0() { return cISigHyphenMinusKeyword_0_0; }
		
		//value=INTEGER
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_1_0() { return cValueINTEGERTerminalRuleCall_1_0; }
	}
	public class NumericLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.NumericLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRealLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumericLiteral:
		//    IntegerLiteral | RealLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerLiteral | RealLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_0() { return cIntegerLiteralParserRuleCall_0; }
		
		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_1() { return cRealLiteralParserRuleCall_1; }
	}
	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.IntegerLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTypeIntegerTypeNameParserRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSignedIntegerParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//IntegerLiteral:
		//    (type=IntegerTypeName '#')? value=SignedInteger;
		@Override public ParserRule getRule() { return rule; }
		
		//(type=IntegerTypeName '#')? value=SignedInteger
		public Group getGroup() { return cGroup; }
		
		//(type=IntegerTypeName '#')?
		public Group getGroup_0() { return cGroup_0; }
		
		//type=IntegerTypeName
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//IntegerTypeName
		public RuleCall getTypeIntegerTypeNameParserRuleCall_0_0_0() { return cTypeIntegerTypeNameParserRuleCall_0_0_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_0_1() { return cNumberSignKeyword_0_1; }
		
		//value=SignedInteger
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//SignedInteger
		public RuleCall getValueSignedIntegerParserRuleCall_1_0() { return cValueSignedIntegerParserRuleCall_1_0; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.RealLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTypeREAL_TYPE_NAMETerminalRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRSigAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRSigHyphenMinusKeyword_1_0 = (Keyword)cRSigAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueREALTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//RealLiteral:
		//    (type=REAL_TYPE_NAME '#')? (rSig?='-')? value=REAL;
		@Override public ParserRule getRule() { return rule; }
		
		//(type=REAL_TYPE_NAME '#')? (rSig?='-')? value=REAL
		public Group getGroup() { return cGroup; }
		
		//(type=REAL_TYPE_NAME '#')?
		public Group getGroup_0() { return cGroup_0; }
		
		//type=REAL_TYPE_NAME
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }
		
		//REAL_TYPE_NAME
		public RuleCall getTypeREAL_TYPE_NAMETerminalRuleCall_0_0_0() { return cTypeREAL_TYPE_NAMETerminalRuleCall_0_0_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_0_1() { return cNumberSignKeyword_0_1; }
		
		//(rSig?='-')?
		public Assignment getRSigAssignment_1() { return cRSigAssignment_1; }
		
		//'-'
		public Keyword getRSigHyphenMinusKeyword_1_0() { return cRSigHyphenMinusKeyword_1_0; }
		
		//value=REAL
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//REAL
		public RuleCall getValueREALTerminalRuleCall_2_0() { return cValueREALTerminalRuleCall_2_0; }
	}
	
	public class AssignmentTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.AssignmentType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInColonEqualsSignKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AssignmentType:
		//    in=':=' | out='=>';
		public EnumRule getRule() { return rule; }
		
		//in=':=' | out='=>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//in=':='
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }
		
		//':='
		public Keyword getInColonEqualsSignKeyword_0_0() { return cInColonEqualsSignKeyword_0_0; }
		
		//out='=>'
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }
		
		//'=>'
		public Keyword getOutEqualsSignGreaterThanSignKeyword_1_0() { return cOutEqualsSignGreaterThanSignKeyword_1_0; }
	}
	public class CompOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.CompOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQUALLessThanSignGreaterThanSignKeyword_1_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CompOperator:
		//    EQUAL='=' | NOT_EQUAL='<>';
		public EnumRule getRule() { return rule; }
		
		//EQUAL='=' | NOT_EQUAL='<>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL='='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEQUALEqualsSignKeyword_0_0() { return cEQUALEqualsSignKeyword_0_0; }
		
		//NOT_EQUAL='<>'
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_1() { return cNOT_EQUALEnumLiteralDeclaration_1; }
		
		//'<>'
		public Keyword getNOT_EQUALLessThanSignGreaterThanSignKeyword_1_0() { return cNOT_EQUALLessThanSignGreaterThanSignKeyword_1_0; }
	}
	public class EquOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.EquOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESSLessThanSignKeyword_0_0 = (Keyword)cLESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATERGreaterThanSignKeyword_1_0 = (Keyword)cGREATEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_EQUEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESS_EQULessThanSignEqualsSignKeyword_2_0 = (Keyword)cLESS_EQUEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQUEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_EQUGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGREATER_EQUEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum EquOperator:
		//    LESS='<' | GREATER='>' | LESS_EQU='<=' | GREATER_EQU='>=';
		public EnumRule getRule() { return rule; }
		
		//LESS='<' | GREATER='>' | LESS_EQU='<=' | GREATER_EQU='>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS='<'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_0() { return cLESSEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getLESSLessThanSignKeyword_0_0() { return cLESSLessThanSignKeyword_0_0; }
		
		//GREATER='>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_1() { return cGREATEREnumLiteralDeclaration_1; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_1_0() { return cGREATERGreaterThanSignKeyword_1_0; }
		
		//LESS_EQU='<='
		public EnumLiteralDeclaration getLESS_EQUEnumLiteralDeclaration_2() { return cLESS_EQUEnumLiteralDeclaration_2; }
		
		//'<='
		public Keyword getLESS_EQULessThanSignEqualsSignKeyword_2_0() { return cLESS_EQULessThanSignEqualsSignKeyword_2_0; }
		
		//GREATER_EQU='>='
		public EnumLiteralDeclaration getGREATER_EQUEnumLiteralDeclaration_3() { return cGREATER_EQUEnumLiteralDeclaration_3; }
		
		//'>='
		public Keyword getGREATER_EQUGreaterThanSignEqualsSignKeyword_3_0() { return cGREATER_EQUGreaterThanSignEqualsSignKeyword_3_0; }
	}
	public class AddOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.AddOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AddOperator:
		//    PLUS='+' | MINUS='-';
		public EnumRule getRule() { return rule; }
		
		//PLUS='+' | MINUS='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS='+'
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }
		
		//MINUS='-'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
	}
	public class MulOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.MulOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULAsteriskKeyword_0_0 = (Keyword)cMULEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVSolidusKeyword_1_0 = (Keyword)cDIVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMODMODKeyword_2_0 = (Keyword)cMODEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MulOperator:
		//    MUL='*' | DIV='/' | MOD='MOD';
		public EnumRule getRule() { return rule; }
		
		//MUL='*' | DIV='/' | MOD='MOD'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MUL='*'
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_0() { return cMULEnumLiteralDeclaration_0; }
		
		//'*'
		public Keyword getMULAsteriskKeyword_0_0() { return cMULAsteriskKeyword_0_0; }
		
		//DIV='/'
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_1() { return cDIVEnumLiteralDeclaration_1; }
		
		//'/'
		public Keyword getDIVSolidusKeyword_1_0() { return cDIVSolidusKeyword_1_0; }
		
		//MOD='MOD'
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_2() { return cMODEnumLiteralDeclaration_2; }
		
		//'MOD'
		public Keyword getMODMODKeyword_2_0() { return cMODMODKeyword_2_0; }
	}
	public class UnaryOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNOTNOTKeyword_0_0 = (Keyword)cNOTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUNMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUNMINUSHyphenMinusKeyword_1_0 = (Keyword)cUNMINUSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum UnaryOperator:
		//    NOT='NOT' | UNMINUS='-';
		public EnumRule getRule() { return rule; }
		
		//NOT='NOT' | UNMINUS='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NOT='NOT'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_0() { return cNOTEnumLiteralDeclaration_0; }
		
		//'NOT'
		public Keyword getNOTNOTKeyword_0_0() { return cNOTNOTKeyword_0_0; }
		
		//UNMINUS='-'
		public EnumLiteralDeclaration getUNMINUSEnumLiteralDeclaration_1() { return cUNMINUSEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getUNMINUSHyphenMinusKeyword_1_0() { return cUNMINUSHyphenMinusKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final VariableElements pVariable;
	private final ConfigurationElements pConfiguration;
	private final ResourceElements pResource;
	private final SingleResourceElements pSingleResource;
	private final TaskElements pTask;
	private final TaskInitializationElements pTaskInitialization;
	private final TerminalRule tSINGLE_DECLARATION;
	private final TerminalRule tINTERVAL_DECLARATION;
	private final TerminalRule tPRIORITY_DECLARATION;
	private final ProgramConfigurationElements pProgramConfiguration;
	private final ProgramConfElementsElements pProgramConfElements;
	private final ProgramConfElementElements pProgramConfElement;
	private final AttachVariableConfElementElements pAttachVariableConfElement;
	private final AssignmentTypeElements eAssignmentType;
	private final TemplateProcessConfElementElements pTemplateProcessConfElement;
	private final TemplateProcessElementsElements pTemplateProcessElements;
	private final TemplateProcessAttachVariableConfElementElements pTemplateProcessAttachVariableConfElement;
	private final ProgramElements pProgram;
	private final FunctionBlockElements pFunctionBlock;
	private final FunctionElements pFunction;
	private final ProcessElements pProcess;
	private final StateElements pState;
	private final SetStateStatementElements pSetStateStatement;
	private final ProcessStatementsElements pProcessStatements;
	private final ProcessStatusExpressionElements pProcessStatusExpression;
	private final StartProcessStatementElements pStartProcessStatement;
	private final StopProcessStatementElements pStopProcessStatement;
	private final ErrorProcessStatementElements pErrorProcessStatement;
	private final TimeoutStatementElements pTimeoutStatement;
	private final ResetTimerStatementElements pResetTimerStatement;
	private final FBInvocationElements pFBInvocation;
	private final FunctionCallElements pFunctionCall;
	private final ParamAssignmentElementsElements pParamAssignmentElements;
	private final ParamAssignmentElements pParamAssignment;
	private final ExpressionElements pExpression;
	private final TerminalRule tOR_OPERATOR;
	private final XorExpressionElements pXorExpression;
	private final TerminalRule tXOR_OPERATOR;
	private final AndExpressionElements pAndExpression;
	private final TerminalRule tAND_OPERATOR;
	private final CompExpressionElements pCompExpression;
	private final CompOperatorElements eCompOperator;
	private final EquExpressionElements pEquExpression;
	private final EquOperatorElements eEquOperator;
	private final AddExpressionElements pAddExpression;
	private final AddOperatorElements eAddOperator;
	private final MulExpressionElements pMulExpression;
	private final MulOperatorElements eMulOperator;
	private final PowerExpressionElements pPowerExpression;
	private final TerminalRule tPOWER_OPERATOR;
	private final UnaryExpressionElements pUnaryExpression;
	private final UnaryOperatorElements eUnaryOperator;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final StatementListElements pStatementList;
	private final StatementElements pStatement;
	private final AssignmentStatementElements pAssignmentStatement;
	private final SelectionStatementElements pSelectionStatement;
	private final IfStatementElements pIfStatement;
	private final CaseStatementElements pCaseStatement;
	private final CaseElementElements pCaseElement;
	private final CaseListElements pCaseList;
	private final CaseListElementElements pCaseListElement;
	private final IterationStatementElements pIterationStatement;
	private final ForStatementElements pForStatement;
	private final ForListElements pForList;
	private final WhileStatementElements pWhileStatement;
	private final RepeatStatementElements pRepeatStatement;
	private final SubprogramControlStatementElements pSubprogramControlStatement;
	private final ExitStatementElements pExitStatement;
	private final SymbolicVariableElements pSymbolicVariable;
	private final SimpleSpecificationInitElements pSimpleSpecificationInit;
	private final VarListElements pVarList;
	private final VarInitDeclarationElements pVarInitDeclaration;
	private final InputVarDeclarationElements pInputVarDeclaration;
	private final OutputVarDeclarationElements pOutputVarDeclaration;
	private final InputOutputVarDeclarationElements pInputOutputVarDeclaration;
	private final VarDeclarationElements pVarDeclaration;
	private final TempVarDeclarationElements pTempVarDeclaration;
	private final ExternalVarInitDeclarationElements pExternalVarInitDeclaration;
	private final ExternalVarDeclarationElements pExternalVarDeclaration;
	private final GlobalVarInitDeclarationElements pGlobalVarInitDeclaration;
	private final GlobalVarDeclarationElements pGlobalVarDeclaration;
	private final ProcessVariableElements pProcessVariable;
	private final ProcessVarListElements pProcessVarList;
	private final ProcessVarInitDeclarationElements pProcessVarInitDeclaration;
	private final ProcessVarDeclarationElements pProcessVarDeclaration;
	private final ArrayVariableElements pArrayVariable;
	private final ArraySpecificationInitElements pArraySpecificationInit;
	private final ArraySpecificationElements pArraySpecification;
	private final ArrayIntervalElements pArrayInterval;
	private final ArrayInitializationElements pArrayInitialization;
	private final TimeLiteralElements pTimeLiteral;
	private final TerminalRule tTIME_PREF_LITERAL;
	private final TerminalRule tINTERVAL;
	private final TerminalRule tDIRECT_VARIABLE;
	private final TerminalRule tDIRECT_TYPE_PREFIX;
	private final TerminalRule tDIRECT_SIZE_PREFIX;
	private final DataTypeNameElements pDataTypeName;
	private final NumericTypeNameElements pNumericTypeName;
	private final IntegerTypeNameElements pIntegerTypeName;
	private final TerminalRule tSIGNED_INTEGER_TYPE_NAME;
	private final TerminalRule tUNSIGNED_INTEGER_TYPE_NAME;
	private final TerminalRule tREAL_TYPE_NAME;
	private final TerminalRule tBIT_STRING_TYPE_NAME;
	private final TerminalRule tTIME_TYPE_NAME;
	private final TerminalRule tSTRING_TYPE_NAME;
	private final ConstantElements pConstant;
	private final TerminalRule tINTEGER;
	private final SignedIntegerElements pSignedInteger;
	private final TerminalRule tREAL;
	private final TerminalRule tBINARY_INTEGER;
	private final TerminalRule tOCTAL_INTEGER;
	private final TerminalRule tHEX_INTEGER;
	private final NumericLiteralElements pNumericLiteral;
	private final IntegerLiteralElements pIntegerLiteral;
	private final RealLiteralElements pRealLiteral;
	private final TerminalRule tBOOLEAN_LITERAL;
	private final TerminalRule tLETTER;
	private final TerminalRule tBIT;
	private final TerminalRule tOCTAL_DIGIT;
	private final TerminalRule tDIGIT;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public PoSTGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pVariable = new VariableElements();
		this.pConfiguration = new ConfigurationElements();
		this.pResource = new ResourceElements();
		this.pSingleResource = new SingleResourceElements();
		this.pTask = new TaskElements();
		this.pTaskInitialization = new TaskInitializationElements();
		this.tSINGLE_DECLARATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.SINGLE_DECLARATION");
		this.tINTERVAL_DECLARATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.INTERVAL_DECLARATION");
		this.tPRIORITY_DECLARATION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.PRIORITY_DECLARATION");
		this.pProgramConfiguration = new ProgramConfigurationElements();
		this.pProgramConfElements = new ProgramConfElementsElements();
		this.pProgramConfElement = new ProgramConfElementElements();
		this.pAttachVariableConfElement = new AttachVariableConfElementElements();
		this.eAssignmentType = new AssignmentTypeElements();
		this.pTemplateProcessConfElement = new TemplateProcessConfElementElements();
		this.pTemplateProcessElements = new TemplateProcessElementsElements();
		this.pTemplateProcessAttachVariableConfElement = new TemplateProcessAttachVariableConfElementElements();
		this.pProgram = new ProgramElements();
		this.pFunctionBlock = new FunctionBlockElements();
		this.pFunction = new FunctionElements();
		this.pProcess = new ProcessElements();
		this.pState = new StateElements();
		this.pSetStateStatement = new SetStateStatementElements();
		this.pProcessStatements = new ProcessStatementsElements();
		this.pProcessStatusExpression = new ProcessStatusExpressionElements();
		this.pStartProcessStatement = new StartProcessStatementElements();
		this.pStopProcessStatement = new StopProcessStatementElements();
		this.pErrorProcessStatement = new ErrorProcessStatementElements();
		this.pTimeoutStatement = new TimeoutStatementElements();
		this.pResetTimerStatement = new ResetTimerStatementElements();
		this.pFBInvocation = new FBInvocationElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pParamAssignmentElements = new ParamAssignmentElementsElements();
		this.pParamAssignment = new ParamAssignmentElements();
		this.pExpression = new ExpressionElements();
		this.tOR_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.OR_OPERATOR");
		this.pXorExpression = new XorExpressionElements();
		this.tXOR_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.XOR_OPERATOR");
		this.pAndExpression = new AndExpressionElements();
		this.tAND_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.AND_OPERATOR");
		this.pCompExpression = new CompExpressionElements();
		this.eCompOperator = new CompOperatorElements();
		this.pEquExpression = new EquExpressionElements();
		this.eEquOperator = new EquOperatorElements();
		this.pAddExpression = new AddExpressionElements();
		this.eAddOperator = new AddOperatorElements();
		this.pMulExpression = new MulExpressionElements();
		this.eMulOperator = new MulOperatorElements();
		this.pPowerExpression = new PowerExpressionElements();
		this.tPOWER_OPERATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.POWER_OPERATOR");
		this.pUnaryExpression = new UnaryExpressionElements();
		this.eUnaryOperator = new UnaryOperatorElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pStatementList = new StatementListElements();
		this.pStatement = new StatementElements();
		this.pAssignmentStatement = new AssignmentStatementElements();
		this.pSelectionStatement = new SelectionStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pCaseStatement = new CaseStatementElements();
		this.pCaseElement = new CaseElementElements();
		this.pCaseList = new CaseListElements();
		this.pCaseListElement = new CaseListElementElements();
		this.pIterationStatement = new IterationStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pForList = new ForListElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pRepeatStatement = new RepeatStatementElements();
		this.pSubprogramControlStatement = new SubprogramControlStatementElements();
		this.pExitStatement = new ExitStatementElements();
		this.pSymbolicVariable = new SymbolicVariableElements();
		this.pSimpleSpecificationInit = new SimpleSpecificationInitElements();
		this.pVarList = new VarListElements();
		this.pVarInitDeclaration = new VarInitDeclarationElements();
		this.pInputVarDeclaration = new InputVarDeclarationElements();
		this.pOutputVarDeclaration = new OutputVarDeclarationElements();
		this.pInputOutputVarDeclaration = new InputOutputVarDeclarationElements();
		this.pVarDeclaration = new VarDeclarationElements();
		this.pTempVarDeclaration = new TempVarDeclarationElements();
		this.pExternalVarInitDeclaration = new ExternalVarInitDeclarationElements();
		this.pExternalVarDeclaration = new ExternalVarDeclarationElements();
		this.pGlobalVarInitDeclaration = new GlobalVarInitDeclarationElements();
		this.pGlobalVarDeclaration = new GlobalVarDeclarationElements();
		this.pProcessVariable = new ProcessVariableElements();
		this.pProcessVarList = new ProcessVarListElements();
		this.pProcessVarInitDeclaration = new ProcessVarInitDeclarationElements();
		this.pProcessVarDeclaration = new ProcessVarDeclarationElements();
		this.pArrayVariable = new ArrayVariableElements();
		this.pArraySpecificationInit = new ArraySpecificationInitElements();
		this.pArraySpecification = new ArraySpecificationElements();
		this.pArrayInterval = new ArrayIntervalElements();
		this.pArrayInitialization = new ArrayInitializationElements();
		this.pTimeLiteral = new TimeLiteralElements();
		this.tTIME_PREF_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.TIME_PREF_LITERAL");
		this.tINTERVAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.INTERVAL");
		this.tDIRECT_VARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.DIRECT_VARIABLE");
		this.tDIRECT_TYPE_PREFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.DIRECT_TYPE_PREFIX");
		this.tDIRECT_SIZE_PREFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.DIRECT_SIZE_PREFIX");
		this.pDataTypeName = new DataTypeNameElements();
		this.pNumericTypeName = new NumericTypeNameElements();
		this.pIntegerTypeName = new IntegerTypeNameElements();
		this.tSIGNED_INTEGER_TYPE_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.SIGNED_INTEGER_TYPE_NAME");
		this.tUNSIGNED_INTEGER_TYPE_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.UNSIGNED_INTEGER_TYPE_NAME");
		this.tREAL_TYPE_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.REAL_TYPE_NAME");
		this.tBIT_STRING_TYPE_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.BIT_STRING_TYPE_NAME");
		this.tTIME_TYPE_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.TIME_TYPE_NAME");
		this.tSTRING_TYPE_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.STRING_TYPE_NAME");
		this.pConstant = new ConstantElements();
		this.tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.INTEGER");
		this.pSignedInteger = new SignedIntegerElements();
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.REAL");
		this.tBINARY_INTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.BINARY_INTEGER");
		this.tOCTAL_INTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.OCTAL_INTEGER");
		this.tHEX_INTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.HEX_INTEGER");
		this.pNumericLiteral = new NumericLiteralElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.pRealLiteral = new RealLiteralElements();
		this.tBOOLEAN_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.BOOLEAN_LITERAL");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.LETTER");
		this.tBIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.BIT");
		this.tOCTAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.OCTAL_DIGIT");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.DIGIT");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.HEX_DIGIT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ID");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "su.nsk.iae.post.PoST.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("su.nsk.iae.post.PoST".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model:
	//    (conf=Configuration)? &
	//    (globVars+=GlobalVarDeclaration)* &
	//    (programs+=Program)* &
	//    (fbs+=FunctionBlock)* &
	//    (funs+=Function)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	///* ======================= START Variable ======================= */
	//Variable:
	//    SymbolicVariable | ProcessVariable | Process | TemplateProcessConfElement;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	///* ======================= END Variable ======================= */
	///* ======================= START Configuration ======================= */
	//Configuration:
	//    'CONFIGURATION' name=ID
	//        (
	//            confGlobVars+=GlobalVarDeclaration |
	//            resources+=Resource
	//        )*
	//    'END_CONFIGURATION';
	public ConfigurationElements getConfigurationAccess() {
		return pConfiguration;
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}
	
	//Resource:
	//    'RESOURCE' name=ID 'ON' type=ID
	//        (resGlobVars+=GlobalVarDeclaration)*
	//        resStatement=SingleResource
	//    'END_RESOURCE';
	public ResourceElements getResourceAccess() {
		return pResource;
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}
	
	//SingleResource:
	//    {SingleResource}
	//    (
	//        (tasks+=Task ';') |
	//        (programConfs+=ProgramConfiguration ';')
	//    )*;
	public SingleResourceElements getSingleResourceAccess() {
		return pSingleResource;
	}
	
	public ParserRule getSingleResourceRule() {
		return getSingleResourceAccess().getRule();
	}
	
	//Task:
	//    'TASK' name=ID '(' init=TaskInitialization ')';
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//TaskInitialization:
	//    (SINGLE_DECLARATION ':=' single=Constant) | (INTERVAL_DECLARATION ':=' interval=Constant)
	//    ',' PRIORITY_DECLARATION ':=' priority=INTEGER;
	public TaskInitializationElements getTaskInitializationAccess() {
		return pTaskInitialization;
	}
	
	public ParserRule getTaskInitializationRule() {
		return getTaskInitializationAccess().getRule();
	}
	
	//terminal SINGLE_DECLARATION:
	//    'SINGLE';
	public TerminalRule getSINGLE_DECLARATIONRule() {
		return tSINGLE_DECLARATION;
	}
	
	//terminal INTERVAL_DECLARATION:
	//    'INTERVAL';
	public TerminalRule getINTERVAL_DECLARATIONRule() {
		return tINTERVAL_DECLARATION;
	}
	
	//terminal PRIORITY_DECLARATION:
	//    'PRIORITY';
	public TerminalRule getPRIORITY_DECLARATIONRule() {
		return tPRIORITY_DECLARATION;
	}
	
	//ProgramConfiguration:
	//    'PROGRAM' name=ID ('WITH' task=[Task])? ':' program=[Program] ('(' args=ProgramConfElements ')')?;
	public ProgramConfigurationElements getProgramConfigurationAccess() {
		return pProgramConfiguration;
	}
	
	public ParserRule getProgramConfigurationRule() {
		return getProgramConfigurationAccess().getRule();
	}
	
	//ProgramConfElements:
	//    elements+=ProgramConfElement (',' elements+=ProgramConfElement)*;
	public ProgramConfElementsElements getProgramConfElementsAccess() {
		return pProgramConfElements;
	}
	
	public ParserRule getProgramConfElementsRule() {
		return getProgramConfElementsAccess().getRule();
	}
	
	//ProgramConfElement:
	//    AttachVariableConfElement | TemplateProcessConfElement;
	public ProgramConfElementElements getProgramConfElementAccess() {
		return pProgramConfElement;
	}
	
	public ParserRule getProgramConfElementRule() {
		return getProgramConfElementAccess().getRule();
	}
	
	//AttachVariableConfElement:
	//    programVar=[SymbolicVariable] assig=AssignmentType (attVar=[SymbolicVariable] | const=Constant);
	public AttachVariableConfElementElements getAttachVariableConfElementAccess() {
		return pAttachVariableConfElement;
	}
	
	public ParserRule getAttachVariableConfElementRule() {
		return getAttachVariableConfElementAccess().getRule();
	}
	
	//enum AssignmentType:
	//    in=':=' | out='=>';
	public AssignmentTypeElements getAssignmentTypeAccess() {
		return eAssignmentType;
	}
	
	public EnumRule getAssignmentTypeRule() {
		return getAssignmentTypeAccess().getRule();
	}
	
	///* ======================= END Configuration ======================= */
	///* ======================= START Template Configuration ======================= */
	//TemplateProcessConfElement:
	//    'PROCESS' (active?='ACTIVE')? name=ID ':' process=[Process] ('(' args=TemplateProcessElements ')')?;
	public TemplateProcessConfElementElements getTemplateProcessConfElementAccess() {
		return pTemplateProcessConfElement;
	}
	
	public ParserRule getTemplateProcessConfElementRule() {
		return getTemplateProcessConfElementAccess().getRule();
	}
	
	//TemplateProcessElements:
	//    elements+=TemplateProcessAttachVariableConfElement (',' elements+=TemplateProcessAttachVariableConfElement)*;
	public TemplateProcessElementsElements getTemplateProcessElementsAccess() {
		return pTemplateProcessElements;
	}
	
	public ParserRule getTemplateProcessElementsRule() {
		return getTemplateProcessElementsAccess().getRule();
	}
	
	//TemplateProcessAttachVariableConfElement:
	//    programVar=[Variable] assig=AssignmentType (attVar=[Variable] | const=Constant);
	public TemplateProcessAttachVariableConfElementElements getTemplateProcessAttachVariableConfElementAccess() {
		return pTemplateProcessAttachVariableConfElement;
	}
	
	public ParserRule getTemplateProcessAttachVariableConfElementRule() {
		return getTemplateProcessAttachVariableConfElementAccess().getRule();
	}
	
	///* ======================= END Template Configuration ======================= */
	///* ======================= START Program ======================= */
	//Program:
	//    'PROGRAM' name=ID
	//        (
	//            progInVars+=InputVarDeclaration |
	//            progOutVars+=OutputVarDeclaration |
	//            progInOutVars+=InputOutputVarDeclaration |
	//            progVars+=VarDeclaration |
	//            progTempVars+=TempVarDeclaration |
	//            progExternVars+=ExternalVarDeclaration
	//        )*
	//        (processes+=Process )*
	//    'END_PROGRAM';
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	///* ======================= END Program ======================= */
	///* ======================= START FB ======================= */
	//FunctionBlock:
	//    'FUNCTION_BLOCK' name=ID
	//        (
	//            fbInVars+=InputVarDeclaration |
	//            fbOutVars+=OutputVarDeclaration |
	//            fbInOutVars+=InputOutputVarDeclaration |
	//            fbVars+=VarDeclaration |
	//            fbTempVars+=TempVarDeclaration |
	//            fbExternVars+=ExternalVarDeclaration
	//        )*
	//        (processes+=Process )*
	//    'END_FUNCTION_BLOCK';
	public FunctionBlockElements getFunctionBlockAccess() {
		return pFunctionBlock;
	}
	
	public ParserRule getFunctionBlockRule() {
		return getFunctionBlockAccess().getRule();
	}
	
	///* ======================= END FB ======================= */
	///* ======================= START Function ======================= */
	//Function:
	//    'FUNCTION' name=ID ':' type=DataTypeName
	//        (
	//            funInVars+=InputVarDeclaration |
	//            funOutVars+=OutputVarDeclaration |
	//            funInOutVars+=InputOutputVarDeclaration |
	//            funVars+=VarDeclaration
	//        )*
	//        statement=StatementList
	//    'END_FUNCTION'
	//;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	///* ======================= END Function ======================= */
	///* ======================= START Process and State  ======================= */
	//Process:
	//    'PROCESS' name=ID
	//        (
	//            procInVars+=InputVarDeclaration |
	//            procOutVars+=OutputVarDeclaration |
	//            procInOutVars+=InputOutputVarDeclaration |
	//            procProcessVars+=ProcessVarDeclaration |
	//            procVars+=VarDeclaration |
	//            procTempVars+=TempVarDeclaration
	//        )*
	//        (states+=State)*
	//    'END_PROCESS';
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//State:
	//    'STATE' name=ID (looped?='LOOPED')?
	//        statement=StatementList
	//        timeout=TimeoutStatement?
	//    'END_STATE';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	///* ======================= END Process and State  ======================= */
	///* ======================= START poST Statements ======================= */
	//SetStateStatement:
	//    {SetStateStatement} 'SET' ('STATE' state=[State] | next?='NEXT');
	public SetStateStatementElements getSetStateStatementAccess() {
		return pSetStateStatement;
	}
	
	public ParserRule getSetStateStatementRule() {
		return getSetStateStatementAccess().getRule();
	}
	
	//ProcessStatements:
	//    StartProcessStatement | StopProcessStatement | ErrorProcessStatement;
	public ProcessStatementsElements getProcessStatementsAccess() {
		return pProcessStatements;
	}
	
	public ParserRule getProcessStatementsRule() {
		return getProcessStatementsAccess().getRule();
	}
	
	//ProcessStatusExpression:
	//    'PROCESS' process=[Variable] 'IN' 'STATE' (active?='ACTIVE' | inactive?="INACTIVE" | stop?='STOP' | error?='ERROR');
	public ProcessStatusExpressionElements getProcessStatusExpressionAccess() {
		return pProcessStatusExpression;
	}
	
	public ParserRule getProcessStatusExpressionRule() {
		return getProcessStatusExpressionAccess().getRule();
	}
	
	//StartProcessStatement:
	//    {StartProcessStatement} ('START' 'PROCESS' process=[Variable]) | {StartProcessStatement} 'RESTART';
	public StartProcessStatementElements getStartProcessStatementAccess() {
		return pStartProcessStatement;
	}
	
	public ParserRule getStartProcessStatementRule() {
		return getStartProcessStatementAccess().getRule();
	}
	
	//StopProcessStatement:
	//    {StopProcessStatement} 'STOP' ('PROCESS' process=[Variable])?;
	public StopProcessStatementElements getStopProcessStatementAccess() {
		return pStopProcessStatement;
	}
	
	public ParserRule getStopProcessStatementRule() {
		return getStopProcessStatementAccess().getRule();
	}
	
	//ErrorProcessStatement:
	//    {ErrorProcessStatement} 'ERROR' ('PROCESS' process=[Variable])?;
	public ErrorProcessStatementElements getErrorProcessStatementAccess() {
		return pErrorProcessStatement;
	}
	
	public ParserRule getErrorProcessStatementRule() {
		return getErrorProcessStatementAccess().getRule();
	}
	
	//TimeoutStatement:
	//    'TIMEOUT' (const=Constant | variable=[SymbolicVariable]) 'THEN'
	//        statement=StatementList
	//    'END_TIMEOUT';
	public TimeoutStatementElements getTimeoutStatementAccess() {
		return pTimeoutStatement;
	}
	
	public ParserRule getTimeoutStatementRule() {
		return getTimeoutStatementAccess().getRule();
	}
	
	//ResetTimerStatement:
	//    {ResetTimerStatement} 'RESET' 'TIMER';
	public ResetTimerStatementElements getResetTimerStatementAccess() {
		return pResetTimerStatement;
	}
	
	public ParserRule getResetTimerStatementRule() {
		return getResetTimerStatementAccess().getRule();
	}
	
	///* ======================= END poST Statements ======================= */
	///* ======================= START Subprogram Call ======================= */
	//FBInvocation:
	//    fb=[SymbolicVariable] '(' (args=ParamAssignmentElements)? ')';
	public FBInvocationElements getFBInvocationAccess() {
		return pFBInvocation;
	}
	
	public ParserRule getFBInvocationRule() {
		return getFBInvocationAccess().getRule();
	}
	
	//FunctionCall:
	//    function=[Function] '(' (args=ParamAssignmentElements)? ')';
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//ParamAssignmentElements:
	//    elements+=ParamAssignment (',' elements+=ParamAssignment)*;
	public ParamAssignmentElementsElements getParamAssignmentElementsAccess() {
		return pParamAssignmentElements;
	}
	
	public ParserRule getParamAssignmentElementsRule() {
		return getParamAssignmentElementsAccess().getRule();
	}
	
	//ParamAssignment:
	//    variable=[SymbolicVariable] assig=AssignmentType value=Expression;
	public ParamAssignmentElements getParamAssignmentAccess() {
		return pParamAssignment;
	}
	
	public ParserRule getParamAssignmentRule() {
		return getParamAssignmentAccess().getRule();
	}
	
	///* ======================= END Subprogram Call ======================= */
	///* ======================= START Expression ======================= */
	//Expression:
	//    XorExpression ({Expression.left=current} OR_OPERATOR right=XorExpression)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//terminal OR_OPERATOR:
	//    'OR';
	public TerminalRule getOR_OPERATORRule() {
		return tOR_OPERATOR;
	}
	
	//XorExpression:
	//    AndExpression ({XorExpression.left=current} XOR_OPERATOR right=AndExpression)*;
	public XorExpressionElements getXorExpressionAccess() {
		return pXorExpression;
	}
	
	public ParserRule getXorExpressionRule() {
		return getXorExpressionAccess().getRule();
	}
	
	//terminal XOR_OPERATOR:
	//    'XOR';
	public TerminalRule getXOR_OPERATORRule() {
		return tXOR_OPERATOR;
	}
	
	//AndExpression:
	//    CompExpression ({AndExpression.left=current} AND_OPERATOR right=CompExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//terminal AND_OPERATOR:
	//    '&' | 'AND';
	public TerminalRule getAND_OPERATORRule() {
		return tAND_OPERATOR;
	}
	
	//CompExpression:
	//    EquExpression ({CompExpression.left=current} compOp=CompOperator right=EquExpression)*;
	public CompExpressionElements getCompExpressionAccess() {
		return pCompExpression;
	}
	
	public ParserRule getCompExpressionRule() {
		return getCompExpressionAccess().getRule();
	}
	
	//enum CompOperator:
	//    EQUAL='=' | NOT_EQUAL='<>';
	public CompOperatorElements getCompOperatorAccess() {
		return eCompOperator;
	}
	
	public EnumRule getCompOperatorRule() {
		return getCompOperatorAccess().getRule();
	}
	
	//EquExpression:
	//    AddExpression ({EquExpression.left=current} equOp=EquOperator right=AddExpression)*;
	public EquExpressionElements getEquExpressionAccess() {
		return pEquExpression;
	}
	
	public ParserRule getEquExpressionRule() {
		return getEquExpressionAccess().getRule();
	}
	
	//enum EquOperator:
	//    LESS='<' | GREATER='>' | LESS_EQU='<=' | GREATER_EQU='>=';
	public EquOperatorElements getEquOperatorAccess() {
		return eEquOperator;
	}
	
	public EnumRule getEquOperatorRule() {
		return getEquOperatorAccess().getRule();
	}
	
	//AddExpression:
	//    MulExpression ({AddExpression.left=current} addOp=AddOperator right=MulExpression)*;
	public AddExpressionElements getAddExpressionAccess() {
		return pAddExpression;
	}
	
	public ParserRule getAddExpressionRule() {
		return getAddExpressionAccess().getRule();
	}
	
	//enum AddOperator:
	//    PLUS='+' | MINUS='-';
	public AddOperatorElements getAddOperatorAccess() {
		return eAddOperator;
	}
	
	public EnumRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}
	
	//MulExpression:
	//    PowerExpression ({MulExpression.left=current} mulOp=MulOperator right=PowerExpression)*;
	public MulExpressionElements getMulExpressionAccess() {
		return pMulExpression;
	}
	
	public ParserRule getMulExpressionRule() {
		return getMulExpressionAccess().getRule();
	}
	
	//enum MulOperator:
	//    MUL='*' | DIV='/' | MOD='MOD';
	public MulOperatorElements getMulOperatorAccess() {
		return eMulOperator;
	}
	
	public EnumRule getMulOperatorRule() {
		return getMulOperatorAccess().getRule();
	}
	
	//PowerExpression:
	//    UnaryExpression ({PowerExpression.left=current} POWER_OPERATOR right=UnaryExpression)*;
	public PowerExpressionElements getPowerExpressionAccess() {
		return pPowerExpression;
	}
	
	public ParserRule getPowerExpressionRule() {
		return getPowerExpressionAccess().getRule();
	}
	
	//terminal POWER_OPERATOR:
	//    '**';
	public TerminalRule getPOWER_OPERATORRule() {
		return tPOWER_OPERATOR;
	}
	
	//UnaryExpression:
	//    PrimaryExpression | (unOp=UnaryOperator right=PrimaryExpression);
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//enum UnaryOperator:
	//    NOT='NOT' | UNMINUS='-';
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return eUnaryOperator;
	}
	
	public EnumRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//PrimaryExpression:
	//    const=Constant | variable=[SymbolicVariable] | array=ArrayVariable | procStatus=ProcessStatusExpression | funCall=FunctionCall | '(' nestExpr=Expression ')';
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	///* ======================= END Expression ======================= */
	///* ======================= START ST Statements ======================= */
	//StatementList:
	//    {StatementList} (statements+=Statement)*;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}
	
	//Statement:
	//    (AssignmentStatement ';') |
	//    SelectionStatement |
	//    IterationStatement |
	//    (FBInvocation ';') |
	//    (SubprogramControlStatement ';') |
	//    (ExitStatement ';') |
	//    (ProcessStatements ';') |
	//    (SetStateStatement ';') |
	//    (ResetTimerStatement ';');
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//AssignmentStatement:
	//    (variable=[SymbolicVariable] | array=ArrayVariable) ':=' value=Expression;
	public AssignmentStatementElements getAssignmentStatementAccess() {
		return pAssignmentStatement;
	}
	
	public ParserRule getAssignmentStatementRule() {
		return getAssignmentStatementAccess().getRule();
	}
	
	//SelectionStatement:
	//    IfStatement | CaseStatement;
	public SelectionStatementElements getSelectionStatementAccess() {
		return pSelectionStatement;
	}
	
	public ParserRule getSelectionStatementRule() {
		return getSelectionStatementAccess().getRule();
	}
	
	//IfStatement:
	//    'IF' mainCond=Expression 'THEN'
	//        mainStatement=StatementList
	//    ('ELSIF' elseIfCond+=Expression 'THEN'
	//        elseIfStatements+=StatementList
	//    )*
	//    ('ELSE'
	//        elseStatement=StatementList
	//    )?
	//    'END_IF';
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//CaseStatement:
	//    'CASE' cond=Expression 'OF'
	//        (caseElements+=CaseElement)*
	//    ('ELSE'
	//        elseStatement=StatementList
	//    )?
	//    'END_CASE';
	public CaseStatementElements getCaseStatementAccess() {
		return pCaseStatement;
	}
	
	public ParserRule getCaseStatementRule() {
		return getCaseStatementAccess().getRule();
	}
	
	//CaseElement:
	//    caseList=CaseList ':' statement=StatementList;
	public CaseElementElements getCaseElementAccess() {
		return pCaseElement;
	}
	
	public ParserRule getCaseElementRule() {
		return getCaseElementAccess().getRule();
	}
	
	//CaseList:
	//    caseListElement+=CaseListElement (',' caseListElement+=CaseListElement)*;
	public CaseListElements getCaseListAccess() {
		return pCaseList;
	}
	
	public ParserRule getCaseListRule() {
		return getCaseListAccess().getRule();
	}
	
	//CaseListElement:
	//    num=SignedInteger | variable=[SymbolicVariable];
	public CaseListElementElements getCaseListElementAccess() {
		return pCaseListElement;
	}
	
	public ParserRule getCaseListElementRule() {
		return getCaseListElementAccess().getRule();
	}
	
	//IterationStatement:
	//    ForStatement | WhileStatement | RepeatStatement;
	public IterationStatementElements getIterationStatementAccess() {
		return pIterationStatement;
	}
	
	public ParserRule getIterationStatementRule() {
		return getIterationStatementAccess().getRule();
	}
	
	//ForStatement:
	//    'FOR' variable=[SymbolicVariable] ':=' forList=ForList 'DO'
	//        statement=StatementList
	//    'END_FOR';
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//ForList:
	//    start=Expression 'TO' end=Expression ('BY' step=Expression)?;
	public ForListElements getForListAccess() {
		return pForList;
	}
	
	public ParserRule getForListRule() {
		return getForListAccess().getRule();
	}
	
	//WhileStatement:
	//    'WHILE' cond=Expression 'DO'
	//        statement=StatementList
	//    'END_WHILE';
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//RepeatStatement:
	//    'REPEAT'
	//        statement=StatementList
	//    'UNTIL' cond=Expression 'END_REPEAT';
	public RepeatStatementElements getRepeatStatementAccess() {
		return pRepeatStatement;
	}
	
	public ParserRule getRepeatStatementRule() {
		return getRepeatStatementAccess().getRule();
	}
	
	//SubprogramControlStatement:
	//    {SubprogramControlStatement} 'RETURN';
	public SubprogramControlStatementElements getSubprogramControlStatementAccess() {
		return pSubprogramControlStatement;
	}
	
	public ParserRule getSubprogramControlStatementRule() {
		return getSubprogramControlStatementAccess().getRule();
	}
	
	//ExitStatement:
	//    {ExitStatement} 'EXIT';
	public ExitStatementElements getExitStatementAccess() {
		return pExitStatement;
	}
	
	public ParserRule getExitStatementRule() {
		return getExitStatementAccess().getRule();
	}
	
	///* ======================= END ST Statements ======================= */
	///* ======================= START Variables ======================= */
	//SymbolicVariable:
	//    name=ID;
	public SymbolicVariableElements getSymbolicVariableAccess() {
		return pSymbolicVariable;
	}
	
	public ParserRule getSymbolicVariableRule() {
		return getSymbolicVariableAccess().getRule();
	}
	
	//SimpleSpecificationInit:
	//    {SimpleSpecificationInit} type=DataTypeName (':=' value=Expression)?;
	public SimpleSpecificationInitElements getSimpleSpecificationInitAccess() {
		return pSimpleSpecificationInit;
	}
	
	public ParserRule getSimpleSpecificationInitRule() {
		return getSimpleSpecificationInitAccess().getRule();
	}
	
	//VarList:
	//    vars+=SymbolicVariable (',' vars+=SymbolicVariable)*;
	public VarListElements getVarListAccess() {
		return pVarList;
	}
	
	public ParserRule getVarListRule() {
		return getVarListAccess().getRule();
	}
	
	//VarInitDeclaration:
	//    varList=VarList ':' (spec=SimpleSpecificationInit | arrSpec=ArraySpecificationInit | fb=[FunctionBlock]);
	public VarInitDeclarationElements getVarInitDeclarationAccess() {
		return pVarInitDeclaration;
	}
	
	public ParserRule getVarInitDeclarationRule() {
		return getVarInitDeclarationAccess().getRule();
	}
	
	//InputVarDeclaration:
	//    {InputVarDeclaration}
	//    'VAR_INPUT'
	//        (vars+=VarInitDeclaration ';')*
	//    'END_VAR';
	public InputVarDeclarationElements getInputVarDeclarationAccess() {
		return pInputVarDeclaration;
	}
	
	public ParserRule getInputVarDeclarationRule() {
		return getInputVarDeclarationAccess().getRule();
	}
	
	//OutputVarDeclaration:
	//    {OutputVarDeclaration}
	//    'VAR_OUTPUT'
	//        (vars+=VarInitDeclaration ';')*
	//    'END_VAR';
	public OutputVarDeclarationElements getOutputVarDeclarationAccess() {
		return pOutputVarDeclaration;
	}
	
	public ParserRule getOutputVarDeclarationRule() {
		return getOutputVarDeclarationAccess().getRule();
	}
	
	//InputOutputVarDeclaration:
	//    {InputOutputVarDeclaration}
	//    'VAR_IN_OUT'
	//        (vars+=VarInitDeclaration ';')*
	//    'END_VAR';
	public InputOutputVarDeclarationElements getInputOutputVarDeclarationAccess() {
		return pInputOutputVarDeclaration;
	}
	
	public ParserRule getInputOutputVarDeclarationRule() {
		return getInputOutputVarDeclarationAccess().getRule();
	}
	
	//VarDeclaration:
	//    {VarDeclaration}
	//    'VAR' (const?='CONSTANT')?
	//        (vars+=VarInitDeclaration ';')*
	//    'END_VAR';
	public VarDeclarationElements getVarDeclarationAccess() {
		return pVarDeclaration;
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}
	
	//TempVarDeclaration:
	//    {TempVarDeclaration}
	//    'VAR_TEMP'
	//        (vars+=VarInitDeclaration ';')*
	//    'END_VAR';
	public TempVarDeclarationElements getTempVarDeclarationAccess() {
		return pTempVarDeclaration;
	}
	
	public ParserRule getTempVarDeclarationRule() {
		return getTempVarDeclarationAccess().getRule();
	}
	
	//ExternalVarInitDeclaration:
	//    varList=VarList ':' type=DataTypeName;
	public ExternalVarInitDeclarationElements getExternalVarInitDeclarationAccess() {
		return pExternalVarInitDeclaration;
	}
	
	public ParserRule getExternalVarInitDeclarationRule() {
		return getExternalVarInitDeclarationAccess().getRule();
	}
	
	//ExternalVarDeclaration:
	//    {ExternalVarDeclaration}
	//    'VAR_EXTERNAL' (const?='CONSTANT')?
	//        (vars+=ExternalVarInitDeclaration ';')*
	//    'END_VAR';
	public ExternalVarDeclarationElements getExternalVarDeclarationAccess() {
		return pExternalVarDeclaration;
	}
	
	public ParserRule getExternalVarDeclarationRule() {
		return getExternalVarDeclarationAccess().getRule();
	}
	
	//GlobalVarInitDeclaration:
	//    varList=VarList 'AT' location=DIRECT_VARIABLE ':' type=DataTypeName;
	public GlobalVarInitDeclarationElements getGlobalVarInitDeclarationAccess() {
		return pGlobalVarInitDeclaration;
	}
	
	public ParserRule getGlobalVarInitDeclarationRule() {
		return getGlobalVarInitDeclarationAccess().getRule();
	}
	
	//GlobalVarDeclaration:
	//    {GlobalVarDeclaration}
	//    'VAR_GLOBAL' (const?='CONSTANT')?
	//        (
	//            (varsSimple+=VarInitDeclaration ';') |
	//            (varsAs+=GlobalVarInitDeclaration ';')
	//        )*
	//    'END_VAR';
	public GlobalVarDeclarationElements getGlobalVarDeclarationAccess() {
		return pGlobalVarDeclaration;
	}
	
	public ParserRule getGlobalVarDeclarationRule() {
		return getGlobalVarDeclarationAccess().getRule();
	}
	
	///* ======================= END Variables ======================= */
	///* ======================= START poST Variables ======================= */
	//ProcessVariable:
	//    name=ID;
	public ProcessVariableElements getProcessVariableAccess() {
		return pProcessVariable;
	}
	
	public ParserRule getProcessVariableRule() {
		return getProcessVariableAccess().getRule();
	}
	
	//ProcessVarList:
	//    vars+=ProcessVariable (',' vars+=ProcessVariable)*;
	public ProcessVarListElements getProcessVarListAccess() {
		return pProcessVarList;
	}
	
	public ParserRule getProcessVarListRule() {
		return getProcessVarListAccess().getRule();
	}
	
	//ProcessVarInitDeclaration:
	//    varList=ProcessVarList ':' process=[Process];
	public ProcessVarInitDeclarationElements getProcessVarInitDeclarationAccess() {
		return pProcessVarInitDeclaration;
	}
	
	public ParserRule getProcessVarInitDeclarationRule() {
		return getProcessVarInitDeclarationAccess().getRule();
	}
	
	//ProcessVarDeclaration:
	//    {ProcessVarDeclaration}
	//    'VAR_PROCESS'
	//        (vars+=ProcessVarInitDeclaration ';')*
	//    'END_VAR';
	public ProcessVarDeclarationElements getProcessVarDeclarationAccess() {
		return pProcessVarDeclaration;
	}
	
	public ParserRule getProcessVarDeclarationRule() {
		return getProcessVarDeclarationAccess().getRule();
	}
	
	///* ======================= END poST Variables ======================= */
	///* ======================= START Array ======================= */
	//ArrayVariable:
	//    variable=[SymbolicVariable] '[' index=Expression ']';
	public ArrayVariableElements getArrayVariableAccess() {
		return pArrayVariable;
	}
	
	public ParserRule getArrayVariableRule() {
		return getArrayVariableAccess().getRule();
	}
	
	//ArraySpecificationInit:
	//    init=ArraySpecification (':=' values=ArrayInitialization)?;
	public ArraySpecificationInitElements getArraySpecificationInitAccess() {
		return pArraySpecificationInit;
	}
	
	public ParserRule getArraySpecificationInitRule() {
		return getArraySpecificationInitAccess().getRule();
	}
	
	//ArraySpecification:
	//    'ARRAY' '[' (interval=ArrayInterval | '*') ']' 'OF' type=DataTypeName;
	public ArraySpecificationElements getArraySpecificationAccess() {
		return pArraySpecification;
	}
	
	public ParserRule getArraySpecificationRule() {
		return getArraySpecificationAccess().getRule();
	}
	
	//ArrayInterval:
	//    start=Expression '..' end=Expression;
	public ArrayIntervalElements getArrayIntervalAccess() {
		return pArrayInterval;
	}
	
	public ParserRule getArrayIntervalRule() {
		return getArrayIntervalAccess().getRule();
	}
	
	//ArrayInitialization :
	//    '[' elements+=Expression (',' elements+=Expression)* ']';
	public ArrayInitializationElements getArrayInitializationAccess() {
		return pArrayInitialization;
	}
	
	public ParserRule getArrayInitializationRule() {
		return getArrayInitializationAccess().getRule();
	}
	
	///* ======================= END Array ======================= */
	///* ======================= START Time Literals ======================= */
	//TimeLiteral:
	//     TIME_PREF_LITERAL '#' '-'? interval=INTERVAL;
	public TimeLiteralElements getTimeLiteralAccess() {
		return pTimeLiteral;
	}
	
	public ParserRule getTimeLiteralRule() {
		return getTimeLiteralAccess().getRule();
	}
	
	//terminal TIME_PREF_LITERAL:
	//    'T';
	public TerminalRule getTIME_PREF_LITERALRule() {
		return tTIME_PREF_LITERAL;
	}
	
	//terminal INTERVAL returns ecore::EString:
	//    (INTEGER 'd')? (INTEGER 'h')? (INTEGER 'm')? (INTEGER 's')? (INTEGER 'ms')?;
	public TerminalRule getINTERVALRule() {
		return tINTERVAL;
	}
	
	///* ======================= END Time Literals ======================= */
	///* ======================= START Direct Variables ======================= */
	//terminal DIRECT_VARIABLE returns ecore::EString:
	//    '%' DIRECT_TYPE_PREFIX DIRECT_SIZE_PREFIX INTEGER ('.' INTEGER)*;
	public TerminalRule getDIRECT_VARIABLERule() {
		return tDIRECT_VARIABLE;
	}
	
	//terminal fragment DIRECT_TYPE_PREFIX:
	//    'I' | 'Q' | 'M';
	public TerminalRule getDIRECT_TYPE_PREFIXRule() {
		return tDIRECT_TYPE_PREFIX;
	}
	
	//terminal fragment DIRECT_SIZE_PREFIX:
	//    'X' | 'B' | 'W' | 'D' | 'L';
	public TerminalRule getDIRECT_SIZE_PREFIXRule() {
		return tDIRECT_SIZE_PREFIX;
	}
	
	///* ======================= END Direct Variables ======================= */
	///* ======================= START Elementary data types ======================= */
	//DataTypeName returns ecore::EString:
	//    NumericTypeName | BIT_STRING_TYPE_NAME | TIME_TYPE_NAME| STRING_TYPE_NAME;
	public DataTypeNameElements getDataTypeNameAccess() {
		return pDataTypeName;
	}
	
	public ParserRule getDataTypeNameRule() {
		return getDataTypeNameAccess().getRule();
	}
	
	//NumericTypeName returns ecore::EString:
	//    IntegerTypeName | REAL_TYPE_NAME;
	public NumericTypeNameElements getNumericTypeNameAccess() {
		return pNumericTypeName;
	}
	
	public ParserRule getNumericTypeNameRule() {
		return getNumericTypeNameAccess().getRule();
	}
	
	//IntegerTypeName returns ecore::EString:
	//    SIGNED_INTEGER_TYPE_NAME | UNSIGNED_INTEGER_TYPE_NAME;
	public IntegerTypeNameElements getIntegerTypeNameAccess() {
		return pIntegerTypeName;
	}
	
	public ParserRule getIntegerTypeNameRule() {
		return getIntegerTypeNameAccess().getRule();
	}
	
	//terminal SIGNED_INTEGER_TYPE_NAME returns ecore::EString:
	//    'SINT' | 'INT' | 'DINT' | 'LINT';
	public TerminalRule getSIGNED_INTEGER_TYPE_NAMERule() {
		return tSIGNED_INTEGER_TYPE_NAME;
	}
	
	//terminal UNSIGNED_INTEGER_TYPE_NAME  returns ecore::EString:
	//    'USINT' | 'UINT' | 'UDINT' | 'ULINT';
	public TerminalRule getUNSIGNED_INTEGER_TYPE_NAMERule() {
		return tUNSIGNED_INTEGER_TYPE_NAME;
	}
	
	//terminal REAL_TYPE_NAME returns ecore::EString:
	//    'REAL' | 'LREAL';
	public TerminalRule getREAL_TYPE_NAMERule() {
		return tREAL_TYPE_NAME;
	}
	
	//terminal BIT_STRING_TYPE_NAME returns ecore::EString:
	//    'BOOL' | 'BYTE' | 'WORD' | 'DWORD' | 'LWORD';
	public TerminalRule getBIT_STRING_TYPE_NAMERule() {
		return tBIT_STRING_TYPE_NAME;
	}
	
	//terminal TIME_TYPE_NAME returns ecore::EString:
	//    'TIME';
	public TerminalRule getTIME_TYPE_NAMERule() {
		return tTIME_TYPE_NAME;
	}
	
	//terminal STRING_TYPE_NAME returns ecore::EString:
	//    'STRING' | 'WSTRING';
	public TerminalRule getSTRING_TYPE_NAMERule() {
		return tSTRING_TYPE_NAME;
	}
	
	///* ======================= END Elementary data types ======================= */
	///* ======================= START Numeric Literals ======================= */
	//Constant:
	//    num=NumericLiteral |
	//    time=TimeLiteral |
	//    oth=(BINARY_INTEGER |
	//        OCTAL_INTEGER |
	//        HEX_INTEGER |
	//        BOOLEAN_LITERAL);
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//terminal INTEGER returns ecore::EString:
	//    DIGIT+;
	public TerminalRule getINTEGERRule() {
		return tINTEGER;
	}
	
	//SignedInteger:
	//    (iSig?='-')? value=INTEGER;
	public SignedIntegerElements getSignedIntegerAccess() {
		return pSignedInteger;
	}
	
	public ParserRule getSignedIntegerRule() {
		return getSignedIntegerAccess().getRule();
	}
	
	//terminal REAL returns ecore::EString:
	//    INTEGER '.' INTEGER;
	public TerminalRule getREALRule() {
		return tREAL;
	}
	
	//terminal BINARY_INTEGER returns ecore::EString:
	//    '2#' BIT+;
	public TerminalRule getBINARY_INTEGERRule() {
		return tBINARY_INTEGER;
	}
	
	//terminal OCTAL_INTEGER returns ecore::EString:
	//    '8#' OCTAL_DIGIT+;
	public TerminalRule getOCTAL_INTEGERRule() {
		return tOCTAL_INTEGER;
	}
	
	//terminal HEX_INTEGER returns ecore::EString:
	//    '16#' HEX_DIGIT+;
	public TerminalRule getHEX_INTEGERRule() {
		return tHEX_INTEGER;
	}
	
	//NumericLiteral:
	//    IntegerLiteral | RealLiteral;
	public NumericLiteralElements getNumericLiteralAccess() {
		return pNumericLiteral;
	}
	
	public ParserRule getNumericLiteralRule() {
		return getNumericLiteralAccess().getRule();
	}
	
	//IntegerLiteral:
	//    (type=IntegerTypeName '#')? value=SignedInteger;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}
	
	//RealLiteral:
	//    (type=REAL_TYPE_NAME '#')? (rSig?='-')? value=REAL;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//terminal BOOLEAN_LITERAL:
	//    'TRUE' | 'FALSE';
	public TerminalRule getBOOLEAN_LITERALRule() {
		return tBOOLEAN_LITERAL;
	}
	
	///* ======================= END Numeric Literals ======================= */
	///* ======================= START Identifiers ======================= */
	//terminal fragment LETTER:
	//    'A'..'Z' | 'a'..'z' | '_';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal fragment BIT:
	//    '0' | '1';
	public TerminalRule getBITRule() {
		return tBIT;
	}
	
	//terminal fragment OCTAL_DIGIT:
	//    '0'..'7';
	public TerminalRule getOCTAL_DIGITRule() {
		return tOCTAL_DIGIT;
	}
	
	//terminal fragment DIGIT:
	//    '0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal fragment HEX_DIGIT:
	//    DIGIT | 'A'..'F';
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal ID returns ecore::EString:
	//    LETTER (LETTER | DIGIT)*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal ML_COMMENT:
	//    '/*' -> '*/' | '(*' -> '*)';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//    '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//    (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//    .;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
